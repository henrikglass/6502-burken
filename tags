!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
ACC	src/m6502.h	/^    u8 ACC = 0x00, X = 0x00, Y = 0x00;$/;"	m	struct:Cpu	typeref:typename:u8
AddrModeRet	src/m6502.h	/^struct AddrModeRet$/;"	s
BIT_B	src/m6502.h	/^const u8 BIT_B      = 4; \/\/ BRK was executed$/;"	v	typeref:typename:const u8
BIT_C	src/m6502.h	/^const u8 BIT_C      = 0; \/\/ Carry$/;"	v	typeref:typename:const u8
BIT_D	src/m6502.h	/^const u8 BIT_D      = 3; \/\/ Decimal mode$/;"	v	typeref:typename:const u8
BIT_I	src/m6502.h	/^const u8 BIT_I      = 2; \/\/ block IRQ interrupts$/;"	v	typeref:typename:const u8
BIT_N	src/m6502.h	/^const u8 BIT_N      = 7; \/\/ Negative$/;"	v	typeref:typename:const u8
BIT_UNUSED	src/m6502.h	/^const u8 BIT_UNUSED = 5; \/\/$/;"	v	typeref:typename:const u8
BIT_V	src/m6502.h	/^const u8 BIT_V      = 6; \/\/ oVerflow$/;"	v	typeref:typename:const u8
BIT_Z	src/m6502.h	/^const u8 BIT_Z      = 1; \/\/ Zero$/;"	v	typeref:typename:const u8
BRK	src/m6502.h	/^    BRK     = 0x00,$/;"	e	enum:TTInstruction
Cpu	src/m6502.cpp	/^Cpu::Cpu() {$/;"	f	class:Cpu
Cpu	src/m6502.h	/^struct Cpu $/;"	s
FREE_RAM_HIGH	src/memory.h	/^const u16 FREE_RAM_HIGH   = 0x3FFF;$/;"	v	typeref:typename:const u16
FREE_RAM_LOW	src/memory.h	/^const u16 FREE_RAM_LOW    = 0x0200;$/;"	v	typeref:typename:const u16
FREE_ROM_HIGH	src/memory.h	/^const u16 FREE_ROM_HIGH   = 0xFFF9;$/;"	v	typeref:typename:const u16
FREE_ROM_LOW	src/memory.h	/^const u16 FREE_ROM_LOW    = 0x8000;$/;"	v	typeref:typename:const u16
HIGH	src/typedefs.h	/^const bool HIGH = true;$/;"	v	typeref:typename:const bool
IO_MEM_HIGH	src/memory.h	/^const u16 IO_MEM_HIGH     = 0x7FFF;$/;"	v	typeref:typename:const u16
IO_MEM_LOW	src/memory.h	/^const u16 IO_MEM_LOW      = 0x4000;$/;"	v	typeref:typename:const u16
IRQ_BRK_VECTOR	src/memory.h	/^const u16 IRQ_BRK_VECTOR  = 0xFFFE;$/;"	v	typeref:typename:const u16
Instruction	src/m6502.h	/^struct Instruction$/;"	s
JMP_ABS	src/m6502.h	/^    JMP_ABS = 0x4c$/;"	e	enum:TTInstruction
LDA_I	src/m6502.h	/^    LDA_I   = 0xA9,$/;"	e	enum:TTInstruction
LDX_I	src/m6502.h	/^    LDX_I   = 0xA2,$/;"	e	enum:TTInstruction
LDY_I	src/m6502.h	/^    LDY_I   = 0xA0,$/;"	e	enum:TTInstruction
LOW	src/typedefs.h	/^const bool LOW  = false;$/;"	v	typeref:typename:const bool
LSB_MASK	src/m6502_instructions.cpp	/^const u8 LSB_MASK = 0b0000001;$/;"	v	typeref:typename:const u8
M6502_H	src/m6502.h	/^#define M6502_H$/;"	d
MEMORY_H	src/memory.h	/^#define MEMORY_H$/;"	d
MSB_MASK	src/m6502_instructions.cpp	/^const u8 MSB_MASK = 0b1000000;$/;"	v	typeref:typename:const u8
Memory	src/memory.h	/^    Memory()$/;"	f	struct:Memory
Memory	src/memory.h	/^struct Memory $/;"	s
NMI_VECTOR	src/memory.h	/^const u16 NMI_VECTOR      = 0xFFFA; $/;"	v	typeref:typename:const u16
NOP	src/m6502.h	/^    NOP     = 0xEA,$/;"	e	enum:TTInstruction
OP_INVALID	src/m6502_instructions.cpp	/^u8 OP_INVALID(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
PC	src/m6502.h	/^    u16 PC = 0x00;$/;"	m	struct:Cpu	typeref:typename:u16
PHA	src/m6502.h	/^    PHA     = 0x48,$/;"	e	enum:TTInstruction
RESET_VECTOR	src/memory.h	/^const u16 RESET_VECTOR    = 0xFFFC; \/\/ TODO implement at 0xFCE2;$/;"	v	typeref:typename:const u16
SP	src/m6502.h	/^    u16 SP = 0x0000;$/;"	m	struct:Cpu	typeref:typename:u16
SR	src/m6502.h	/^    u8 SR = 0x00;$/;"	m	struct:Cpu	typeref:typename:u8
STACK_PAGE_HIGH	src/memory.h	/^const u16 STACK_PAGE_HIGH = 0x01FF;$/;"	v	typeref:typename:const u16
STACK_PAGE_LOW	src/memory.h	/^const u16 STACK_PAGE_LOW  = 0x0100;$/;"	v	typeref:typename:const u16
TTInstruction	src/m6502.h	/^enum TTInstruction $/;"	g
TYPEDEFS_H	src/typedefs.h	/^#define TYPEDEFS_H$/;"	d
X	src/m6502.h	/^    u8 ACC = 0x00, X = 0x00, Y = 0x00;$/;"	m	struct:Cpu	typeref:typename:u8
Y	src/m6502.h	/^    u8 ACC = 0x00, X = 0x00, Y = 0x00;$/;"	m	struct:Cpu	typeref:typename:u8
ZERO_PAGE_HIGH	src/memory.h	/^const u16 ZERO_PAGE_HIGH  = 0x00FF;$/;"	v	typeref:typename:const u16
ZERO_PAGE_LOW	src/memory.h	/^const u16 ZERO_PAGE_LOW   = 0x0000;$/;"	v	typeref:typename:const u16
__anona94a61ab0102	src/memory.h	/^    {$/;"	f	struct:Memory	file:
additional_cycles	src/m6502.h	/^    u8  additional_cycles;$/;"	m	struct:AddrModeRet	typeref:typename:u8
addr_X_ind	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_X_ind(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_abs	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_abs(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_abs_X	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_abs_X(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_abs_Y	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_abs_Y(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_acc	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_acc(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_imm	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_imm(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_ind	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_ind(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_ind_Y	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_ind_Y(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_mode	src/m6502.h	/^    AddrModeRet (*addr_mode)(Cpu *cpu); \/\/ addressing mode.$/;"	m	struct:Instruction	typeref:typename:AddrModeRet (*)(Cpu * cpu)
addr_rel	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_rel(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_zpg	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_zpg(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_zpg_X	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_zpg_X(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_zpg_Y	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_zpg_Y(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
address	src/m6502.h	/^    u16 address;$/;"	m	struct:AddrModeRet	typeref:typename:u16
data	src/memory.h	/^    u8 *data;$/;"	m	struct:Memory	typeref:typename:u8 *
data_ptr	src/m6502.h	/^    u8 *data_ptr;$/;"	m	struct:AddrModeRet	typeref:typename:u8 *
execute	src/m6502.h	/^    u8 execute(Cpu *cpu) $/;"	f	struct:Instruction	typeref:typename:u8
f32	src/typedefs.h	/^typedef float    f32;$/;"	t	typeref:typename:float
f64	src/typedefs.h	/^typedef double   f64;$/;"	t	typeref:typename:double
fetch_execute_next	src/m6502.cpp	/^u8 Cpu::fetch_execute_next() $/;"	f	class:Cpu	typeref:typename:u8
generic_compare	src/m6502_instructions.cpp	/^u8 generic_compare(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu), u8 register_value)$/;"	f	typeref:typename:u8
get_status_bit	src/m6502_instructions.cpp	/^u8 get_status_bit(Cpu *cpu, u8 bit_pos) $/;"	f	typeref:typename:u8
i16	src/typedefs.h	/^typedef int16_t  i16; $/;"	t	typeref:typename:int16_t
i32	src/typedefs.h	/^typedef int32_t  i32; $/;"	t	typeref:typename:int32_t
i64	src/typedefs.h	/^typedef int64_t  i64; $/;"	t	typeref:typename:int64_t
i8	src/typedefs.h	/^typedef int8_t    i8; $/;"	t	typeref:typename:int8_t
instruction_table	src/m6502_instructions.cpp	/^Instruction instruction_table[256];$/;"	v	typeref:typename:Instruction[256]
main	src/main.cpp	/^int main() $/;"	f	typeref:typename:int
mem	src/m6502.h	/^    Memory mem;$/;"	m	struct:Cpu	typeref:typename:Memory
mnemonic	src/m6502.h	/^    std::string mnemonic;$/;"	m	struct:Instruction	typeref:typename:std::string
not_implemented	src/m6502_instructions.cpp	/^void not_implemented() $/;"	f	typeref:typename:void
op	src/m6502.h	/^    u8 (*op)(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu * cpu)); \/\/ instr.$/;"	m	struct:Instruction	typeref:typename:u8 (*)(Cpu * cpu,AddrModeRet (* addr_mode)(Cpu * cpu))
op_adc	src/m6502_instructions.cpp	/^u8 op_adc(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_and	src/m6502_instructions.cpp	/^u8 op_and(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_asl	src/m6502_instructions.cpp	/^u8 op_asl(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bcc	src/m6502_instructions.cpp	/^u8 op_bcc(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bcs	src/m6502_instructions.cpp	/^u8 op_bcs(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_beq	src/m6502_instructions.cpp	/^u8 op_beq(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bit	src/m6502_instructions.cpp	/^u8 op_bit(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bmi	src/m6502_instructions.cpp	/^u8 op_bmi(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bne	src/m6502_instructions.cpp	/^u8 op_bne(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bpl	src/m6502_instructions.cpp	/^u8 op_bpl(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_brk	src/m6502_instructions.cpp	/^u8 op_brk(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bvc	src/m6502_instructions.cpp	/^u8 op_bvc(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bvs	src/m6502_instructions.cpp	/^u8 op_bvs(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_clc	src/m6502_instructions.cpp	/^u8 op_clc(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_cld	src/m6502_instructions.cpp	/^u8 op_cld(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_cli	src/m6502_instructions.cpp	/^u8 op_cli(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_clv	src/m6502_instructions.cpp	/^u8 op_clv(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_cmp	src/m6502_instructions.cpp	/^u8 op_cmp(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_cpx	src/m6502_instructions.cpp	/^u8 op_cpx(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_cpy	src/m6502_instructions.cpp	/^u8 op_cpy(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_dec	src/m6502_instructions.cpp	/^u8 op_dec(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_dex	src/m6502_instructions.cpp	/^u8 op_dex(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_dey	src/m6502_instructions.cpp	/^u8 op_dey(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_eor	src/m6502_instructions.cpp	/^u8 op_eor(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_inc	src/m6502_instructions.cpp	/^u8 op_inc(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_inx	src/m6502_instructions.cpp	/^u8 op_inx(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_iny	src/m6502_instructions.cpp	/^u8 op_iny(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_jmp	src/m6502_instructions.cpp	/^u8 op_jmp(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_jsr	src/m6502_instructions.cpp	/^u8 op_jsr(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_lda	src/m6502_instructions.cpp	/^u8 op_lda(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_ldx	src/m6502_instructions.cpp	/^u8 op_ldx(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_ldy	src/m6502_instructions.cpp	/^u8 op_ldy(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_lsr	src/m6502_instructions.cpp	/^u8 op_lsr(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_nop	src/m6502_instructions.cpp	/^u8 op_nop(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_ora	src/m6502_instructions.cpp	/^u8 op_ora(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_pha	src/m6502_instructions.cpp	/^u8 op_pha(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_php	src/m6502_instructions.cpp	/^u8 op_php(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_pla	src/m6502_instructions.cpp	/^u8 op_pla(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_plp	src/m6502_instructions.cpp	/^u8 op_plp(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_rol	src/m6502_instructions.cpp	/^u8 op_rol(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_ror	src/m6502_instructions.cpp	/^u8 op_ror(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_rti	src/m6502_instructions.cpp	/^u8 op_rti(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_rts	src/m6502_instructions.cpp	/^u8 op_rts(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_sbc	src/m6502_instructions.cpp	/^u8 op_sbc(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_sec	src/m6502_instructions.cpp	/^u8 op_sec(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_sed	src/m6502_instructions.cpp	/^u8 op_sed(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_sei	src/m6502_instructions.cpp	/^u8 op_sei(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_sta	src/m6502_instructions.cpp	/^u8 op_sta(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_stx	src/m6502_instructions.cpp	/^u8 op_stx(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_sty	src/m6502_instructions.cpp	/^u8 op_sty(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_tax	src/m6502_instructions.cpp	/^u8 op_tax(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_tay	src/m6502_instructions.cpp	/^u8 op_tay(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_tsx	src/m6502_instructions.cpp	/^u8 op_tsx(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_txa	src/m6502_instructions.cpp	/^u8 op_txa(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_txs	src/m6502_instructions.cpp	/^u8 op_txs(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_tya	src/m6502_instructions.cpp	/^u8 op_tya(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
operator []	src/memory.h	/^    u8  operator[](u16 address) const $/;"	f	struct:Memory	typeref:typename:u8
populate_instruction_table	src/m6502_instructions.cpp	/^void populate_instruction_table() $/;"	f	typeref:typename:void
print_status	src/m6502.cpp	/^void Cpu::print_status() $/;"	f	class:Cpu	typeref:typename:void
reset	src/m6502.cpp	/^void Cpu::reset() $/;"	f	class:Cpu	typeref:typename:void
set_status_bit	src/m6502_instructions.cpp	/^void set_status_bit(Cpu *cpu, u8 bit_pos, bool value) $/;"	f	typeref:typename:void
u16	src/typedefs.h	/^typedef uint16_t u16; $/;"	t	typeref:typename:uint16_t
u32	src/typedefs.h	/^typedef uint32_t u32; $/;"	t	typeref:typename:uint32_t
u64	src/typedefs.h	/^typedef uint64_t u64; $/;"	t	typeref:typename:uint64_t
u8	src/typedefs.h	/^typedef uint8_t   u8; $/;"	t	typeref:typename:uint8_t
~Memory	src/memory.h	/^    ~Memory()$/;"	f	struct:Memory
