!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/henrik/dev/6502-burken/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
ACC	src/m6502.h	/^    u8 ACC = 0x00, X = 0x00, Y = 0x00;$/;"	m	struct:Cpu	typeref:typename:u8
AcceptDragDropPayload	src/imgui/imgui.cpp	/^const ImGuiPayload* ImGui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
ActivateItem	src/imgui/imgui.cpp	/^void ImGui::ActivateItem(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Active	src/imgui/imgui_internal.h	/^    bool                    Active;                             \/\/ Set to true on Begin(), unl/;"	m	struct:ImGuiWindow	typeref:typename:bool
ActiveId	src/imgui/imgui_internal.h	/^    ImGuiID                 ActiveId;                           \/\/ Active widget$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdAllowOverlap	src/imgui/imgui_internal.h	/^    bool                    ActiveIdAllowOverlap;               \/\/ Active widget allows anothe/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdClickOffset	src/imgui/imgui_internal.h	/^    ImVec2                  ActiveIdClickOffset;                \/\/ Clicked offset from upper-l/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
ActiveIdHasBeenEditedBefore	src/imgui/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedBefore;        \/\/ Was the value associated to/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenEditedThisFrame	src/imgui/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedThisFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenPressedBefore	src/imgui/imgui_internal.h	/^    bool                    ActiveIdHasBeenPressedBefore;       \/\/ Track whether the active id/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdIsAlive	src/imgui/imgui_internal.h	/^    ImGuiID                 ActiveIdIsAlive;                    \/\/ Active widget has been seen/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdIsJustActivated	src/imgui/imgui_internal.h	/^    bool                    ActiveIdIsJustActivated;            \/\/ Set at the time of activati/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdMouseButton	src/imgui/imgui_internal.h	/^    int                     ActiveIdMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:int
ActiveIdNoClearOnFocusLoss	src/imgui/imgui_internal.h	/^    bool                    ActiveIdNoClearOnFocusLoss;         \/\/ Disable losing active id if/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrame	src/imgui/imgui_internal.h	/^    ImGuiID                 ActiveIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdPreviousFrameHasBeenEditedBefore	src/imgui/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameHasBeenEditedBefore;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameIsAlive	src/imgui/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*            ActiveIdPreviousFrameWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ActiveIdSource	src/imgui/imgui_internal.h	/^    ImGuiInputSource        ActiveIdSource;                     \/\/ Activating with mouse or na/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
ActiveIdTimer	src/imgui/imgui_internal.h	/^    float                   ActiveIdTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
ActiveIdUsingKeyInputMask	src/imgui/imgui_internal.h	/^    ImBitArrayForNamedKeys  ActiveIdUsingKeyInputMask;          \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:ImBitArrayForNamedKeys
ActiveIdUsingMouseWheel	src/imgui/imgui_internal.h	/^    bool                    ActiveIdUsingMouseWheel;            \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdUsingNavDirMask	src/imgui/imgui_internal.h	/^    ImU32                   ActiveIdUsingNavDirMask;            \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:ImU32
ActiveIdUsingNavInputMask	src/imgui/imgui_internal.h	/^    ImU32                   ActiveIdUsingNavInputMask;          \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:ImU32
ActiveIdWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*            ActiveIdWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
Add	src/imgui/imgui_internal.h	/^    T*          Add()                               { int idx = FreeIdx; if (idx == Buf.Size) { /;"	f	struct:ImPool	typeref:typename:T *
Add	src/imgui/imgui_internal.h	/^    void        Add(const ImRect& r)                { if (Min.x > r.Min.x) Min.x = r.Min.x; if (/;"	f	struct:ImRect	typeref:typename:void
Add	src/imgui/imgui_internal.h	/^    void        Add(const ImVec2& p)                { if (Min.x > p.x)     Min.x = p.x;     if (/;"	f	struct:ImRect	typeref:typename:void
AddBezierCubic	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddBezierCubic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVe/;"	f	class:ImDrawList	typeref:typename:void
AddBezierQuadratic	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddBezierQuadratic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 /;"	f	class:ImDrawList	typeref:typename:void
AddCallback	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddCallback(ImDrawCallback callback, void* callback_data)$/;"	f	class:ImDrawList	typeref:typename:void
AddCircle	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddCircle(const ImVec2& center, float radius, ImU32 col, int num_segments, floa/;"	f	class:ImDrawList	typeref:typename:void
AddCircleFilled	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddCircleFilled(const ImVec2& center, float radius, ImU32 col, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
AddContextHook	src/imgui/imgui.cpp	/^ImGuiID ImGui::AddContextHook(ImGuiContext* ctx, const ImGuiContextHook* hook)$/;"	f	class:ImGui	typeref:typename:ImGuiID
AddConvexPolyFilled	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddConvexPolyFilled(const ImVec2* points, const int points_count, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
AddCustomRectFontGlyph	src/imgui/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float a/;"	f	class:ImFontAtlas	typeref:typename:int
AddCustomRectRegular	src/imgui/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectRegular(int width, int height)$/;"	f	class:ImFontAtlas	typeref:typename:int
AddDrawCmd	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
AddDrawListToDrawData	src/imgui/imgui.cpp	/^static void AddDrawListToDrawData(ImVector<ImDrawList*>* out_list, ImDrawList* draw_list)$/;"	f	typeref:typename:void	file:
AddFocusEvent	src/imgui/imgui.cpp	/^void ImGuiIO::AddFocusEvent(bool focused)$/;"	f	class:ImGuiIO	typeref:typename:void
AddFont	src/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFont(const ImFontConfig* font_cfg)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontDefault	src/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontDefault(const ImFontConfig* font_cfg_template)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromFileTTF	src/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontCon/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedBase85TTF	src/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(const char* compressed_ttf_data_base85/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedTTF	src/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compres/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryTTF	src/imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* ttf_data, int ttf_size, float size_pixels, const/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddGlyph	src/imgui/imgui_draw.cpp	/^void ImFont::AddGlyph(const ImFontConfig* cfg, ImWchar codepoint, float x0, float y0, float x1, /;"	f	class:ImFont	typeref:typename:void
AddImage	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max,/;"	f	class:ImDrawList	typeref:typename:void
AddImageQuad	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, c/;"	f	class:ImDrawList	typeref:typename:void
AddImageRounded	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddImageRounded(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2&/;"	f	class:ImDrawList	typeref:typename:void
AddInputCharacter	src/imgui/imgui.cpp	/^void ImGuiIO::AddInputCharacter(unsigned int c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharacterUTF16	src/imgui/imgui.cpp	/^void ImGuiIO::AddInputCharacterUTF16(ImWchar16 c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharactersUTF8	src/imgui/imgui.cpp	/^void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)$/;"	f	class:ImGuiIO	typeref:typename:void
AddKeyAnalogEvent	src/imgui/imgui.cpp	/^void ImGuiIO::AddKeyAnalogEvent(ImGuiKey key, bool down, float analog_value)$/;"	f	class:ImGuiIO	typeref:typename:void
AddKeyEvent	src/imgui/imgui.cpp	/^void ImGuiIO::AddKeyEvent(ImGuiKey key, bool down)$/;"	f	class:ImGuiIO	typeref:typename:void
AddLine	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddLine(const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness)$/;"	f	class:ImDrawList	typeref:typename:void
AddLog	src/imgui/imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
AddLog	src/imgui/imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
AddMouseButtonEvent	src/imgui/imgui.cpp	/^void ImGuiIO::AddMouseButtonEvent(int mouse_button, bool down)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMousePosEvent	src/imgui/imgui.cpp	/^void ImGuiIO::AddMousePosEvent(float x, float y)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMouseWheelEvent	src/imgui/imgui.cpp	/^void ImGuiIO::AddMouseWheelEvent(float wheel_x, float wheel_y)$/;"	f	class:ImGuiIO	typeref:typename:void
AddNgon	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float /;"	f	class:ImDrawList	typeref:typename:void
AddNgonFilled	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments)$/;"	f	class:ImDrawList	typeref:typename:void
AddPolyline	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddPolyline(const ImVec2* points, const int points_count, ImU32 col, ImDrawFlag/;"	f	class:ImDrawList	typeref:typename:void
AddQuad	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddQuad(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4,/;"	f	class:ImDrawList	typeref:typename:void
AddQuadFilled	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddQuadFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec/;"	f	class:ImDrawList	typeref:typename:void
AddRanges	src/imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddRanges(const ImWchar* ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddRect	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddRect(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding, Im/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilled	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddRectFilled(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float roundi/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilledMultiColor	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddRectFilledMultiColor(const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr/;"	f	class:ImDrawList	typeref:typename:void
AddRemapChar	src/imgui/imgui_draw.cpp	/^void ImFont::AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst)$/;"	f	class:ImFont	typeref:typename:void
AddRootWindowToDrawData	src/imgui/imgui.cpp	/^static inline void AddRootWindowToDrawData(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
AddSettingsHandler	src/imgui/imgui.cpp	/^void ImGui::AddSettingsHandler(const ImGuiSettingsHandler* handler)$/;"	f	class:ImGui	typeref:typename:void
AddText	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, cons/;"	f	class:ImDrawList	typeref:typename:void
AddText	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_/;"	f	class:ImDrawList	typeref:typename:void
AddText	src/imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddText(const char* text, const char* text_end)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddTriangle	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddTriangle(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, fl/;"	f	class:ImDrawList	typeref:typename:void
AddTriangleFilled	src/imgui/imgui_draw.cpp	/^void ImDrawList::AddTriangleFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 c/;"	f	class:ImDrawList	typeref:typename:void
AddWindowToDrawData	src/imgui/imgui.cpp	/^static void AddWindowToDrawData(ImGuiWindow* window, int layer)$/;"	f	typeref:typename:void	file:
AddWindowToSortBuffer	src/imgui/imgui.cpp	/^static void AddWindowToSortBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* windo/;"	f	typeref:typename:void	file:
AddedByTestEngine	src/imgui/imgui_internal.h	/^    bool                            AddedByTestEngine;$/;"	m	struct:ImGuiInputEvent	typeref:typename:bool
AddrModeRet	src/m6502.h	/^struct AddrModeRet$/;"	s
AlignTextToFramePadding	src/imgui/imgui_widgets.cpp	/^void ImGui::AlignTextToFramePadding()$/;"	f	class:ImGui	typeref:typename:void
AliveCount	src/imgui/imgui_internal.h	/^    ImPoolIdx       AliveCount; \/\/ Number of active\/alive items (for display purpose)$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
AnalogValue	src/imgui/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:float
AngleMax12	src/imgui/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AngleMin12	src/imgui/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AppFocused	src/imgui/imgui_internal.h	/^        ImGuiInputEventAppFocused   AppFocused;     \/\/ if Type == ImGuiInputEventType_Focus$/;"	m	union:ImGuiInputEvent::__anon6fa7fe33020a	typeref:typename:ImGuiInputEventAppFocused
Appearing	src/imgui/imgui_internal.h	/^    bool                    Appearing;                          \/\/ Set during the frame where /;"	m	struct:ImGuiWindow	typeref:typename:bool
ApplyAllFn	src/imgui/imgui_internal.h	/^    void        (*ApplyAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ApplyWindowSettings	src/imgui/imgui.cpp	/^static void ApplyWindowSettings(ImGuiWindow* window, ImGuiWindowSettings* settings)$/;"	f	typeref:typename:void	file:
ArcFastRadiusCutoff	src/imgui/imgui_internal.h	/^    float           ArcFastRadiusCutoff;                        \/\/ Cutoff radius after which a/;"	m	struct:ImDrawListSharedData	typeref:typename:float
ArcFastVtx	src/imgui/imgui_internal.h	/^    ImVec2          ArcFastVtx[IM_DRAWLIST_ARCFAST_TABLE_SIZE]; \/\/ Sample points on the quarte/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2[]
ArrowButton	src/imgui/imgui_widgets.cpp	/^bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:bool
ArrowButtonEx	src/imgui/imgui_widgets.cpp	/^bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
AttribLocationProjMtx	src/imgui/imgui_impl_opengl3.cpp	/^    GLint           AttribLocationProjMtx;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLint	file:
AttribLocationTex	src/imgui/imgui_impl_opengl3.cpp	/^    GLint           AttribLocationTex;       \/\/ Uniforms location$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLint	file:
AttribLocationVtxColor	src/imgui/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxColor;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AttribLocationVtxPos	src/imgui/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxPos;    \/\/ Vertex attributes location$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AttribLocationVtxUV	src/imgui/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxUV;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AutoFitChildAxises	src/imgui/imgui_internal.h	/^    ImS8                    AutoFitChildAxises;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitFramesX	src/imgui/imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitFramesY	src/imgui/imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitOnlyGrows	src/imgui/imgui_internal.h	/^    bool                    AutoFitOnlyGrows;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
AutoFitQueue	src/imgui/imgui_internal.h	/^    ImU8                    AutoFitQueue;                   \/\/ Queue of 8 values for the next /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
AutoFitSingleColumn	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         AutoFitSingleColumn;        \/\/ Index of single column requesti/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
AutoPosLastDirection	src/imgui/imgui_internal.h	/^    ImGuiDir                AutoPosLastDirection;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiDir
AutoScroll	src/imgui/imgui_demo.cpp	/^    bool                  AutoScroll;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
AutoScroll	src/imgui/imgui_demo.cpp	/^    bool                AutoScroll;  \/\/ Keep scrolling if already at the bottom.$/;"	m	struct:ExampleAppLog	typeref:typename:bool	file:
BIT_B	src/m6502.h	/^const u8 BIT_B      = 4; \/\/ BRK was executed$/;"	v	typeref:typename:const u8
BIT_C	src/m6502.h	/^const u8 BIT_C      = 0; \/\/ Carry$/;"	v	typeref:typename:const u8
BIT_D	src/m6502.h	/^const u8 BIT_D      = 3; \/\/ Decimal mode$/;"	v	typeref:typename:const u8
BIT_I	src/m6502.h	/^const u8 BIT_I      = 2; \/\/ block IRQ interrupts$/;"	v	typeref:typename:const u8
BIT_N	src/m6502.h	/^const u8 BIT_N      = 7; \/\/ Negative$/;"	v	typeref:typename:const u8
BIT_UNUSED	src/m6502.h	/^const u8 BIT_UNUSED = 5; \/\/$/;"	v	typeref:typename:const u8
BIT_V	src/m6502.h	/^const u8 BIT_V      = 6; \/\/ oVerflow$/;"	v	typeref:typename:const u8
BIT_Z	src/m6502.h	/^const u8 BIT_Z      = 1; \/\/ Zero$/;"	v	typeref:typename:const u8
BRK	src/m6502.h	/^    BRK     = 0x00,$/;"	e	enum:TTInstruction
BackupActiveIdIsAlive	src/imgui/imgui_internal.h	/^    ImGuiID     BackupActiveIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
BackupActiveIdPreviousFrameIsAlive	src/imgui/imgui_internal.h	/^    bool        BackupActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupCurrLineSize	src/imgui/imgui_internal.h	/^    ImVec2      BackupCurrLineSize;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCurrLineTextBaseOffset	src/imgui/imgui_internal.h	/^    float       BackupCurrLineTextBaseOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:float
BackupCursorMaxPos	src/imgui/imgui_internal.h	/^    ImVec2          BackupCursorMaxPos;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorMaxPos	src/imgui/imgui_internal.h	/^    ImVec2      BackupCursorMaxPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPos	src/imgui/imgui_internal.h	/^    ImVec2              BackupCursorPos;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
BackupCursorPos	src/imgui/imgui_internal.h	/^    ImVec2          BackupCursorPos;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorPos	src/imgui/imgui_internal.h	/^    ImVec2      BackupCursorPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPosPrevLine	src/imgui/imgui_internal.h	/^    ImVec2          BackupCursorPosPrevLine;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupFloat	src/imgui/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anon6fa7fe33010a	typeref:typename:float[2]
BackupGroupOffset	src/imgui/imgui_internal.h	/^    ImVec1      BackupGroupOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupHoveredIdIsAlive	src/imgui/imgui_internal.h	/^    bool        BackupHoveredIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupIndent	src/imgui/imgui_internal.h	/^    ImVec1      BackupIndent;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupInt	src/imgui/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anon6fa7fe33010a	typeref:typename:int[2]
BackupLayout	src/imgui/imgui_internal.h	/^    ImGuiLayoutType BackupLayout;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImGuiLayoutType
BackupPrevLineTextBaseOffset	src/imgui/imgui_internal.h	/^    float           BackupPrevLineTextBaseOffset;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:float
BackupValue	src/imgui/imgui_internal.h	/^    ImVec4          BackupValue;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImVec4
BarRect	src/imgui/imgui_internal.h	/^    ImRect              BarRect;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImRect
BasePtr	src/imgui/imgui_internal.h	/^    char*   BasePtr;$/;"	m	struct:ImSpanAllocator	typeref:typename:char *
Begin	src/imgui/imgui.cpp	/^bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Begin	src/imgui/imgui.cpp	/^void ImGuiListClipper::Begin(int items_count, float items_height)$/;"	f	class:ImGuiListClipper	typeref:typename:void
BeginChild	src/imgui/imgui.cpp	/^bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_f/;"	f	class:ImGui	typeref:typename:bool
BeginChild	src/imgui/imgui.cpp	/^bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, bool border, ImGuiWindowFlags/;"	f	class:ImGui	typeref:typename:bool
BeginChildEx	src/imgui/imgui.cpp	/^bool ImGui::BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, bool border, ImGu/;"	f	class:ImGui	typeref:typename:bool
BeginChildFrame	src/imgui/imgui.cpp	/^bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginColumns	src/imgui/imgui_tables.cpp	/^void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiOldColumnFlags flags)$/;"	f	class:ImGui	typeref:typename:void
BeginCombo	src/imgui/imgui_widgets.cpp	/^bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginComboPopup	src/imgui/imgui_widgets.cpp	/^bool ImGui::BeginComboPopup(ImGuiID popup_id, const ImRect& bb, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginComboPreview	src/imgui/imgui_widgets.cpp	/^bool ImGui::BeginComboPreview()$/;"	f	class:ImGui	typeref:typename:bool
BeginCount	src/imgui/imgui_internal.h	/^    ImS8                BeginCount;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS8
BeginCount	src/imgui/imgui_internal.h	/^    short                   BeginCount;                         \/\/ Number of Begin() during th/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginDisabled	src/imgui/imgui.cpp	/^void ImGui::BeginDisabled(bool disabled)$/;"	f	class:ImGui	typeref:typename:void
BeginDragDropSource	src/imgui/imgui.cpp	/^bool ImGui::BeginDragDropSource(ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTarget	src/imgui/imgui.cpp	/^bool ImGui::BeginDragDropTarget()$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTargetCustom	src/imgui/imgui.cpp	/^bool ImGui::BeginDragDropTargetCustom(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
BeginGroup	src/imgui/imgui.cpp	/^void ImGui::BeginGroup()$/;"	f	class:ImGui	typeref:typename:void
BeginListBox	src/imgui/imgui_widgets.cpp	/^bool ImGui::BeginListBox(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
BeginMainMenuBar	src/imgui/imgui_widgets.cpp	/^bool ImGui::BeginMainMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenu	src/imgui/imgui_widgets.cpp	/^bool ImGui::BeginMenu(const char* label, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuBar	src/imgui/imgui_widgets.cpp	/^bool ImGui::BeginMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuCount	src/imgui/imgui_internal.h	/^    int                     BeginMenuCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
BeginMenuEx	src/imgui/imgui_widgets.cpp	/^bool ImGui::BeginMenuEx(const char* label, const char* icon, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginOrder	src/imgui/imgui_internal.h	/^    ImS16               BeginOrder;             \/\/ BeginTabItem() order, used to re-order tabs/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
BeginOrderWithinContext	src/imgui/imgui_internal.h	/^    short                   BeginOrderWithinContext;            \/\/ Begin() order within entire/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginOrderWithinParent	src/imgui/imgui_internal.h	/^    short                   BeginOrderWithinParent;             \/\/ Begin() order within immedi/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginPopup	src/imgui/imgui.cpp	/^bool ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextItem	src/imgui/imgui.cpp	/^bool ImGui::BeginPopupContextItem(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextVoid	src/imgui/imgui.cpp	/^bool ImGui::BeginPopupContextVoid(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextWindow	src/imgui/imgui.cpp	/^bool ImGui::BeginPopupContextWindow(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupEx	src/imgui/imgui.cpp	/^bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupModal	src/imgui/imgui.cpp	/^bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupStack	src/imgui/imgui_internal.h	/^    ImVector<ImGuiPopupData>BeginPopupStack;                    \/\/ Which level of BeginPopup()/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
BeginTabBar	src/imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTabBarEx	src/imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags fl/;"	f	class:ImGui	typeref:typename:bool
BeginTabItem	src/imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTable	src/imgui/imgui_tables.cpp	/^bool    ImGui::BeginTable(const char* str_id, int columns_count, ImGuiTableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
BeginTableEx	src/imgui/imgui_tables.cpp	/^bool    ImGui::BeginTableEx(const char* name, ImGuiID id, int columns_count, ImGuiTableFlags fla/;"	f	class:ImGui	typeref:typename:bool
BeginTooltip	src/imgui/imgui.cpp	/^void ImGui::BeginTooltip()$/;"	f	class:ImGui	typeref:typename:void
BeginTooltipEx	src/imgui/imgui.cpp	/^void ImGui::BeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags)$/;"	f	class:ImGui	typeref:typename:void
BeginViewportSideBar	src/imgui/imgui_widgets.cpp	/^bool ImGui::BeginViewportSideBar(const char* name, ImGuiViewport* viewport_p, ImGuiDir dir, floa/;"	f	class:ImGui	typeref:typename:bool
Bg0ClipRectForDrawCmd	src/imgui/imgui_internal.h	/^    ImRect                      Bg0ClipRectForDrawCmd;      \/\/ Actual ImDrawCmd clip rect for /;"	m	struct:ImGuiTable	typeref:typename:ImRect
Bg2ClipRectForDrawCmd	src/imgui/imgui_internal.h	/^    ImRect                      Bg2ClipRectForDrawCmd;      \/\/ Actual ImDrawCmd clip rect for /;"	m	struct:ImGuiTable	typeref:typename:ImRect
Bg2DrawChannelCurrent	src/imgui/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    Bg2DrawChannelCurrent;      \/\/ For Selectable() and other widg/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
Bg2DrawChannelUnfrozen	src/imgui/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    Bg2DrawChannelUnfrozen;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
BgAlphaVal	src/imgui/imgui_internal.h	/^    float                       BgAlphaVal;             \/\/ Override background alpha$/;"	m	struct:ImGuiNextWindowData	typeref:typename:float
BgClipRect	src/imgui/imgui_internal.h	/^    ImRect                      BgClipRect;                 \/\/ We use this to cpu-clip cell ba/;"	m	struct:ImGuiTable	typeref:typename:ImRect
BgColor	src/imgui/imgui_internal.h	/^    ImU32                       BgColor;    \/\/ Actual color$/;"	m	struct:ImGuiTableCellData	typeref:typename:ImU32
BorderColorLight	src/imgui/imgui_internal.h	/^    ImU32                       BorderColorLight;$/;"	m	struct:ImGuiTable	typeref:typename:ImU32
BorderColorStrong	src/imgui/imgui_internal.h	/^    ImU32                       BorderColorStrong;$/;"	m	struct:ImGuiTable	typeref:typename:ImU32
BorderX1	src/imgui/imgui_internal.h	/^    float                       BorderX1;$/;"	m	struct:ImGuiTable	typeref:typename:float
BorderX2	src/imgui/imgui_internal.h	/^    float                       BorderX2;$/;"	m	struct:ImGuiTable	typeref:typename:float
BringWindowToDisplayBack	src/imgui/imgui.cpp	/^void ImGui::BringWindowToDisplayBack(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayBehind	src/imgui/imgui.cpp	/^void ImGui::BringWindowToDisplayBehind(ImGuiWindow* window, ImGuiWindow* behind_window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayFront	src/imgui/imgui.cpp	/^void ImGui::BringWindowToDisplayFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToFocusFront	src/imgui/imgui.cpp	/^void ImGui::BringWindowToFocusFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
Buf	src/imgui/imgui_demo.cpp	/^    ImGuiTextBuffer     Buf;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextBuffer	file:
Buf	src/imgui/imgui_internal.h	/^    ImVector<T>     Buf;        \/\/ Contiguous data$/;"	m	struct:ImPool	typeref:typename:ImVector<T>
Buf	src/imgui/imgui_internal.h	/^    ImVector<char>  Buf;$/;"	m	struct:ImChunkStream	typeref:typename:ImVector<char>
BufCapacityA	src/imgui/imgui_internal.h	/^    int                     BufCapacityA;           \/\/ end-user buffer capacity$/;"	m	struct:ImGuiInputTextState	typeref:typename:int
Build	src/imgui/imgui.cpp	/^void ImGuiTextFilter::Build()$/;"	f	class:ImGuiTextFilter	typeref:typename:void
Build	src/imgui/imgui_draw.cpp	/^bool    ImFontAtlas::Build()$/;"	f	class:ImFontAtlas	typeref:typename:bool
BuildLookupTable	src/imgui/imgui_draw.cpp	/^void ImFont::BuildLookupTable()$/;"	f	class:ImFont	typeref:typename:void
BuildRanges	src/imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::BuildRanges(ImVector<ImWchar>* out_ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
BuildSortByKey	src/imgui/imgui.cpp	/^void ImGuiStorage::BuildSortByKey()$/;"	f	class:ImGuiStorage	typeref:typename:void
BuildWorkOffsetMax	src/imgui/imgui_internal.h	/^    ImVec2              BuildWorkOffsetMax;     \/\/ Work Area: Offset being built during curren/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
BuildWorkOffsetMin	src/imgui/imgui_internal.h	/^    ImVec2              BuildWorkOffsetMin;     \/\/ Work Area: Offset being built during curren/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
Bullet	src/imgui/imgui_widgets.cpp	/^void ImGui::Bullet()$/;"	f	class:ImGui	typeref:typename:void
BulletText	src/imgui/imgui_widgets.cpp	/^void ImGui::BulletText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
BulletTextV	src/imgui/imgui_widgets.cpp	/^void ImGui::BulletTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
Button	src/imgui/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:int
Button	src/imgui/imgui_widgets.cpp	/^bool ImGui::Button(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
ButtonBehavior	src/imgui/imgui_widgets.cpp	/^bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGu/;"	f	class:ImGui	typeref:typename:bool
ButtonEx	src/imgui/imgui_widgets.cpp	/^bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
COLUMNS_HIT_RECT_HALF_WIDTH	src/imgui/imgui_tables.cpp	/^static const float COLUMNS_HIT_RECT_HALF_WIDTH = 4.0f;$/;"	v	typeref:typename:const float	file:
CT_Button	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Button	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_InputText	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_LongText	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Selectable	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_SelectableSpanRow	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_ShortText	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_ShowWidth	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_SmallButton	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Text	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Text	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CalcCustomRectUV	src/imgui/imgui_draw.cpp	/^void ImFontAtlas::CalcCustomRectUV(const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:void
CalcFontSize	src/imgui/imgui_internal.h	/^    float       CalcFontSize() const    { ImGuiContext& g = *GImGui; float scale = g.FontBaseSiz/;"	f	struct:ImGuiWindow	typeref:typename:float
CalcItemSize	src/imgui/imgui.cpp	/^ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_w, float default_h)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcItemWidth	src/imgui/imgui.cpp	/^float ImGui::CalcItemWidth()$/;"	f	class:ImGui	typeref:typename:float
CalcListClipping	src/imgui/imgui.cpp	/^void ImGui::CalcListClipping(int items_count, float items_height, int* out_items_display_start, /;"	f	class:ImGui	typeref:typename:void
CalcMaxPopupHeightFromItemCount	src/imgui/imgui_widgets.cpp	/^static float CalcMaxPopupHeightFromItemCount(int items_count)$/;"	f	typeref:typename:float	file:
CalcNextScrollFromScrollTargetAndClamp	src/imgui/imgui.cpp	/^static ImVec2 CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window)$/;"	f	typeref:typename:ImVec2	file:
CalcNextTotalWidth	src/imgui/imgui_widgets.cpp	/^void ImGuiMenuColumns::CalcNextTotalWidth(bool update_offsets)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
CalcResizePosSizeFromAnyCorner	src/imgui/imgui.cpp	/^static void CalcResizePosSizeFromAnyCorner(ImGuiWindow* window, const ImVec2& corner_target, con/;"	f	typeref:typename:void	file:
CalcScrollEdgeSnap	src/imgui/imgui.cpp	/^static float CalcScrollEdgeSnap(float target, float snap_min, float snap_max, float snap_thresho/;"	f	typeref:typename:float	file:
CalcTextSize	src/imgui/imgui.cpp	/^ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_h/;"	f	class:ImGui	typeref:typename:ImVec2
CalcTextSizeA	src/imgui/imgui_draw.cpp	/^ImVec2 ImFont::CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_beg/;"	f	class:ImFont	typeref:typename:ImVec2
CalcTypematicRepeatAmount	src/imgui/imgui.cpp	/^int ImGui::CalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
CalcWindowAutoFitSize	src/imgui/imgui.cpp	/^static ImVec2 CalcWindowAutoFitSize(ImGuiWindow* window, const ImVec2& size_contents)$/;"	f	typeref:typename:ImVec2	file:
CalcWindowContentSizes	src/imgui/imgui.cpp	/^static void CalcWindowContentSizes(ImGuiWindow* window, ImVec2* content_size_current, ImVec2* co/;"	f	typeref:typename:void	file:
CalcWindowNextAutoFitSize	src/imgui/imgui.cpp	/^ImVec2 ImGui::CalcWindowNextAutoFitSize(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcWindowSizeAfterConstraint	src/imgui/imgui.cpp	/^static ImVec2 CalcWindowSizeAfterConstraint(ImGuiWindow* window, const ImVec2& size_desired)$/;"	f	typeref:typename:ImVec2	file:
CalcWordWrapPositionA	src/imgui/imgui_draw.cpp	/^const char* ImFont::CalcWordWrapPositionA(float scale, const char* text, const char* text_end, f/;"	f	class:ImFont	typeref:typename:const char *
CalcWorkRectPos	src/imgui/imgui_internal.h	/^    ImVec2  CalcWorkRectPos(const ImVec2& off_min) const                            { return ImV/;"	f	struct:ImGuiViewportP	typeref:typename:ImVec2
CalcWorkRectSize	src/imgui/imgui_internal.h	/^    ImVec2  CalcWorkRectSize(const ImVec2& off_min, const ImVec2& off_max) const    { return ImV/;"	f	struct:ImGuiViewportP	typeref:typename:ImVec2
CalcWrapWidthForPos	src/imgui/imgui.cpp	/^float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:float
CallContextHooks	src/imgui/imgui.cpp	/^void ImGui::CallContextHooks(ImGuiContext* ctx, ImGuiContextHookType hook_type)$/;"	f	class:ImGui	typeref:typename:void
Callback	src/imgui/imgui_internal.h	/^    ImGuiContextHookCallback    Callback;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiContextHookCallback
CannotSkipItemsQueue	src/imgui/imgui_internal.h	/^    ImU8                    CannotSkipItemsQueue;           \/\/ Queue of 8 values for the next /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
CellPaddingX	src/imgui/imgui_internal.h	/^    float                       CellPaddingX;               \/\/ Padding from each borders$/;"	m	struct:ImGuiTable	typeref:typename:float
CellPaddingY	src/imgui/imgui_internal.h	/^    float                       CellPaddingY;$/;"	m	struct:ImGuiTable	typeref:typename:float
CellSpacingX1	src/imgui/imgui_internal.h	/^    float                       CellSpacingX1;              \/\/ Spacing between non-bordered ce/;"	m	struct:ImGuiTable	typeref:typename:float
CellSpacingX2	src/imgui/imgui_internal.h	/^    float                       CellSpacingX2;$/;"	m	struct:ImGuiTable	typeref:typename:float
ChannelsCount	src/imgui/imgui_tables.cpp	/^        int     ChannelsCount;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:int	file:
ChannelsMask	src/imgui/imgui_tables.cpp	/^        ImBitArray<IMGUI_TABLE_MAX_DRAW_CHANNELS> ChannelsMask;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:ImBitArray<IMGUI_TABLE_MAX_DRAW_CHANNELS>	file:
Char	src/imgui/imgui_internal.h	/^struct ImGuiInputEventText          { unsigned int Char; };$/;"	m	struct:ImGuiInputEventText	typeref:typename:unsigned int
CheckProgram	src/imgui/imgui_impl_opengl3.cpp	/^static bool CheckProgram(GLuint handle, const char* desc)$/;"	f	typeref:typename:bool	file:
CheckShader	src/imgui/imgui_impl_opengl3.cpp	/^static bool CheckShader(GLuint handle, const char* desc)$/;"	f	typeref:typename:bool	file:
Checkbox	src/imgui/imgui_widgets.cpp	/^bool ImGui::Checkbox(const char* label, bool* v)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	src/imgui/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, ImS64* flags, ImS64 flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	src/imgui/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, ImU64* flags, ImU64 flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	src/imgui/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, int* flags, int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	src/imgui/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlagsT	src/imgui/imgui_widgets.cpp	/^bool ImGui::CheckboxFlagsT(const char* label, T* flags, T flags_value)$/;"	f	class:ImGui	typeref:typename:bool
ChildCount	src/imgui/imgui_demo.cpp	/^                int             ChildCount;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
ChildId	src/imgui/imgui_internal.h	/^    ImGuiID                 ChildId;                            \/\/ ID of corresponding item in/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ChildIdx	src/imgui/imgui_demo.cpp	/^                int             ChildIdx;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
ChildWindowComparer	src/imgui/imgui.cpp	/^static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ChildWindows	src/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  ChildWindows;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiWindow * >
CircleSegmentCounts	src/imgui/imgui_internal.h	/^    ImU8            CircleSegmentCounts[64];    \/\/ Precomputed segment count for given radius /;"	m	struct:ImDrawListSharedData	typeref:typename:ImU8[64]
CircleSegmentMaxError	src/imgui/imgui_internal.h	/^    float           CircleSegmentMaxError;      \/\/ Number of circle segments to use per pixel /;"	m	struct:ImDrawListSharedData	typeref:typename:float
ClampWindowRect	src/imgui/imgui.cpp	/^static inline void ClampWindowRect(ImGuiWindow* window, const ImRect& visibility_rect)$/;"	f	typeref:typename:void	file:
Clear	src/imgui/imgui_demo.cpp	/^    void    Clear()$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Clear	src/imgui/imgui_draw.cpp	/^void    ImFontAtlas::Clear()$/;"	f	class:ImFontAtlas	typeref:typename:void
Clear	src/imgui/imgui_internal.h	/^    void            Clear()                     { Storage.clear(); }$/;"	f	struct:ImBitVector	typeref:typename:void
Clear	src/imgui/imgui_internal.h	/^    void        Clear()                             { for (int n = 0; n < Map.Data.Size; n++) { /;"	f	struct:ImPool	typeref:typename:void
Clear	src/imgui/imgui_internal.h	/^    void Clear()                    { for (int n = 0; n < IM_ARRAYSIZE(Layers); n++) Layers[n].r/;"	f	struct:ImDrawDataBuilder	typeref:typename:void
Clear	src/imgui/imgui_internal.h	/^    void Clear()        { Window = NULL; ID = FocusScopeId = 0; InFlags = 0; DistBox = DistCente/;"	f	struct:ImGuiNavItemData	typeref:typename:void
ClearActiveID	src/imgui/imgui.cpp	/^void ImGui::ClearActiveID()$/;"	f	class:ImGui	typeref:typename:void
ClearAllBits	src/imgui/imgui_internal.h	/^    void            ClearAllBits()              { memset(Storage, 0, sizeof(Storage)); }$/;"	f	struct:ImBitArray	typeref:typename:void
ClearAllFn	src/imgui/imgui_internal.h	/^    void        (*ClearAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ClearBit	src/imgui/imgui_internal.h	/^    void            ClearBit(int n)             { IM_ASSERT(n < (Storage.Size << 5)); ImBitArray/;"	f	struct:ImBitVector	typeref:typename:void
ClearBit	src/imgui/imgui_internal.h	/^    void            ClearBit(int n)             { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:void
ClearDragDrop	src/imgui/imgui.cpp	/^void ImGui::ClearDragDrop()$/;"	f	class:ImGui	typeref:typename:void
ClearFlags	src/imgui/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextItemDataFlags_None; } \/\/ Also cleared manua/;"	f	struct:ImGuiNextItemData	typeref:typename:void
ClearFlags	src/imgui/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextWindowDataFlags_None; }$/;"	f	struct:ImGuiNextWindowData	typeref:typename:void
ClearFonts	src/imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearFonts()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearFreeMemory	src/imgui/imgui_draw.cpp	/^void ImDrawListSplitter::ClearFreeMemory()$/;"	f	class:ImDrawListSplitter	typeref:typename:void
ClearFreeMemory	src/imgui/imgui_internal.h	/^    void        ClearFreeMemory()           { TextW.clear(); TextA.clear(); InitialTextA.clear()/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearFreeMemory	src/imgui/imgui_internal.h	/^    void ClearFreeMemory()          { for (int n = 0; n < IM_ARRAYSIZE(Layers); n++) Layers[n].c/;"	f	struct:ImDrawDataBuilder	typeref:typename:void
ClearIniSettings	src/imgui/imgui.cpp	/^void ImGui::ClearIniSettings()$/;"	f	class:ImGui	typeref:typename:void
ClearInputCharacters	src/imgui/imgui.cpp	/^void ImGuiIO::ClearInputCharacters()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearInputData	src/imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearInputData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearInputKeys	src/imgui/imgui.cpp	/^void ImGuiIO::ClearInputKeys()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearLog	src/imgui/imgui_demo.cpp	/^    void    ClearLog()$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
ClearOutputData	src/imgui/imgui_draw.cpp	/^void    ImFont::ClearOutputData()$/;"	f	class:ImFont	typeref:typename:void
ClearSelection	src/imgui/imgui_internal.h	/^    void        ClearSelection()            { Stb.select_start = Stb.select_end = Stb.cursor; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearTexData	src/imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearTexData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearText	src/imgui/imgui_internal.h	/^    void        ClearText()                 { CurLenW = CurLenA = 0; TextW[0] = 0; TextA[0] = 0;/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClientApi	src/imgui/imgui_impl_glfw.cpp	/^    GlfwClientApi           ClientApi;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GlfwClientApi	file:
ClipRect	src/imgui/imgui_internal.h	/^    ImRect                  ClipRect;                           \/\/ Current clipping\/scissorin/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ClipRect	src/imgui/imgui_internal.h	/^    ImRect                  ClipRect;                       \/\/ Clipping rectangle for the colu/;"	m	struct:ImGuiTableColumn	typeref:typename:ImRect
ClipRect	src/imgui/imgui_internal.h	/^    ImRect              ClipRect;$/;"	m	struct:ImGuiOldColumnData	typeref:typename:ImRect
ClipRect	src/imgui/imgui_tables.cpp	/^        ImRect  ClipRect;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:ImRect	file:
ClipRectFullscreen	src/imgui/imgui_internal.h	/^    ImVec4          ClipRectFullscreen;         \/\/ Value for PushClipRectFullscreen()$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec4
ClipWith	src/imgui/imgui_internal.h	/^    void        ClipWith(const ImRect& r)           { Min = ImMax(Min, r.Min); Max = ImMin(Max, /;"	f	struct:ImRect	typeref:typename:void
ClipWithFull	src/imgui/imgui_internal.h	/^    void        ClipWithFull(const ImRect& r)       { Min = ImClamp(Min, r.Min, r.Max); Max = Im/;"	f	struct:ImRect	typeref:typename:void
ClipboardHandlerData	src/imgui/imgui_internal.h	/^    ImVector<char>          ClipboardHandlerData;               \/\/ If no custom clipboard hand/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
ClipperTempData	src/imgui/imgui_internal.h	/^    ImVector<ImGuiListClipperData>  ClipperTempData;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiListClipperData>
ClipperTempDataStacked	src/imgui/imgui_internal.h	/^    int                             ClipperTempDataStacked;$/;"	m	struct:ImGuiContext	typeref:typename:int
CloneOutput	src/imgui/imgui_draw.cpp	/^ImDrawList* ImDrawList::CloneOutput() const$/;"	f	class:ImDrawList	typeref:typename:ImDrawList *
CloseButton	src/imgui/imgui_widgets.cpp	/^bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:bool
CloseCurrentPopup	src/imgui/imgui.cpp	/^void ImGui::CloseCurrentPopup()$/;"	f	class:ImGui	typeref:typename:void
ClosePopupToLevel	src/imgui/imgui.cpp	/^void ImGui::ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsExceptModals	src/imgui/imgui.cpp	/^void ImGui::ClosePopupsExceptModals()$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsOverWindow	src/imgui/imgui.cpp	/^void ImGui::ClosePopupsOverWindow(ImGuiWindow* ref_window, bool restore_focus_to_window_under_po/;"	f	class:ImGui	typeref:typename:void
Col	src/imgui/imgui_demo.cpp	/^                struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ShowDemoWindowMisc::KeyLayoutData	typeref:typename:int	file:
Col	src/imgui/imgui_internal.h	/^    ImGuiCol        Col;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImGuiCol
CollapseButton	src/imgui/imgui_widgets.cpp	/^bool ImGui::CollapseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:bool
Collapsed	src/imgui/imgui_internal.h	/^    bool                    Collapsed;                          \/\/ Set when collapsing window /;"	m	struct:ImGuiWindow	typeref:typename:bool
Collapsed	src/imgui/imgui_internal.h	/^    bool        Collapsed;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
CollapsedCond	src/imgui/imgui_internal.h	/^    ImGuiCond                   CollapsedCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
CollapsedVal	src/imgui/imgui_internal.h	/^    bool                        CollapsedVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:bool
CollapsingHeader	src/imgui/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
CollapsingHeader	src/imgui/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Color	src/imgui/imgui_demo.cpp	/^    ImVec4      Color;      \/\/ An arbitrary variable associated to the document$/;"	m	struct:MyDocument	typeref:typename:ImVec4	file:
ColorButton	src/imgui/imgui_widgets.cpp	/^bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, const/;"	f	class:ImGui	typeref:typename:bool
ColorConvertFloat4ToU32	src/imgui/imgui.cpp	/^ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)$/;"	f	class:ImGui	typeref:typename:ImU32
ColorConvertHSVtoRGB	src/imgui/imgui.cpp	/^void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertRGBtoHSV	src/imgui/imgui.cpp	/^void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertU32ToFloat4	src/imgui/imgui.cpp	/^ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)$/;"	f	class:ImGui	typeref:typename:ImVec4
ColorEdit3	src/imgui/imgui_widgets.cpp	/^bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEdit4	src/imgui/imgui_widgets.cpp	/^bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEditLastColor	src/imgui/imgui_internal.h	/^    ImU32                   ColorEditLastColor;                 \/\/ RGB value with alpha set to/;"	m	struct:ImGuiContext	typeref:typename:ImU32
ColorEditLastHue	src/imgui/imgui_internal.h	/^    float                   ColorEditLastHue;                   \/\/ Backup of last Hue associat/;"	m	struct:ImGuiContext	typeref:typename:float
ColorEditLastSat	src/imgui/imgui_internal.h	/^    float                   ColorEditLastSat;                   \/\/ Backup of last Saturation a/;"	m	struct:ImGuiContext	typeref:typename:float
ColorEditOptions	src/imgui/imgui_internal.h	/^    ImGuiColorEditFlags     ColorEditOptions;                   \/\/ Store user options for colo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiColorEditFlags
ColorEditOptionsPopup	src/imgui/imgui_widgets.cpp	/^void ImGui::ColorEditOptionsPopup(const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorEditRestoreHS	src/imgui/imgui_widgets.cpp	/^static void ColorEditRestoreHS(const float* col, float* H, float* S, float* V)$/;"	f	typeref:typename:void	file:
ColorPicker3	src/imgui/imgui_widgets.cpp	/^bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorPicker4	src/imgui/imgui_widgets.cpp	/^bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float/;"	f	class:ImGui	typeref:typename:bool
ColorPickerOptionsPopup	src/imgui/imgui_widgets.cpp	/^void ImGui::ColorPickerOptionsPopup(const float* ref_col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorPickerRef	src/imgui/imgui_internal.h	/^    ImVec4                  ColorPickerRef;                     \/\/ Initial\/reference color at/;"	m	struct:ImGuiContext	typeref:typename:ImVec4
ColorStack	src/imgui/imgui_internal.h	/^    ImVector<ImGuiColorMod> ColorStack;                         \/\/ Stack for PushStyleColor()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiColorMod>
ColorTooltip	src/imgui/imgui_widgets.cpp	/^void ImGui::ColorTooltip(const char* text, const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
Column	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         Column;     \/\/ Column number$/;"	m	struct:ImGuiTableCellData	typeref:typename:ImGuiTableColumnIdx
Columns	src/imgui/imgui_internal.h	/^    ImSpan<ImGuiTableColumn>    Columns;                    \/\/ Point within RawData[]$/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableColumn>
Columns	src/imgui/imgui_internal.h	/^    ImVector<ImGuiOldColumnData> Columns;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImVector<ImGuiOldColumnData>
Columns	src/imgui/imgui_tables.cpp	/^void ImGui::Columns(int columns_count, const char* id, bool border)$/;"	f	class:ImGui	typeref:typename:void
ColumnsAutoFitWidth	src/imgui/imgui_internal.h	/^    float                       ColumnsAutoFitWidth;        \/\/ Sum of ideal column width in or/;"	m	struct:ImGuiTable	typeref:typename:float
ColumnsCount	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsCount;$/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnIdx
ColumnsCount	src/imgui/imgui_internal.h	/^    int                         ColumnsCount;               \/\/ Number of columns declared in B/;"	m	struct:ImGuiTable	typeref:typename:int
ColumnsCountMax	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsCountMax;        \/\/ Maximum number of columns this sett/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnIdx
ColumnsEnabledCount	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsEnabledCount;        \/\/ Number of enabled columns (<= C/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ColumnsEnabledFixedCount	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsEnabledFixedCount;   \/\/ Number of enabled columns (<= C/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ColumnsGivenWidth	src/imgui/imgui_internal.h	/^    float                       ColumnsGivenWidth;          \/\/ Sum of current column width$/;"	m	struct:ImGuiTable	typeref:typename:float
ColumnsNames	src/imgui/imgui_internal.h	/^    ImGuiTextBuffer             ColumnsNames;               \/\/ Contiguous buffer holding colum/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTextBuffer
ColumnsOffset	src/imgui/imgui_internal.h	/^    ImVec1                  ColumnsOffset;          \/\/ Offset to the current column (if Column/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
ColumnsStorage	src/imgui/imgui_internal.h	/^    ImVector<ImGuiOldColumns> ColumnsStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiOldColumns>
ColumnsStretchSumWeights	src/imgui/imgui_internal.h	/^    float                       ColumnsStretchSumWeights;   \/\/ Sum of weight of all enabled st/;"	m	struct:ImGuiTable	typeref:typename:float
Combo	src/imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, bool (*items_getter)(void*, int, const c/;"	f	class:ImGui	typeref:typename:bool
Combo	src/imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_cou/;"	f	class:ImGui	typeref:typename:bool
Combo	src/imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, in/;"	f	class:ImGui	typeref:typename:bool
ComboPreviewData	src/imgui/imgui_internal.h	/^    ImGuiComboPreviewData   ComboPreviewData;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiComboPreviewData
Commands	src/imgui/imgui_demo.cpp	/^    ImVector<const char*> Commands;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<const char * >	file:
CompareWithCurrentState	src/imgui/imgui.cpp	/^void ImGuiStackSizes::CompareWithCurrentState()$/;"	f	class:ImGuiStackSizes	typeref:typename:void
CompareWithSortSpecs	src/imgui/imgui_demo.cpp	/^    static int IMGUI_CDECL CompareWithSortSpecs(const void* lhs, const void* rhs)$/;"	f	struct:__anonecc473760111::MyItem	typeref:typename:int IMGUI_CDECL	file:
Contains	src/imgui/imgui_internal.h	/^    bool        Contains(const ImRect& r) const     { return r.Min.x >= Min.x && r.Min.y >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	src/imgui/imgui_internal.h	/^    bool        Contains(const ImVec2& p) const     { return p.x     >= Min.x && p.y     >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	src/imgui/imgui_internal.h	/^    bool        Contains(const T* p) const          { return (p >= Buf.Data && p < Buf.Data + Bu/;"	f	struct:ImPool	typeref:typename:bool
ContentMaxXFrozen	src/imgui/imgui_internal.h	/^    float                   ContentMaxXFrozen;              \/\/ Contents maximum position for f/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXHeadersIdeal	src/imgui/imgui_internal.h	/^    float                   ContentMaxXHeadersIdeal;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXHeadersUsed	src/imgui/imgui_internal.h	/^    float                   ContentMaxXHeadersUsed;         \/\/ Contents maximum position for h/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXUnfrozen	src/imgui/imgui_internal.h	/^    float                   ContentMaxXUnfrozen;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentRegionRect	src/imgui/imgui_internal.h	/^    ImRect                  ContentRegionRect;                  \/\/ FIXME: This is currently co/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ContentSize	src/imgui/imgui_internal.h	/^    ImVec2                  ContentSize;                        \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeExplicit	src/imgui/imgui_internal.h	/^    ImVec2                  ContentSizeExplicit;                \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeIdeal	src/imgui/imgui_internal.h	/^    ImVec2                  ContentSizeIdeal;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeVal	src/imgui/imgui_internal.h	/^    ImVec2                      ContentSizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ContentWidth	src/imgui/imgui_internal.h	/^    float               ContentWidth;           \/\/ Width of label, stored during BeginTabItem(/;"	m	struct:ImGuiTabItem	typeref:typename:float
ContentsType	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	g	function:ShowDemoWindowTables	file:
ContentsType	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	g	function:ShowDemoWindowTables	file:
ContentsType	src/imgui/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	g	function:ShowDemoWindowTables	file:
ContextPopupColumn	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ContextPopupColumn;         \/\/ Column right-clicked on, of -1 /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
CopyToClipboardLastTime	src/imgui/imgui_internal.h	/^    float                   CopyToClipboardLastTime;$/;"	m	struct:ImGuiStackTool	typeref:typename:float
CopyToClipboardOnCtrlC	src/imgui/imgui_internal.h	/^    bool                    CopyToClipboardOnCtrlC;$/;"	m	struct:ImGuiStackTool	typeref:typename:bool
CornerPosN	src/imgui/imgui.cpp	/^    ImVec2  CornerPosN;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
Count	src/imgui/imgui.cpp	/^    ImU32           Count;$/;"	m	struct:ImGuiStyleVarInfo	typeref:typename:ImU32	file:
Count	src/imgui/imgui_internal.h	/^    int                 Count;$/;"	m	struct:ImGuiOldColumns	typeref:typename:int
Cpu	src/m6502.cpp	/^Cpu::Cpu(Memory &mem) : mem(mem) {$/;"	f	class:Cpu
Cpu	src/m6502.h	/^struct Cpu $/;"	s
Create	src/imgui/imgui_internal.h	/^    void            Create(int sz)              { Storage.resize((sz + 31) >> 5); memset(Storage/;"	f	struct:ImBitVector	typeref:typename:void
CreateContext	src/imgui/imgui.cpp	/^ImGuiContext* ImGui::CreateContext(ImFontAtlas* shared_font_atlas)$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
CreateNewWindow	src/imgui/imgui.cpp	/^static ImGuiWindow* CreateNewWindow(const char* name, ImGuiWindowFlags flags)$/;"	f	typeref:typename:ImGuiWindow *	file:
CreateNewWindowSettings	src/imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::CreateNewWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
CurLenA	src/imgui/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurLenW	src/imgui/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurrFrameVisible	src/imgui/imgui_internal.h	/^    int                 CurrFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
CurrIdx	src/imgui/imgui_internal.h	/^    int     CurrIdx;$/;"	m	struct:ImSpanAllocator	typeref:typename:int
CurrLineSize	src/imgui/imgui_internal.h	/^    ImVec2                  CurrLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurrLineTextBaseOffset	src/imgui/imgui_internal.h	/^    float                   CurrLineTextBaseOffset; \/\/ Baseline offset (0.0f by default on a n/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
CurrOff	src/imgui/imgui_internal.h	/^    int     CurrOff;$/;"	m	struct:ImSpanAllocator	typeref:typename:int
CurrTabsContentsHeight	src/imgui/imgui_internal.h	/^    float               CurrTabsContentsHeight;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
Current	src/imgui/imgui_internal.h	/^    int                 Current;$/;"	m	struct:ImGuiOldColumns	typeref:typename:int
CurrentColumn	src/imgui/imgui_internal.h	/^    int                         CurrentColumn;$/;"	m	struct:ImGuiTable	typeref:typename:int
CurrentColumns	src/imgui/imgui_internal.h	/^    ImGuiOldColumns*        CurrentColumns;         \/\/ Current columns set$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiOldColumns *
CurrentItemFlags	src/imgui/imgui_internal.h	/^    ImGuiItemFlags          CurrentItemFlags;                      \/\/ == g.ItemFlagsStack.back/;"	m	struct:ImGuiContext	typeref:typename:ImGuiItemFlags
CurrentRow	src/imgui/imgui_internal.h	/^    int                         CurrentRow;$/;"	m	struct:ImGuiTable	typeref:typename:int
CurrentTabBar	src/imgui/imgui_internal.h	/^    ImGuiTabBar*                    CurrentTabBar;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTabBar *
CurrentTabBarStack	src/imgui/imgui_internal.h	/^    ImVector<ImGuiPtrOrIndex>       CurrentTabBarStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPtrOrIndex>
CurrentTable	src/imgui/imgui_internal.h	/^    ImGuiTable*                     CurrentTable;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTable *
CurrentTableIdx	src/imgui/imgui_internal.h	/^    int                     CurrentTableIdx;        \/\/ Current table index (into g.Tables)$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
CurrentWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*            CurrentWindow;                      \/\/ Window being drawn into$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
CurrentWindowStack	src/imgui/imgui_internal.h	/^    ImVector<ImGuiWindowStackData> CurrentWindowStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindowStackData>
CursorAnim	src/imgui/imgui_internal.h	/^    float                   CursorAnim;             \/\/ timer for cursor blink, reset on every /;"	m	struct:ImGuiInputTextState	typeref:typename:float
CursorAnimReset	src/imgui/imgui_internal.h	/^    void        CursorAnimReset()           { CursorAnim = -0.30f; }                            /;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorClamp	src/imgui/imgui_internal.h	/^    void        CursorClamp()               { Stb.cursor = ImMin(Stb.cursor, CurLenW); Stb.selec/;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorFollow	src/imgui/imgui_internal.h	/^    bool                    CursorFollow;           \/\/ set when we want scrolling to follow th/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
CursorMaxPos	src/imgui/imgui_internal.h	/^    ImVec2                  CursorMaxPos;           \/\/ Used to implicitly calculate ContentSiz/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPos	src/imgui/imgui_internal.h	/^    ImVec2                  CursorPos;              \/\/ Current emitting position, in absolute /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPosPrevLine	src/imgui/imgui_internal.h	/^    ImVec2                  CursorPosPrevLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPos	src/imgui/imgui_internal.h	/^    ImVec2                  CursorStartPos;         \/\/ Initial position after Begin(), general/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPosLossyness	src/imgui/imgui_internal.h	/^    ImVec2                  CursorStartPosLossyness;\/\/ Record the loss of precision of CursorS/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurveTessellationTol	src/imgui/imgui_internal.h	/^    float           CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezie/;"	m	struct:ImDrawListSharedData	typeref:typename:float
CustomConstraints	src/imgui/imgui_demo.cpp	/^    struct CustomConstraints$/;"	s	function:ShowExampleAppConstrainedResize	file:
DC	src/imgui/imgui_internal.h	/^    ImGuiWindowTempData     DC;                                 \/\/ Temporary per-window data, /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowTempData
DISPLAY_H	src/display.h	/^#define DISPLAY_H$/;"	d
DRAGDROP_HOLD_TO_OPEN_TIMER	src/imgui/imgui_widgets.cpp	/^static const float          DRAGDROP_HOLD_TO_OPEN_TIMER = 0.70f;    \/\/ Time for drag-hold to a/;"	v	typeref:typename:const float	file:
DRAG_MOUSE_THRESHOLD_FACTOR	src/imgui/imgui_widgets.cpp	/^static const float          DRAG_MOUSE_THRESHOLD_FACTOR = 0.50f;    \/\/ Multiplier for the defa/;"	v	typeref:typename:const float	file:
Data	src/imgui/imgui_internal.h	/^    ImU8        Data[8];        \/\/ Can fit any data up to ImGuiDataType_COUNT$/;"	m	struct:ImGuiDataTypeTempStorage	typeref:typename:ImU8[8]
Data	src/imgui/imgui_internal.h	/^    T*                  Data;$/;"	m	struct:ImSpan	typeref:typename:T *
DataEnd	src/imgui/imgui_internal.h	/^    T*                  DataEnd;$/;"	m	struct:ImSpan	typeref:typename:T *
DataType	src/imgui/imgui_internal.h	/^    ImGuiDataType           DataType : 8;$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImGuiDataType:8
DataTypeApplyFromText	src/imgui/imgui_widgets.cpp	/^bool ImGui::DataTypeApplyFromText(const char* buf, ImGuiDataType data_type, void* p_data, const /;"	f	class:ImGui	typeref:typename:bool
DataTypeApplyOp	src/imgui/imgui_widgets.cpp	/^void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, const void* arg1, con/;"	f	class:ImGui	typeref:typename:void
DataTypeClamp	src/imgui/imgui_widgets.cpp	/^bool ImGui::DataTypeClamp(ImGuiDataType data_type, void* p_data, const void* p_min, const void* /;"	f	class:ImGui	typeref:typename:bool
DataTypeClampT	src/imgui/imgui_widgets.cpp	/^static bool DataTypeClampT(T* v, const T* v_min, const T* v_max)$/;"	f	typeref:typename:bool	file:
DataTypeCompare	src/imgui/imgui_widgets.cpp	/^int ImGui::DataTypeCompare(ImGuiDataType data_type, const void* arg_1, const void* arg_2)$/;"	f	class:ImGui	typeref:typename:int
DataTypeCompareT	src/imgui/imgui_widgets.cpp	/^static int DataTypeCompareT(const T* lhs, const T* rhs)$/;"	f	typeref:typename:int	file:
DataTypeFormatString	src/imgui/imgui_widgets.cpp	/^int ImGui::DataTypeFormatString(char* buf, int buf_size, ImGuiDataType data_type, const void* p_/;"	f	class:ImGui	typeref:typename:int
DataTypeGetInfo	src/imgui/imgui_widgets.cpp	/^const ImGuiDataTypeInfo* ImGui::DataTypeGetInfo(ImGuiDataType data_type)$/;"	f	class:ImGui	typeref:typename:const ImGuiDataTypeInfo *
DeIndexAllBuffers	src/imgui/imgui_draw.cpp	/^void ImDrawData::DeIndexAllBuffers()$/;"	f	class:ImDrawData	typeref:typename:void
DebugCheckVersionAndDataLayout	src/imgui/imgui.cpp	/^bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, s/;"	f	class:ImGui	typeref:typename:bool
DebugDrawItemRect	src/imgui/imgui_internal.h	/^    inline void             DebugDrawItemRect(ImU32 col = IM_COL32(255,0,0,255))    { ImGuiConte/;"	f	namespace:ImGui	typeref:typename:void
DebugHookIdInfo	src/imgui/imgui.cpp	/^void ImGui::DebugHookIdInfo(ImGuiID id, ImGuiDataType data_type, const void* data_id, const void/;"	f	class:ImGui	typeref:typename:void
DebugHookIdInfo	src/imgui/imgui.cpp	/^void ImGui::DebugHookIdInfo(ImGuiID, ImGuiDataType, const void*, const void*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugHookIdInfo	src/imgui/imgui_internal.h	/^    ImGuiID                 DebugHookIdInfo;                    \/\/ Will call core hooks: Debug/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugItemPickerActive	src/imgui/imgui_internal.h	/^    bool                    DebugItemPickerActive;              \/\/ Item picker is active (star/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugItemPickerBreakId	src/imgui/imgui_internal.h	/^    ImGuiID                 DebugItemPickerBreakId;             \/\/ Will call IM_DEBUG_BREAK() /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugLog	src/imgui/imgui.cpp	/^void ImGui::DebugLog(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
DebugLog	src/imgui/imgui.cpp	/^void ImGui::DebugLog(const char*, ...) {}$/;"	f	class:ImGui	typeref:typename:void
DebugLogBuf	src/imgui/imgui_internal.h	/^    ImGuiTextBuffer         DebugLogBuf;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
DebugLogFlags	src/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags      DebugLogFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDebugLogFlags
DebugLogV	src/imgui/imgui.cpp	/^void ImGui::DebugLogV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
DebugLogV	src/imgui/imgui.cpp	/^void ImGui::DebugLogV(const char*, va_list) {}$/;"	f	class:ImGui	typeref:typename:void
DebugMetricsConfig	src/imgui/imgui_internal.h	/^    ImGuiMetricsConfig      DebugMetricsConfig;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMetricsConfig
DebugNodeColumns	src/imgui/imgui.cpp	/^void ImGui::DebugNodeColumns(ImGuiOldColumns* columns)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeColumns	src/imgui/imgui.cpp	/^void ImGui::DebugNodeColumns(ImGuiOldColumns*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawCmdShowMeshAndBoundingBox	src/imgui/imgui.cpp	/^void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList* out_draw_list, const ImDrawList* /;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawCmdShowMeshAndBoundingBox	src/imgui/imgui.cpp	/^void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList*, const ImDrawList*, const ImDrawC/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawList	src/imgui/imgui.cpp	/^void ImGui::DebugNodeDrawList(ImGuiWindow* window, const ImDrawList* draw_list, const char* labe/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawList	src/imgui/imgui.cpp	/^void ImGui::DebugNodeDrawList(ImGuiWindow*, const ImDrawList*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFont	src/imgui/imgui.cpp	/^void ImGui::DebugNodeFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFont	src/imgui/imgui.cpp	/^void ImGui::DebugNodeFont(ImFont*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFontGlyph	src/imgui/imgui.cpp	/^void ImGui::DebugNodeFontGlyph(ImFont*, const ImFontGlyph* glyph)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeInputTextState	src/imgui/imgui_widgets.cpp	/^void ImGui::DebugNodeInputTextState(ImGuiInputTextState* state)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeStorage	src/imgui/imgui.cpp	/^void ImGui::DebugNodeStorage(ImGuiStorage* storage, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeStorage	src/imgui/imgui.cpp	/^void ImGui::DebugNodeStorage(ImGuiStorage*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTabBar	src/imgui/imgui.cpp	/^void ImGui::DebugNodeTabBar(ImGuiTabBar* tab_bar, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTabBar	src/imgui/imgui.cpp	/^void ImGui::DebugNodeTabBar(ImGuiTabBar*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTable	src/imgui/imgui_tables.cpp	/^void ImGui::DebugNodeTable(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTable	src/imgui/imgui_tables.cpp	/^void ImGui::DebugNodeTable(ImGuiTable*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTableGetSizingPolicyDesc	src/imgui/imgui_tables.cpp	/^static const char* DebugNodeTableGetSizingPolicyDesc(ImGuiTableFlags sizing_policy)$/;"	f	typeref:typename:const char *	file:
DebugNodeTableSettings	src/imgui/imgui_tables.cpp	/^void ImGui::DebugNodeTableSettings(ImGuiTableSettings* settings)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTableSettings	src/imgui/imgui_tables.cpp	/^void ImGui::DebugNodeTableSettings(ImGuiTableSettings*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeViewport	src/imgui/imgui.cpp	/^void ImGui::DebugNodeViewport(ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeViewport	src/imgui/imgui.cpp	/^void ImGui::DebugNodeViewport(ImGuiViewportP*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindow	src/imgui/imgui.cpp	/^void ImGui::DebugNodeWindow(ImGuiWindow* window, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindow	src/imgui/imgui.cpp	/^void ImGui::DebugNodeWindow(ImGuiWindow*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowSettings	src/imgui/imgui.cpp	/^void ImGui::DebugNodeWindowSettings(ImGuiWindowSettings* settings)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowSettings	src/imgui/imgui.cpp	/^void ImGui::DebugNodeWindowSettings(ImGuiWindowSettings*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsList	src/imgui/imgui.cpp	/^void ImGui::DebugNodeWindowsList(ImVector<ImGuiWindow*>* windows, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsList	src/imgui/imgui.cpp	/^void ImGui::DebugNodeWindowsList(ImVector<ImGuiWindow*>*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsListByBeginStackParent	src/imgui/imgui.cpp	/^void ImGui::DebugNodeWindowsListByBeginStackParent(ImGuiWindow** windows, int windows_size, ImGu/;"	f	class:ImGui	typeref:typename:void
DebugRenderViewportThumbnail	src/imgui/imgui.cpp	/^void ImGui::DebugRenderViewportThumbnail(ImDrawList* draw_list, ImGuiViewportP* viewport, const /;"	f	class:ImGui	typeref:typename:void
DebugStackTool	src/imgui/imgui_internal.h	/^    ImGuiStackTool          DebugStackTool;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStackTool
DebugStartItemPicker	src/imgui/imgui_internal.h	/^    inline void             DebugStartItemPicker()                                  { ImGuiConte/;"	f	namespace:ImGui	typeref:typename:void
DebugTextEncoding	src/imgui/imgui.cpp	/^void ImGui::DebugTextEncoding(const char* str)$/;"	f	class:ImGui	typeref:typename:void
DeclColumns	src/imgui/imgui_widgets.cpp	/^float ImGuiMenuColumns::DeclColumns(float w_icon, float w_label, float w_shortcut, float w_mark)$/;"	f	class:ImGuiMenuColumns	typeref:typename:float
DeclColumnsCount	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         DeclColumnsCount;           \/\/ Count calls to TableSetupColumn/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
Decode85	src/imgui/imgui_draw.cpp	/^static void         Decode85(const unsigned char* src, unsigned char* dst)$/;"	f	typeref:typename:void	file:
Decode85Byte	src/imgui/imgui_draw.cpp	/^static unsigned int Decode85Byte(char c)                                    { return c >= '\\\\'/;"	f	typeref:typename:unsigned int	file:
DeleteChars	src/imgui/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::DeleteChars(int pos, int bytes_count)$/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
Desc	src/imgui/imgui_internal.h	/^    char                    Desc[57];                   \/\/ Arbitrarily sized buffer to hold a /;"	m	struct:ImGuiStackLevelInfo	typeref:typename:char[57]
DestroyContext	src/imgui/imgui.cpp	/^void ImGui::DestroyContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
DimBgRatio	src/imgui/imgui_internal.h	/^    float                   DimBgRatio;                         \/\/ 0.0..1.0 animation when fad/;"	m	struct:ImGuiContext	typeref:typename:float
Dirty	src/imgui/imgui_demo.cpp	/^    bool        Dirty;      \/\/ Set when the document has been modified$/;"	m	struct:MyDocument	typeref:typename:bool	file:
DisableInputsFrames	src/imgui/imgui_internal.h	/^    ImS8                    DisableInputsFrames;                \/\/ Disable window interactions/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
DisabledAlphaBackup	src/imgui/imgui_internal.h	/^    float                   DisabledAlphaBackup;                \/\/ Backup for style.Alpha for /;"	m	struct:ImGuiContext	typeref:typename:float
DisabledStackSize	src/imgui/imgui_internal.h	/^    short                   DisabledStackSize;$/;"	m	struct:ImGuiContext	typeref:typename:short
Display	src/display.h	/^    Display(const Memory &mem) : mem(mem) $/;"	f	class:Display
Display	src/display.h	/^class Display $/;"	c
DisplayContents	src/imgui/imgui_demo.cpp	/^    static void DisplayContents(MyDocument* doc)$/;"	f	struct:MyDocument	typeref:typename:void	file:
DisplayContextMenu	src/imgui/imgui_demo.cpp	/^    static void DisplayContextMenu(MyDocument* doc)$/;"	f	struct:MyDocument	typeref:typename:void	file:
DisplayNode	src/imgui/imgui_demo.cpp	/^                static void DisplayNode(const MyTreeNode* node, const MyTreeNode* all_nodes)$/;"	f	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:void	file:
DisplayOrder	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     DisplayOrder;                   \/\/ Index within Table's IndexToDis/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
DisplayOrder	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     DisplayOrder;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
DisplayOrderToIndex	src/imgui/imgui_internal.h	/^    ImSpan<ImGuiTableColumnIdx> DisplayOrderToIndex;        \/\/ Point within RawData[]. Store d/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableColumnIdx>
DisplayRect	src/imgui/imgui_internal.h	/^    ImRect                  DisplayRect;        \/\/ Display rectangle (only if ImGuiItemStatusF/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
DistAxial	src/imgui/imgui_internal.h	/^    float               DistAxial;      \/\/      Move    \/\/ Best candidate axial distance to /;"	m	struct:ImGuiNavItemData	typeref:typename:float
DistBox	src/imgui/imgui_internal.h	/^    float               DistBox;        \/\/      Move    \/\/ Best candidate box distance to cu/;"	m	struct:ImGuiNavItemData	typeref:typename:float
DistCenter	src/imgui/imgui_internal.h	/^    float               DistCenter;     \/\/      Move    \/\/ Best candidate center distance to/;"	m	struct:ImGuiNavItemData	typeref:typename:float
DoForceClose	src/imgui/imgui_demo.cpp	/^    void DoForceClose() { Open = false; Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoOpen	src/imgui/imgui_demo.cpp	/^    void DoOpen()       { Open = true; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoQueueClose	src/imgui/imgui_demo.cpp	/^    void DoQueueClose() { WantClose = true; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoSave	src/imgui/imgui_demo.cpp	/^    void DoSave()       { Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
Documents	src/imgui/imgui_demo.cpp	/^    ImVector<MyDocument> Documents;$/;"	m	struct:ExampleAppDocuments	typeref:typename:ImVector<MyDocument>	file:
Down	src/imgui/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:bool
Down	src/imgui/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:bool
DragBehavior	src/imgui/imgui_widgets.cpp	/^bool ImGui::DragBehavior(ImGuiID id, ImGuiDataType data_type, void* p_v, float v_speed, const vo/;"	f	class:ImGui	typeref:typename:bool
DragBehaviorT	src/imgui/imgui_widgets.cpp	/^bool ImGui::DragBehaviorT(ImGuiDataType data_type, TYPE* v, float v_speed, const TYPE v_min, con/;"	f	class:ImGui	typeref:typename:bool
DragCurrentAccum	src/imgui/imgui_internal.h	/^    float                   DragCurrentAccum;                   \/\/ Accumulator for dragging mo/;"	m	struct:ImGuiContext	typeref:typename:float
DragCurrentAccumDirty	src/imgui/imgui_internal.h	/^    bool                    DragCurrentAccumDirty;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropAcceptFlags	src/imgui/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropAcceptFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropAcceptFrameCount	src/imgui/imgui_internal.h	/^    int                     DragDropAcceptFrameCount;           \/\/ Last time a target expresse/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropAcceptIdCurr	src/imgui/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdCurr;               \/\/ Target item id (set at the /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropAcceptIdCurrRectSurface	src/imgui/imgui_internal.h	/^    float                   DragDropAcceptIdCurrRectSurface;    \/\/ Target item surface (we res/;"	m	struct:ImGuiContext	typeref:typename:float
DragDropAcceptIdPrev	src/imgui/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdPrev;               \/\/ Target item id from previou/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropActive	src/imgui/imgui_internal.h	/^    bool                    DragDropActive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropHoldJustPressedId	src/imgui/imgui_internal.h	/^    ImGuiID                 DragDropHoldJustPressedId;          \/\/ Set when holding a payload /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropMouseButton	src/imgui/imgui_internal.h	/^    int                     DragDropMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropPayload	src/imgui/imgui_internal.h	/^    ImGuiPayload            DragDropPayload;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPayload
DragDropPayloadBufHeap	src/imgui/imgui_internal.h	/^    ImVector<unsigned char> DragDropPayloadBufHeap;             \/\/ We don't expose the ImVecto/;"	m	struct:ImGuiContext	typeref:typename:ImVector<unsigned char>
DragDropPayloadBufLocal	src/imgui/imgui_internal.h	/^    unsigned char           DragDropPayloadBufLocal[16];        \/\/ Local buffer for small payl/;"	m	struct:ImGuiContext	typeref:typename:unsigned char[16]
DragDropSourceFlags	src/imgui/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropSourceFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropSourceFrameCount	src/imgui/imgui_internal.h	/^    int                     DragDropSourceFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropTargetId	src/imgui/imgui_internal.h	/^    ImGuiID                 DragDropTargetId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropTargetRect	src/imgui/imgui_internal.h	/^    ImRect                  DragDropTargetRect;                 \/\/ Store rectangle of current /;"	m	struct:ImGuiContext	typeref:typename:ImRect
DragDropWithinSource	src/imgui/imgui_internal.h	/^    bool                    DragDropWithinSource;               \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropWithinTarget	src/imgui/imgui_internal.h	/^    bool                    DragDropWithinTarget;               \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragFloat	src/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, cons/;"	f	class:ImGui	typeref:typename:bool
DragFloat2	src/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat3	src/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat4	src/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloatRange2	src/imgui/imgui_widgets.cpp	/^bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float/;"	f	class:ImGui	typeref:typename:bool
DragInt	src/imgui/imgui_widgets.cpp	/^bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* /;"	f	class:ImGui	typeref:typename:bool
DragInt2	src/imgui/imgui_widgets.cpp	/^bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt3	src/imgui/imgui_widgets.cpp	/^bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt4	src/imgui/imgui_widgets.cpp	/^bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragIntRange2	src/imgui/imgui_widgets.cpp	/^bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_spe/;"	f	class:ImGui	typeref:typename:bool
DragScalar	src/imgui/imgui_widgets.cpp	/^bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, /;"	f	class:ImGui	typeref:typename:bool
DragScalarN	src/imgui/imgui_widgets.cpp	/^bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components/;"	f	class:ImGui	typeref:typename:bool
DragSpeedDefaultRatio	src/imgui/imgui_internal.h	/^    float                   DragSpeedDefaultRatio;              \/\/ If speed == 0.0f, uses (max/;"	m	struct:ImGuiContext	typeref:typename:float
Draw	src/imgui/imgui.cpp	/^bool ImGuiTextFilter::Draw(const char* label, float width)$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
Draw	src/imgui/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open = NULL)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Draw	src/imgui/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
DrawChannelCurrent	src/imgui/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelCurrent;            \/\/ Index within DrawSplitter.Chann/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelFrozen	src/imgui/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelFrozen;             \/\/ Draw channels for frozen rows (/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelUnfrozen	src/imgui/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelUnfrozen;           \/\/ Draw channels for unfrozen rows$/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelsTempMergeBuffer	src/imgui/imgui_internal.h	/^    ImVector<ImDrawChannel>         DrawChannelsTempMergeBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImDrawChannel>
DrawDataBuilder	src/imgui/imgui_internal.h	/^    ImDrawDataBuilder   DrawDataBuilder;$/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawDataBuilder
DrawDataP	src/imgui/imgui_internal.h	/^    ImDrawData          DrawDataP;$/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawData
DrawList	src/imgui/imgui_internal.h	/^    ImDrawList*             DrawList;                           \/\/ == &DrawListInst (for backw/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList *
DrawListInst	src/imgui/imgui_internal.h	/^    ImDrawList              DrawListInst;$/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList
DrawListSharedData	src/imgui/imgui_internal.h	/^    ImDrawListSharedData    DrawListSharedData;$/;"	m	struct:ImGuiContext	typeref:typename:ImDrawListSharedData
DrawLists	src/imgui/imgui_internal.h	/^    ImDrawList*         DrawLists[2];           \/\/ Convenience background (0) and foreground (/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawList * [2]
DrawListsLastFrame	src/imgui/imgui_internal.h	/^    int                 DrawListsLastFrame[2];  \/\/ Last frame number the background (0) and fo/;"	m	struct:ImGuiViewportP	typeref:typename:int[2]
DrawSplitter	src/imgui/imgui_internal.h	/^    ImDrawListSplitter          DrawSplitter;$/;"	m	struct:ImGuiTableTempData	typeref:typename:ImDrawListSplitter
DrawSplitter	src/imgui/imgui_internal.h	/^    ImDrawListSplitter*         DrawSplitter;               \/\/ Shortcut to TempData->DrawSplit/;"	m	struct:ImGuiTable	typeref:typename:ImDrawListSplitter *
DstIndex	src/imgui/imgui_draw.cpp	/^    int                 DstIndex;           \/\/ Index into atlas->Fonts[] and dst_tmp_array[]$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
Dummy	src/imgui/imgui_widgets.cpp	/^void ImGui::Dummy(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
DummyDrawChannel	src/imgui/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    DummyDrawChannel;           \/\/ Redirect non-visible columns he/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
EditTableColumnsFlags	src/imgui/imgui_demo.cpp	/^static void EditTableColumnsFlags(ImGuiTableColumnFlags* p_flags)$/;"	f	typeref:typename:void	file:
EditTableSizingFlags	src/imgui/imgui_demo.cpp	/^static void EditTableSizingFlags(ImGuiTableFlags* p_flags)$/;"	f	typeref:typename:void	file:
Edited	src/imgui/imgui_internal.h	/^    bool                    Edited;                 \/\/ edited this frame$/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
Element	src/imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	g	function:ShowDemoWindowWidgets	file:
Element_Air	src/imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_COUNT	src/imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Earth	src/imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Fire	src/imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Water	src/imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
ElementsHandle	src/imgui/imgui_impl_opengl3.cpp	/^    unsigned int    VboHandle, ElementsHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:unsigned int	file:
EmitItem	src/imgui/imgui_internal.h	/^    bool        EmitItem;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
EmptyString	src/imgui/imgui.cpp	/^char ImGuiTextBuffer::EmptyString[1] = { 0 };$/;"	m	class:ImGuiTextBuffer	typeref:typename:char[1]
Enabled	src/imgui/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
EnabledMaskByDisplayOrder	src/imgui/imgui_internal.h	/^    ImU64                       EnabledMaskByDisplayOrder;  \/\/ Column DisplayOrder -> IsEnable/;"	m	struct:ImGuiTable	typeref:typename:ImU64
EnabledMaskByIndex	src/imgui/imgui_internal.h	/^    ImU64                       EnabledMaskByIndex;         \/\/ Column Index -> IsEnabled map (/;"	m	struct:ImGuiTable	typeref:typename:ImU64
End	src/imgui/imgui.cpp	/^void ImGui::End()$/;"	f	class:ImGui	typeref:typename:void
End	src/imgui/imgui.cpp	/^void ImGuiListClipper::End()$/;"	f	class:ImGuiListClipper	typeref:typename:void
EndChild	src/imgui/imgui.cpp	/^void ImGui::EndChild()$/;"	f	class:ImGui	typeref:typename:void
EndChildFrame	src/imgui/imgui.cpp	/^void ImGui::EndChildFrame()$/;"	f	class:ImGui	typeref:typename:void
EndColumns	src/imgui/imgui_tables.cpp	/^void ImGui::EndColumns()$/;"	f	class:ImGui	typeref:typename:void
EndCombo	src/imgui/imgui_widgets.cpp	/^void ImGui::EndCombo()$/;"	f	class:ImGui	typeref:typename:void
EndComboPreview	src/imgui/imgui_widgets.cpp	/^void ImGui::EndComboPreview()$/;"	f	class:ImGui	typeref:typename:void
EndDisabled	src/imgui/imgui.cpp	/^void ImGui::EndDisabled()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropSource	src/imgui/imgui.cpp	/^void ImGui::EndDragDropSource()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropTarget	src/imgui/imgui.cpp	/^void ImGui::EndDragDropTarget()$/;"	f	class:ImGui	typeref:typename:void
EndFrame	src/imgui/imgui.cpp	/^void ImGui::EndFrame()$/;"	f	class:ImGui	typeref:typename:void
EndGroup	src/imgui/imgui.cpp	/^void ImGui::EndGroup()$/;"	f	class:ImGui	typeref:typename:void
EndListBox	src/imgui/imgui_widgets.cpp	/^void ImGui::EndListBox()$/;"	f	class:ImGui	typeref:typename:void
EndMainMenuBar	src/imgui/imgui_widgets.cpp	/^void ImGui::EndMainMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndMenu	src/imgui/imgui_widgets.cpp	/^void ImGui::EndMenu()$/;"	f	class:ImGui	typeref:typename:void
EndMenuBar	src/imgui/imgui_widgets.cpp	/^void ImGui::EndMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndPopup	src/imgui/imgui.cpp	/^void ImGui::EndPopup()$/;"	f	class:ImGui	typeref:typename:void
EndTabBar	src/imgui/imgui_widgets.cpp	/^void    ImGui::EndTabBar()$/;"	f	class:ImGui	typeref:typename:void
EndTabItem	src/imgui/imgui_widgets.cpp	/^void    ImGui::EndTabItem()$/;"	f	class:ImGui	typeref:typename:void
EndTable	src/imgui/imgui_tables.cpp	/^void    ImGui::EndTable()$/;"	f	class:ImGui	typeref:typename:void
EndTooltip	src/imgui/imgui.cpp	/^void ImGui::EndTooltip()$/;"	f	class:ImGui	typeref:typename:void
EnumDesc	src/imgui/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	s	function:EditTableSizingFlags	file:
ErrorCheckEndFrameRecover	src/imgui/imgui.cpp	/^void    ImGui::ErrorCheckEndFrameRecover(ImGuiErrorLogCallback log_callback, void* user_data)$/;"	f	class:ImGui	typeref:typename:void
ErrorCheckEndFrameSanityChecks	src/imgui/imgui.cpp	/^static void ImGui::ErrorCheckEndFrameSanityChecks()$/;"	f	class:ImGui	typeref:typename:void	file:
ErrorCheckEndWindowRecover	src/imgui/imgui.cpp	/^void    ImGui::ErrorCheckEndWindowRecover(ImGuiErrorLogCallback log_callback, void* user_data)$/;"	f	class:ImGui	typeref:typename:void
ErrorCheckNewFrameSanityChecks	src/imgui/imgui.cpp	/^static void ImGui::ErrorCheckNewFrameSanityChecks()$/;"	f	class:ImGui	typeref:typename:void	file:
ExampleAppConsole	src/imgui/imgui_demo.cpp	/^    ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
ExampleAppConsole	src/imgui/imgui_demo.cpp	/^struct ExampleAppConsole$/;"	s	file:
ExampleAppDocuments	src/imgui/imgui_demo.cpp	/^    ExampleAppDocuments()$/;"	f	struct:ExampleAppDocuments	file:
ExampleAppDocuments	src/imgui/imgui_demo.cpp	/^struct ExampleAppDocuments$/;"	s	file:
ExampleAppLog	src/imgui/imgui_demo.cpp	/^    ExampleAppLog()$/;"	f	struct:ExampleAppLog	file:
ExampleAppLog	src/imgui/imgui_demo.cpp	/^struct ExampleAppLog$/;"	s	file:
ExecCommand	src/imgui/imgui_demo.cpp	/^    void    ExecCommand(const char* command_line)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Expand	src/imgui/imgui_internal.h	/^    void        Expand(const ImVec2& amount)        { Min.x -= amount.x; Min.y -= amount.y; Max./;"	f	struct:ImRect	typeref:typename:void
Expand	src/imgui/imgui_internal.h	/^    void        Expand(const float amount)          { Min.x -= amount;   Min.y -= amount;   Max./;"	f	struct:ImRect	typeref:typename:void
FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA	src/imgui/imgui_draw.cpp	/^static const ImVec2 FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ImGuiMouseCursor_COUNT][3] =$/;"	v	typeref:typename:const ImVec2[][3]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_H	src/imgui/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_H = 27;$/;"	v	typeref:typename:const int
FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS	src/imgui/imgui_draw.cpp	/^static const char FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS[FONT_ATLAS_DEFAULT_TEX_DATA_W * FONT_ATLAS_/;"	v	typeref:typename:const char[]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_W	src/imgui/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_W = 122; \/\/ Actual texture will be 2 times that + 1 spac/;"	v	typeref:typename:const int
FREE_RAM_HIGH	src/memory.h	/^    const u16 FREE_RAM_HIGH      = 0x3FFF;$/;"	v	namespace:Layout	typeref:typename:const u16
FREE_RAM_LOW	src/memory.h	/^    const u16 FREE_RAM_LOW       = 0x1700;$/;"	v	namespace:Layout	typeref:typename:const u16
FREE_ROM_HIGH	src/memory.h	/^    const u16 FREE_ROM_HIGH      = 0xFFF9;$/;"	v	namespace:Layout	typeref:typename:const u16
FREE_ROM_LOW	src/memory.h	/^    const u16 FREE_ROM_LOW       = 0x8000; \/\/ Note: not actually protected from writes in any /;"	v	namespace:Layout	typeref:typename:const u16
Filter	src/imgui/imgui_demo.cpp	/^    ImGuiTextFilter       Filter;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImGuiTextFilter	file:
Filter	src/imgui/imgui_demo.cpp	/^    ImGuiTextFilter     Filter;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextFilter	file:
FilterImGuiLetters	src/imgui/imgui_demo.cpp	/^                static int FilterImGuiLetters(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::TextFilters	typeref:typename:int	file:
FindBestWindowPosForPopup	src/imgui/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopup(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
FindBestWindowPosForPopupEx	src/imgui/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopupEx(const ImVec2& ref_pos, const ImVec2& size, ImGuiDir* l/;"	f	class:ImGui	typeref:typename:ImVec2
FindBlockingModal	src/imgui/imgui.cpp	/^static ImGuiWindow* ImGui::FindBlockingModal(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *	file:
FindBottomMostVisibleWindowWithinBeginStack	src/imgui/imgui.cpp	/^ImGuiWindow* ImGui::FindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow* parent_window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindFirstExistingGlyph	src/imgui/imgui_draw.cpp	/^static ImWchar FindFirstExistingGlyph(ImFont* font, const ImWchar* candidate_chars, int candidat/;"	f	typeref:typename:ImWchar	file:
FindGlyph	src/imgui/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyph(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindGlyphNoFallback	src/imgui/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyphNoFallback(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindHoveredWindow	src/imgui/imgui.cpp	/^static void FindHoveredWindow()$/;"	f	typeref:typename:void	file:
FindOrCreateColumns	src/imgui/imgui_tables.cpp	/^ImGuiOldColumns* ImGui::FindOrCreateColumns(ImGuiWindow* window, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiOldColumns *
FindOrCreateWindowSettings	src/imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindOrCreateWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FindRenderedTextEnd	src/imgui/imgui.cpp	/^const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:const char *
FindSettingsHandler	src/imgui/imgui.cpp	/^ImGuiSettingsHandler* ImGui::FindSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:ImGuiSettingsHandler *
FindWindowByID	src/imgui/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowByName	src/imgui/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByName(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowDisplayIndex	src/imgui/imgui.cpp	/^int ImGui::FindWindowDisplayIndex(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:int
FindWindowFocusIndex	src/imgui/imgui.cpp	/^static int ImGui::FindWindowFocusIndex(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:int	file:
FindWindowNavFocusable	src/imgui/imgui.cpp	/^static ImGuiWindow* FindWindowNavFocusable(int i_start, int i_stop, int dir) \/\/ FIXME-OPT O(N)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindWindowSettings	src/imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettings(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FixRectCornerFlags	src/imgui/imgui_draw.cpp	/^static inline ImDrawFlags FixRectCornerFlags(ImDrawFlags flags)$/;"	f	typeref:typename:ImDrawFlags	file:
Flags	src/imgui/imgui_internal.h	/^    ImGuiInputTextFlags     Flags;                  \/\/ copy of InputText() flags$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiInputTextFlags
Flags	src/imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags      Flags;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiNextItemDataFlags
Flags	src/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags    Flags;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiNextWindowDataFlags
Flags	src/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags Flags;              \/\/ Not exposed$/;"	m	struct:ImGuiOldColumnData	typeref:typename:ImGuiOldColumnFlags
Flags	src/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags Flags;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImGuiOldColumnFlags
Flags	src/imgui/imgui_internal.h	/^    ImGuiTabBarFlags    Flags;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTabBarFlags
Flags	src/imgui/imgui_internal.h	/^    ImGuiTabItemFlags   Flags;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiTabItemFlags
Flags	src/imgui/imgui_internal.h	/^    ImGuiTableColumnFlags   Flags;                          \/\/ Flags after some patching (not /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnFlags
Flags	src/imgui/imgui_internal.h	/^    ImGuiTableFlags             Flags;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableFlags
Flags	src/imgui/imgui_internal.h	/^    ImGuiWindowFlags        Flags;                              \/\/ See enum ImGuiWindowFlags_$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowFlags
FlattenIntoSingleLayer	src/imgui/imgui.cpp	/^void ImDrawDataBuilder::FlattenIntoSingleLayer()$/;"	f	class:ImDrawDataBuilder	typeref:typename:void
Floor	src/imgui/imgui_internal.h	/^    void        Floor()                             { Min.x = IM_FLOOR(Min.x); Min.y = IM_FLOOR(/;"	f	struct:ImRect	typeref:typename:void
FocusOrder	src/imgui/imgui_internal.h	/^    short                   FocusOrder;                         \/\/ Order within WindowsFocusOr/;"	m	struct:ImGuiWindow	typeref:typename:short
FocusScopeId	src/imgui/imgui_internal.h	/^    ImGuiID                     FocusScopeId;   \/\/ Set by SetNextItemMultiSelectData() (!= 0 s/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiID
FocusScopeId	src/imgui/imgui_internal.h	/^    ImGuiID             FocusScopeId;   \/\/ Init,Move    \/\/ Best candidate focus scope ID$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiID
FocusScopeStack	src/imgui/imgui_internal.h	/^    ImVector<ImGuiID>       FocusScopeStack;                    \/\/ Stack for PushFocusScope()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiID>
FocusTopMostWindowUnderOne	src/imgui/imgui.cpp	/^void ImGui::FocusTopMostWindowUnderOne(ImGuiWindow* under_this_window, ImGuiWindow* ignore_windo/;"	f	class:ImGui	typeref:typename:void
FocusWindow	src/imgui/imgui.cpp	/^void ImGui::FocusWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
FocusableItemRegister	src/imgui/imgui_internal.h	/^    inline bool FocusableItemRegister(ImGuiWindow* window, ImGuiID id)  { IM_ASSERT(0); IM_UNUSE/;"	f	namespace:ImGui	typeref:typename:bool
FocusableItemUnregister	src/imgui/imgui_internal.h	/^    inline void FocusableItemUnregister(ImGuiWindow* window)            { IM_ASSERT(0); IM_UNUSE/;"	f	namespace:ImGui	typeref:typename:void
Focused	src/imgui/imgui_internal.h	/^struct ImGuiInputEventAppFocused    { bool Focused; };$/;"	m	struct:ImGuiInputEventAppFocused	typeref:typename:bool
Font	src/imgui/imgui_internal.h	/^    ImFont*                 Font;                               \/\/ (Shortcut) == FontStack.emp/;"	m	struct:ImGuiContext	typeref:typename:ImFont *
Font	src/imgui/imgui_internal.h	/^    ImFont*         Font;                       \/\/ Current\/default font (optional, for simpli/;"	m	struct:ImDrawListSharedData	typeref:typename:ImFont *
FontAtlasOwnedByContext	src/imgui/imgui_internal.h	/^    bool                    FontAtlasOwnedByContext;            \/\/ IO.Fonts-> is owned by the /;"	m	struct:ImGuiContext	typeref:typename:bool
FontBaseSize	src/imgui/imgui_internal.h	/^    float                   FontBaseSize;                       \/\/ (Shortcut) == IO.FontGlobal/;"	m	struct:ImGuiContext	typeref:typename:float
FontBuilder_Build	src/imgui/imgui_internal.h	/^    bool    (*FontBuilder_Build)(ImFontAtlas* atlas);$/;"	m	struct:ImFontBuilderIO	typeref:typename:bool (*)(ImFontAtlas * atlas)
FontInfo	src/imgui/imgui_draw.cpp	/^    stbtt_fontinfo      FontInfo;$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_fontinfo	file:
FontSize	src/imgui/imgui_internal.h	/^    float                   FontSize;                           \/\/ (Shortcut) == FontBaseSize /;"	m	struct:ImGuiContext	typeref:typename:float
FontSize	src/imgui/imgui_internal.h	/^    float           FontSize;                   \/\/ Current\/default font size (optional, for s/;"	m	struct:ImDrawListSharedData	typeref:typename:float
FontStack	src/imgui/imgui_internal.h	/^    ImVector<ImFont*>       FontStack;                          \/\/ Stack for PushFont()\/PopFo/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImFont * >
FontTexture	src/imgui/imgui_impl_opengl3.cpp	/^    GLuint          FontTexture;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
FontWindowScale	src/imgui/imgui_internal.h	/^    float                   FontWindowScale;                    \/\/ User scale multiplier per-w/;"	m	struct:ImGuiWindow	typeref:typename:float
ForceDisplayRangeByIndices	src/imgui/imgui.cpp	/^void ImGuiListClipper::ForceDisplayRangeByIndices(int item_min, int item_max)$/;"	f	class:ImGuiListClipper	typeref:typename:void
FrameCount	src/imgui/imgui_internal.h	/^    int                     FrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountEnded	src/imgui/imgui_internal.h	/^    int                     FrameCountEnded;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountRendered	src/imgui/imgui_internal.h	/^    int                     FrameCountRendered;$/;"	m	struct:ImGuiContext	typeref:typename:int
FramePadding	src/imgui/imgui_internal.h	/^    ImVec2              FramePadding;           \/\/ style.FramePadding locked at the time of Be/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
FramerateSecPerFrame	src/imgui/imgui_internal.h	/^    float                   FramerateSecPerFrame[120];          \/\/ Calculate estimate of frame/;"	m	struct:ImGuiContext	typeref:typename:float[120]
FramerateSecPerFrameAccum	src/imgui/imgui_internal.h	/^    float                   FramerateSecPerFrameAccum;$/;"	m	struct:ImGuiContext	typeref:typename:float
FramerateSecPerFrameCount	src/imgui/imgui_internal.h	/^    int                     FramerateSecPerFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FramerateSecPerFrameIdx	src/imgui/imgui_internal.h	/^    int                     FramerateSecPerFrameIdx;$/;"	m	struct:ImGuiContext	typeref:typename:int
FreeIdx	src/imgui/imgui_internal.h	/^    ImPoolIdx       FreeIdx;    \/\/ Next free idx to use$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
FreeWrapper	src/imgui/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void	file:
FreeWrapper	src/imgui/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); free(ptr);/;"	f	typeref:typename:void	file:
FreezeColumnsCount	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeColumnsCount;         \/\/ Actual frozen columns count (==/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeColumnsRequest	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeColumnsRequest;       \/\/ Requested frozen columns count$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeRowsCount	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeRowsCount;            \/\/ Actual frozen row count (== Fre/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeRowsRequest	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeRowsRequest;          \/\/ Requested frozen rows count$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FromIndices	src/imgui/imgui_internal.h	/^    static ImGuiListClipperRange    FromIndices(int min, int max)                               /;"	f	struct:ImGuiListClipperRange	typeref:typename:ImGuiListClipperRange
FromPositions	src/imgui/imgui_internal.h	/^    static ImGuiListClipperRange    FromPositions(float y1, float y2, int off_min, int off_max) /;"	f	struct:ImGuiListClipperRange	typeref:typename:ImGuiListClipperRange
Func	src/imgui/imgui.cpp	/^            struct Func { static int IMGUI_CDECL WindowComparerByBeginOrder(const void* lhs, con/;"	s	function:ImGui::ShowMetricsWindow	file:
Funcs	src/imgui/imgui.cpp	/^    struct Funcs$/;"	s	function:ImGui::ShowMetricsWindow	file:
Funcs	src/imgui/imgui_demo.cpp	/^            struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
Funcs	src/imgui/imgui_demo.cpp	/^        struct Funcs { static bool ItemGetter(void* data, int n, const char** out_str) { *out_st/;"	s	function:ShowDemoWindowWidgets	file:
Funcs	src/imgui/imgui_demo.cpp	/^        struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
GCrc32LookupTable	src/imgui/imgui.cpp	/^static const ImU32 GCrc32LookupTable[256] =$/;"	v	typeref:typename:const ImU32[256]	file:
GDataTypeInfo	src/imgui/imgui_widgets.cpp	/^static const ImGuiDataTypeInfo GDataTypeInfo[] =$/;"	v	typeref:typename:const ImGuiDataTypeInfo[]	file:
GImAllocatorAllocFunc	src/imgui/imgui.cpp	/^static ImGuiMemAllocFunc    GImAllocatorAllocFunc = MallocWrapper;$/;"	v	typeref:typename:ImGuiMemAllocFunc	file:
GImAllocatorFreeFunc	src/imgui/imgui.cpp	/^static ImGuiMemFreeFunc     GImAllocatorFreeFunc = FreeWrapper;$/;"	v	typeref:typename:ImGuiMemFreeFunc	file:
GImAllocatorUserData	src/imgui/imgui.cpp	/^static void*                GImAllocatorUserData = NULL;$/;"	v	typeref:typename:void *	file:
GImGui	src/imgui/imgui.cpp	/^ImGuiContext*   GImGui = NULL;$/;"	v	typeref:typename:ImGuiContext *
GImGuiDemoMarkerCallback	src/imgui/imgui_demo.cpp	/^ImGuiDemoMarkerCallback         GImGuiDemoMarkerCallback = NULL;$/;"	v	typeref:typename:ImGuiDemoMarkerCallback
GImGuiDemoMarkerCallbackUserData	src/imgui/imgui_demo.cpp	/^void*                           GImGuiDemoMarkerCallbackUserData = NULL;$/;"	v	typeref:typename:void *
GKeyNames	src/imgui/imgui.cpp	/^static const char* const GKeyNames[] =$/;"	v	typeref:typename:const char * const[]	file:
GLAD_GL_VERSION_1_0	src/glad.cpp	/^int GLAD_GL_VERSION_1_0 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_1_1	src/glad.cpp	/^int GLAD_GL_VERSION_1_1 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_1_2	src/glad.cpp	/^int GLAD_GL_VERSION_1_2 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_1_3	src/glad.cpp	/^int GLAD_GL_VERSION_1_3 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_1_4	src/glad.cpp	/^int GLAD_GL_VERSION_1_4 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_1_5	src/glad.cpp	/^int GLAD_GL_VERSION_1_5 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_2_0	src/glad.cpp	/^int GLAD_GL_VERSION_2_0 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_2_1	src/glad.cpp	/^int GLAD_GL_VERSION_2_1 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_3_0	src/glad.cpp	/^int GLAD_GL_VERSION_3_0 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_3_1	src/glad.cpp	/^int GLAD_GL_VERSION_3_1 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_3_2	src/glad.cpp	/^int GLAD_GL_VERSION_3_2 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_3_3	src/glad.cpp	/^int GLAD_GL_VERSION_3_3 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_4_0	src/glad.cpp	/^int GLAD_GL_VERSION_4_0 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_4_1	src/glad.cpp	/^int GLAD_GL_VERSION_4_1 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_4_2	src/glad.cpp	/^int GLAD_GL_VERSION_4_2 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_4_3	src/glad.cpp	/^int GLAD_GL_VERSION_4_3 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_4_4	src/glad.cpp	/^int GLAD_GL_VERSION_4_4 = 0;$/;"	v	typeref:typename:int
GLAD_GL_VERSION_4_5	src/glad.cpp	/^int GLAD_GL_VERSION_4_5 = 0;$/;"	v	typeref:typename:int
GLFW_EXPOSE_NATIVE_WIN32	src/imgui/imgui_impl_glfw.cpp	/^#define GLFW_EXPOSE_NATIVE_WIN32$/;"	d	file:
GLFW_HAS_GAMEPAD_API	src/imgui/imgui_impl_glfw.cpp	/^#define GLFW_HAS_GAMEPAD_API /;"	d	file:
GLFW_HAS_GET_KEY_NAME	src/imgui/imgui_impl_glfw.cpp	/^#define GLFW_HAS_GET_KEY_NAME /;"	d	file:
GLFW_HAS_NEW_CURSORS	src/imgui/imgui_impl_glfw.cpp	/^#define GLFW_HAS_NEW_CURSORS /;"	d	file:
GLVersion	src/glad.cpp	/^struct gladGLversionStruct GLVersion = { 0, 0 };$/;"	v	typeref:struct:gladGLversionStruct
GL_GLEXT_PROTOTYPES	src/imgui/imgui_impl_opengl3.cpp	/^#define GL_GLEXT_PROTOTYPES$/;"	d	file:
GL_VERTEX_ARRAY_BINDING	src/imgui/imgui_impl_opengl3.cpp	/^#define GL_VERTEX_ARRAY_BINDING /;"	d	file:
GStyleVarInfo	src/imgui/imgui.cpp	/^static const ImGuiStyleVarInfo GStyleVarInfo[] =$/;"	v	typeref:typename:const ImGuiStyleVarInfo[]	file:
GcAwakeTransientWindowBuffers	src/imgui/imgui.cpp	/^void ImGui::GcAwakeTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GcCompactAll	src/imgui/imgui_internal.h	/^    bool                    GcCompactAll;                       \/\/ Request full GC$/;"	m	struct:ImGuiContext	typeref:typename:bool
GcCompactTransientMiscBuffers	src/imgui/imgui.cpp	/^void ImGui::GcCompactTransientMiscBuffers()$/;"	f	class:ImGui	typeref:typename:void
GcCompactTransientWindowBuffers	src/imgui/imgui.cpp	/^void ImGui::GcCompactTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GetActiveID	src/imgui/imgui_internal.h	/^    inline ImGuiID          GetActiveID()   { ImGuiContext& g = *GImGui; return g.ActiveId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetAliveCount	src/imgui/imgui_internal.h	/^    int         GetAliveCount() const               { return AliveCount; }      \/\/ Number of a/;"	f	struct:ImPool	typeref:typename:int
GetAllocatorFunctions	src/imgui/imgui.cpp	/^void ImGui::GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func/;"	f	class:ImGui	typeref:typename:void
GetArea	src/imgui/imgui_internal.h	/^    float       GetArea() const                     { return (Max.x - Min.x) * (Max.y - Min.y); /;"	f	struct:ImRect	typeref:typename:float
GetArenaSizeInBytes	src/imgui/imgui_internal.h	/^    inline int   GetArenaSizeInBytes()              { return CurrOff; }$/;"	f	struct:ImSpanAllocator	typeref:typename:int
GetBL	src/imgui/imgui_internal.h	/^    ImVec2      GetBL() const                       { return ImVec2(Min.x, Max.y); }  \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBR	src/imgui/imgui_internal.h	/^    ImVec2      GetBR() const                       { return Max; }                   \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBackgroundDrawList	src/imgui/imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBackgroundDrawList	src/imgui/imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList(ImGuiViewport* viewport)$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBool	src/imgui/imgui.cpp	/^bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:bool
GetBoolRef	src/imgui/imgui.cpp	/^bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)$/;"	f	class:ImGuiStorage	typeref:typename:bool *
GetBufSize	src/imgui/imgui_internal.h	/^    int         GetBufSize() const                  { return Buf.Size; }$/;"	f	struct:ImPool	typeref:typename:int
GetBuildWorkRect	src/imgui/imgui_internal.h	/^    ImRect  GetBuildWorkRect() const    { ImVec2 pos = CalcWorkRectPos(BuildWorkOffsetMin); ImVe/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GetByIndex	src/imgui/imgui_internal.h	/^    T*          GetByIndex(ImPoolIdx n)             { return &Buf[n]; }$/;"	f	struct:ImPool	typeref:typename:T *
GetByKey	src/imgui/imgui_internal.h	/^    T*          GetByKey(ImGuiID key)               { int idx = Map.GetInt(key, -1); return (idx/;"	f	struct:ImPool	typeref:typename:T *
GetCenter	src/imgui/imgui_internal.h	/^    ImVec2      GetCenter() const                   { return ImVec2((Min.x + Max.x) * 0.5f, (Min/;"	f	struct:ImRect	typeref:typename:ImVec2
GetClipboardText	src/imgui/imgui.cpp	/^const char* ImGui::GetClipboardText()$/;"	f	class:ImGui	typeref:typename:const char *
GetClipboardTextFn_DefaultImpl	src/imgui/imgui.cpp	/^static const char* GetClipboardTextFn_DefaultImpl(void*)$/;"	f	typeref:typename:const char *	file:
GetColorU32	src/imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	src/imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImU32 col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	src/imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColumnIndex	src/imgui/imgui_tables.cpp	/^int ImGui::GetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
GetColumnNormFromOffset	src/imgui/imgui_tables.cpp	/^float ImGui::GetColumnNormFromOffset(const ImGuiOldColumns* columns, float offset)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffset	src/imgui/imgui_tables.cpp	/^float ImGui::GetColumnOffset(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffsetFromNorm	src/imgui/imgui_tables.cpp	/^float ImGui::GetColumnOffsetFromNorm(const ImGuiOldColumns* columns, float offset_norm)$/;"	f	class:ImGui	typeref:typename:float
GetColumnSettings	src/imgui/imgui_internal.h	/^    ImGuiTableColumnSettings*   GetColumnSettings()     { return (ImGuiTableColumnSettings*)(thi/;"	f	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnSettings *
GetColumnWidth	src/imgui/imgui_tables.cpp	/^float ImGui::GetColumnWidth(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnWidthEx	src/imgui/imgui_tables.cpp	/^static float GetColumnWidthEx(ImGuiOldColumns* columns, int column_index, bool before_resize = f/;"	f	typeref:typename:float	file:
GetColumnsCount	src/imgui/imgui_tables.cpp	/^int ImGui::GetColumnsCount()$/;"	f	class:ImGui	typeref:typename:int
GetColumnsID	src/imgui/imgui_tables.cpp	/^ImGuiID ImGui::GetColumnsID(const char* str_id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetCombinedRootWindow	src/imgui/imgui.cpp	/^static ImGuiWindow* GetCombinedRootWindow(ImGuiWindow* window, bool popup_hierarchy)$/;"	f	typeref:typename:ImGuiWindow *	file:
GetContentRegionAvail	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetContentRegionAvail()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionMax	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionMaxAbs	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMaxAbs()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCurrentContext	src/imgui/imgui.cpp	/^ImGuiContext* ImGui::GetCurrentContext()$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
GetCurrentTable	src/imgui/imgui_internal.h	/^    inline    ImGuiTable*   GetCurrentTable() { ImGuiContext& g = *GImGui; return g.CurrentTable/;"	f	namespace:ImGui	typeref:typename:ImGuiTable *
GetCurrentWindow	src/imgui/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindow()          { ImGuiContext& g = *GImGui; g.CurrentWi/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCurrentWindowRead	src/imgui/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindowRead()      { ImGuiContext& g = *GImGui; return g.Cu/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCursorPos	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorPos	src/imgui/imgui_internal.h	/^    int         GetCursorPos() const        { return Stb.cursor; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetCursorPosX	src/imgui/imgui.cpp	/^float ImGui::GetCursorPosX()$/;"	f	class:ImGui	typeref:typename:float
GetCursorPosY	src/imgui/imgui.cpp	/^float ImGui::GetCursorPosY()$/;"	f	class:ImGui	typeref:typename:float
GetCursorScreenPos	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorScreenPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorStartPos	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorStartPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetDefaultCompressedFontDataTTFBase85	src/imgui/imgui_draw.cpp	/^static const char* GetDefaultCompressedFontDataTTFBase85()$/;"	f	typeref:typename:const char *	file:
GetDefaultFont	src/imgui/imgui_internal.h	/^    inline ImFont*          GetDefaultFont() { ImGuiContext& g = *GImGui; return g.IO.FontDefaul/;"	f	namespace:ImGui	typeref:typename:ImFont *
GetDragDropPayload	src/imgui/imgui.cpp	/^const ImGuiPayload* ImGui::GetDragDropPayload()$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
GetDraggedColumnOffset	src/imgui/imgui_tables.cpp	/^static float GetDraggedColumnOffset(ImGuiOldColumns* columns, int column_index)$/;"	f	typeref:typename:float	file:
GetDrawData	src/imgui/imgui.cpp	/^ImDrawData* ImGui::GetDrawData()$/;"	f	class:ImGui	typeref:typename:ImDrawData *
GetDrawListCount	src/imgui/imgui_internal.h	/^    int  GetDrawListCount() const   { int count = 0; for (int n = 0; n < IM_ARRAYSIZE(Layers); n/;"	f	struct:ImDrawDataBuilder	typeref:typename:int
GetDrawListSharedData	src/imgui/imgui.cpp	/^ImDrawListSharedData* ImGui::GetDrawListSharedData()$/;"	f	class:ImGui	typeref:typename:ImDrawListSharedData *
GetFallbackWindowNameForWindowingList	src/imgui/imgui.cpp	/^static const char* GetFallbackWindowNameForWindowingList(ImGuiWindow* window)$/;"	f	typeref:typename:const char *	file:
GetFloat	src/imgui/imgui.cpp	/^float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:float
GetFloatRef	src/imgui/imgui.cpp	/^float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)$/;"	f	class:ImGuiStorage	typeref:typename:float *
GetFocusID	src/imgui/imgui_internal.h	/^    inline ImGuiID          GetFocusID()    { ImGuiContext& g = *GImGui; return g.NavId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetFocusScope	src/imgui/imgui_internal.h	/^    inline ImGuiID          GetFocusScope()                 { ImGuiContext& g = *GImGui; return /;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetFocusedFocusScope	src/imgui/imgui_internal.h	/^    inline ImGuiID          GetFocusedFocusScope()          { ImGuiContext& g = *GImGui; return /;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetFont	src/imgui/imgui.cpp	/^ImFont* ImGui::GetFont()$/;"	f	class:ImGui	typeref:typename:ImFont *
GetFontSize	src/imgui/imgui.cpp	/^float ImGui::GetFontSize()$/;"	f	class:ImGui	typeref:typename:float
GetFontTexUvWhitePixel	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetFontTexUvWhitePixel()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetForegroundDrawList	src/imgui/imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	src/imgui/imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList(ImGuiViewport* viewport)$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	src/imgui/imgui_internal.h	/^    inline ImDrawList*      GetForegroundDrawList(ImGuiWindow* window) { IM_UNUSED(window); retu/;"	f	namespace:ImGui	typeref:typename:ImDrawList *
GetFrameCount	src/imgui/imgui.cpp	/^int ImGui::GetFrameCount()$/;"	f	class:ImGui	typeref:typename:int
GetFrameHeight	src/imgui/imgui.cpp	/^float ImGui::GetFrameHeight()$/;"	f	class:ImGui	typeref:typename:float
GetFrameHeightWithSpacing	src/imgui/imgui.cpp	/^float ImGui::GetFrameHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetGlyphRangesChineseFull	src/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseFull()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesChineseSimplifiedCommon	src/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesCyrillic	src/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesCyrillic()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesDefault	src/imgui/imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesDefault()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesJapanese	src/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesJapanese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesKorean	src/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesKorean()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesThai	src/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesThai()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesVietnamese	src/imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesVietnamese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetHeight	src/imgui/imgui_internal.h	/^    float       GetHeight() const                   { return Max.y - Min.y; }$/;"	f	struct:ImRect	typeref:typename:float
GetHoveredID	src/imgui/imgui.cpp	/^ImGuiID ImGui::GetHoveredID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	src/imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	src/imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	src/imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	src/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	src/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const void* ptr)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	src/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(int n)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDFromRectangle	src/imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDFromRectangle(const ImRect& r_abs)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDWithSeed	src/imgui/imgui.cpp	/^ImGuiID ImGui::GetIDWithSeed(const char* str, const char* str_end, ImGuiID seed)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetIO	src/imgui/imgui.cpp	/^ImGuiIO& ImGui::GetIO()$/;"	f	class:ImGui	typeref:typename:ImGuiIO &
GetIndex	src/imgui/imgui_internal.h	/^    ImPoolIdx   GetIndex(const T* p) const          { IM_ASSERT(p >= Buf.Data && p < Buf.Data + /;"	f	struct:ImPool	typeref:typename:ImPoolIdx
GetInputSourceName	src/imgui/imgui.cpp	/^static const char* GetInputSourceName(ImGuiInputSource source)$/;"	f	typeref:typename:const char *	file:
GetInputTextState	src/imgui/imgui_internal.h	/^    inline ImGuiInputTextState* GetInputTextState(ImGuiID id)   { ImGuiContext& g = *GImGui; ret/;"	f	namespace:ImGui	typeref:typename:ImGuiInputTextState *
GetInt	src/imgui/imgui.cpp	/^int ImGuiStorage::GetInt(ImGuiID key, int default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:int
GetIntRef	src/imgui/imgui.cpp	/^int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)$/;"	f	class:ImGuiStorage	typeref:typename:int *
GetItemFlags	src/imgui/imgui_internal.h	/^    inline ImGuiItemFlags   GetItemFlags()  { ImGuiContext& g = *GImGui; return g.LastItemData.I/;"	f	namespace:ImGui	typeref:typename:ImGuiItemFlags
GetItemID	src/imgui/imgui_internal.h	/^    inline ImGuiID          GetItemID()     { ImGuiContext& g = *GImGui; return g.LastItemData.I/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetItemRectMax	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectMin	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectSize	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemStatusFlags	src/imgui/imgui_internal.h	/^    inline ImGuiItemStatusFlags GetItemStatusFlags(){ ImGuiContext& g = *GImGui; return g.LastIt/;"	f	namespace:ImGui	typeref:typename:ImGuiItemStatusFlags
GetKeyData	src/imgui/imgui.cpp	/^ImGuiKeyData* ImGui::GetKeyData(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyData *
GetKeyIndex	src/imgui/imgui.cpp	/^int ImGui::GetKeyIndex(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:int
GetKeyName	src/imgui/imgui.cpp	/^const char* ImGui::GetKeyName(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:const char *
GetKeyPressedAmount	src/imgui/imgui.cpp	/^int ImGui::GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
GetMainRect	src/imgui/imgui_internal.h	/^    ImRect  GetMainRect() const         { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Si/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GetMainViewport	src/imgui/imgui.cpp	/^ImGuiViewport* ImGui::GetMainViewport()$/;"	f	class:ImGui	typeref:typename:ImGuiViewport *
GetMapSize	src/imgui/imgui_internal.h	/^    int         GetMapSize() const                  { return Map.Data.Size; }   \/\/ It is the m/;"	f	struct:ImPool	typeref:typename:int
GetMergedModFlags	src/imgui/imgui.cpp	/^ImGuiModFlags ImGui::GetMergedModFlags()$/;"	f	class:ImGui	typeref:typename:ImGuiModFlags
GetMinimumStepAtDecimalPrecision	src/imgui/imgui_widgets.cpp	/^static float GetMinimumStepAtDecimalPrecision(int decimal_precision)$/;"	f	typeref:typename:float	file:
GetMouseClickedCount	src/imgui/imgui.cpp	/^int ImGui::GetMouseClickedCount(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:int
GetMouseCursor	src/imgui/imgui.cpp	/^ImGuiMouseCursor ImGui::GetMouseCursor()$/;"	f	class:ImGui	typeref:typename:ImGuiMouseCursor
GetMouseCursorTexData	src/imgui/imgui_draw.cpp	/^bool ImFontAtlas::GetMouseCursorTexData(ImGuiMouseCursor cursor_type, ImVec2* out_offset, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:bool
GetMouseDragDelta	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePos	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetMousePos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePosOnOpeningCurrentPopup	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetName	src/imgui/imgui_internal.h	/^    char* GetName()             { return (char*)(this + 1); }$/;"	f	struct:ImGuiWindowSettings	typeref:typename:char *
GetNavInputAmount	src/imgui/imgui.cpp	/^float ImGui::GetNavInputAmount(ImGuiNavInput n, ImGuiNavReadMode mode)$/;"	f	class:ImGui	typeref:typename:float
GetNavInputAmount2d	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetNavInputAmount2d(ImGuiNavDirSourceFlags dir_sources, ImGuiNavReadMode mode, flo/;"	f	class:ImGui	typeref:typename:ImVec2
GetNavInputName	src/imgui/imgui.cpp	/^const char* ImGui::GetNavInputName(ImGuiNavInput n)$/;"	f	class:ImGui	typeref:typename:const char *
GetOrAddByKey	src/imgui/imgui_internal.h	/^    T*          GetOrAddByKey(ImGuiID key)          { int* p_idx = Map.GetIntRef(key, -1); if (*/;"	f	struct:ImPool	typeref:typename:T *
GetPopupAllowedExtentRect	src/imgui/imgui.cpp	/^ImRect ImGui::GetPopupAllowedExtentRect(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImRect
GetRedoAvailCount	src/imgui/imgui_internal.h	/^    int         GetRedoAvailCount() const   { return STB_TEXTEDIT_UNDOSTATECOUNT - Stb.undostate/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetResizeBorderRect	src/imgui/imgui.cpp	/^static ImRect GetResizeBorderRect(ImGuiWindow* window, int border_n, float perp_padding, float t/;"	f	typeref:typename:ImRect	file:
GetScrollMaxX	src/imgui/imgui.cpp	/^float ImGui::GetScrollMaxX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollMaxY	src/imgui/imgui.cpp	/^float ImGui::GetScrollMaxY()$/;"	f	class:ImGui	typeref:typename:float
GetScrollX	src/imgui/imgui.cpp	/^float ImGui::GetScrollX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollY	src/imgui/imgui.cpp	/^float ImGui::GetScrollY()$/;"	f	class:ImGui	typeref:typename:float
GetSelectionEnd	src/imgui/imgui_internal.h	/^    int         GetSelectionEnd() const     { return Stb.select_end; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetSelectionStart	src/imgui/imgui_internal.h	/^    int         GetSelectionStart() const   { return Stb.select_start; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetSize	src/imgui/imgui_internal.h	/^    ImVec2      GetSize() const                     { return ImVec2(Max.x - Min.x, Max.y - Min.y/;"	f	struct:ImRect	typeref:typename:ImVec2
GetSize	src/imgui/imgui_internal.h	/^    int         GetSize()                           { return GetMapSize(); } \/\/ For ImPlot: sh/;"	f	struct:ImPool	typeref:typename:int
GetSkipItemForListClipping	src/imgui/imgui.cpp	/^static bool GetSkipItemForListClipping()$/;"	f	typeref:typename:bool	file:
GetSpan	src/imgui/imgui_internal.h	/^    inline void  GetSpan(int n, ImSpan<T>* span)    { span->set((T*)GetSpanPtrBegin(n), (T*)GetS/;"	f	struct:ImSpanAllocator	typeref:typename:void
GetSpanPtrBegin	src/imgui/imgui_internal.h	/^    inline void* GetSpanPtrBegin(int n)             { IM_ASSERT(n >= 0 && n < CHUNKS && CurrIdx /;"	f	struct:ImSpanAllocator	typeref:typename:void *
GetSpanPtrEnd	src/imgui/imgui_internal.h	/^    inline void* GetSpanPtrEnd(int n)               { IM_ASSERT(n >= 0 && n < CHUNKS && CurrIdx /;"	f	struct:ImSpanAllocator	typeref:typename:void *
GetState	src/imgui/imgui_impl_opengl3.cpp	/^    void GetState(GLint index)$/;"	f	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:void	file:
GetStateStorage	src/imgui/imgui.cpp	/^ImGuiStorage* ImGui::GetStateStorage()$/;"	f	class:ImGui	typeref:typename:ImGuiStorage *
GetStyle	src/imgui/imgui.cpp	/^ImGuiStyle& ImGui::GetStyle()$/;"	f	class:ImGui	typeref:typename:ImGuiStyle &
GetStyleColorName	src/imgui/imgui.cpp	/^const char* ImGui::GetStyleColorName(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const char *
GetStyleColorVec4	src/imgui/imgui.cpp	/^const ImVec4& ImGui::GetStyleColorVec4(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const ImVec4 &
GetStyleVarInfo	src/imgui/imgui.cpp	/^static const ImGuiStyleVarInfo* GetStyleVarInfo(ImGuiStyleVar idx)$/;"	f	typeref:typename:const ImGuiStyleVarInfo *	file:
GetTL	src/imgui/imgui_internal.h	/^    ImVec2      GetTL() const                       { return Min; }                   \/\/ Top-l/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTR	src/imgui/imgui_internal.h	/^    ImVec2      GetTR() const                       { return ImVec2(Max.x, Min.y); }  \/\/ Top-r/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTabBarFromTabBarRef	src/imgui/imgui_widgets.cpp	/^static ImGuiTabBar* GetTabBarFromTabBarRef(const ImGuiPtrOrIndex& ref)$/;"	f	typeref:typename:ImGuiTabBar *	file:
GetTabBarRefFromTabBar	src/imgui/imgui_widgets.cpp	/^static ImGuiPtrOrIndex GetTabBarRefFromTabBar(ImGuiTabBar* tab_bar)$/;"	f	typeref:typename:ImGuiPtrOrIndex	file:
GetTabName	src/imgui/imgui_internal.h	/^    const char*         GetTabName(const ImGuiTabItem* tab) const$/;"	f	struct:ImGuiTabBar	typeref:typename:const char *
GetTabOrder	src/imgui/imgui_internal.h	/^    int                 GetTabOrder(const ImGuiTabItem* tab) const  { return Tabs.index_from_ptr/;"	f	struct:ImGuiTabBar	typeref:typename:int
GetTableRect	src/imgui/imgui.cpp	/^        static ImRect GetTableRect(ImGuiTable* table, int rect_type, int n)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetTexDataAsAlpha8	src/imgui/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTexDataAsRGBA32	src/imgui/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTextLineHeight	src/imgui/imgui.cpp	/^float ImGui::GetTextLineHeight()$/;"	f	class:ImGui	typeref:typename:float
GetTextLineHeightWithSpacing	src/imgui/imgui.cpp	/^float ImGui::GetTextLineHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetTime	src/imgui/imgui.cpp	/^double ImGui::GetTime()$/;"	f	class:ImGui	typeref:typename:double
GetTopMostAndVisiblePopupModal	src/imgui/imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostAndVisiblePopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTopMostPopupModal	src/imgui/imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostPopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTreeNodeToLabelSpacing	src/imgui/imgui_widgets.cpp	/^float ImGui::GetTreeNodeToLabelSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetUndoAvailCount	src/imgui/imgui_internal.h	/^    int         GetUndoAvailCount() const   { return Stb.undostate.undo_point; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetVarPtr	src/imgui/imgui.cpp	/^    void*           GetVarPtr(ImGuiStyle* style) const { return (void*)((unsigned char*)style + /;"	f	struct:ImGuiStyleVarInfo	typeref:typename:void *	file:
GetVersion	src/imgui/imgui.cpp	/^const char* ImGui::GetVersion()$/;"	f	class:ImGui	typeref:typename:const char *
GetViewportDrawList	src/imgui/imgui.cpp	/^static ImDrawList* GetViewportDrawList(ImGuiViewportP* viewport, size_t drawlist_no, const char*/;"	f	typeref:typename:ImDrawList *	file:
GetVoidPtr	src/imgui/imgui.cpp	/^void* ImGuiStorage::GetVoidPtr(ImGuiID key) const$/;"	f	class:ImGuiStorage	typeref:typename:void *
GetVoidPtrRef	src/imgui/imgui.cpp	/^void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)$/;"	f	class:ImGuiStorage	typeref:typename:void **
GetWidth	src/imgui/imgui_internal.h	/^    float       GetWidth() const                    { return Max.x - Min.x; }$/;"	f	struct:ImRect	typeref:typename:float
GetWindowBgColorIdx	src/imgui/imgui.cpp	/^static ImGuiCol GetWindowBgColorIdx(ImGuiWindow* window)$/;"	f	typeref:typename:ImGuiCol	file:
GetWindowContentRegionMax	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowContentRegionMin	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowDisplayLayer	src/imgui/imgui.cpp	/^static inline int GetWindowDisplayLayer(ImGuiWindow* window)$/;"	f	typeref:typename:int	file:
GetWindowDrawList	src/imgui/imgui.cpp	/^ImDrawList* ImGui::GetWindowDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetWindowHeight	src/imgui/imgui.cpp	/^float ImGui::GetWindowHeight()$/;"	f	class:ImGui	typeref:typename:float
GetWindowPos	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowRect	src/imgui/imgui.cpp	/^        static ImRect GetWindowRect(ImGuiWindow* window, int rect_type)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetWindowResizeBorderID	src/imgui/imgui.cpp	/^ImGuiID ImGui::GetWindowResizeBorderID(ImGuiWindow* window, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowResizeCornerID	src/imgui/imgui.cpp	/^ImGuiID ImGui::GetWindowResizeCornerID(ImGuiWindow* window, int n)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarID	src/imgui/imgui_widgets.cpp	/^ImGuiID ImGui::GetWindowScrollbarID(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarRect	src/imgui/imgui_widgets.cpp	/^ImRect ImGui::GetWindowScrollbarRect(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImRect
GetWindowSize	src/imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowWidth	src/imgui/imgui.cpp	/^float ImGui::GetWindowWidth()$/;"	f	class:ImGui	typeref:typename:float
GetWorkRect	src/imgui/imgui_internal.h	/^    ImRect  GetWorkRect() const         { return ImRect(WorkPos.x, WorkPos.y, WorkPos.x + WorkSi/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GlVersion	src/imgui/imgui_impl_opengl3.cpp	/^    GLuint          GlVersion;               \/\/ Extracted at runtime using GL_MAJOR_VERSION, G/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
GlfwClientApi	src/imgui/imgui_impl_glfw.cpp	/^enum GlfwClientApi$/;"	g	file:
GlfwClientApi_OpenGL	src/imgui/imgui_impl_glfw.cpp	/^    GlfwClientApi_OpenGL,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Unknown	src/imgui/imgui_impl_glfw.cpp	/^    GlfwClientApi_Unknown,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Vulkan	src/imgui/imgui_impl_glfw.cpp	/^    GlfwClientApi_Vulkan$/;"	e	enum:GlfwClientApi	file:
GlslVersionString	src/imgui/imgui_impl_opengl3.cpp	/^    char            GlslVersionString[32];   \/\/ Specified by user or detected based on compile/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:char[32]	file:
GlyphsCount	src/imgui/imgui_draw.cpp	/^    int                 GlyphsCount;        \/\/ Glyph count (excluding missing glyphs and glyph/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsCount	src/imgui/imgui_draw.cpp	/^    int                 GlyphsCount;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsHighest	src/imgui/imgui_draw.cpp	/^    int                 GlyphsHighest;      \/\/ Highest requested codepoint$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsHighest	src/imgui/imgui_draw.cpp	/^    int                 GlyphsHighest;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsList	src/imgui/imgui_draw.cpp	/^    ImVector<int>       GlyphsList;         \/\/ Glyph codepoints list (flattened version of Gly/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImVector<int>	file:
GlyphsSet	src/imgui/imgui_draw.cpp	/^    ImBitVector         GlyphsSet;          \/\/ Glyph bit map (random access, 1-bit per codepoi/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImBitVector	file:
GlyphsSet	src/imgui/imgui_draw.cpp	/^    ImBitVector         GlyphsSet;          \/\/ This is used to resolve collision when multiple/;"	m	struct:ImFontBuildDstData	typeref:typename:ImBitVector	file:
GroupOffset	src/imgui/imgui_internal.h	/^    ImVec1                  GroupOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
GroupStack	src/imgui/imgui_internal.h	/^    ImVector<ImGuiGroupData>GroupStack;                         \/\/ Stack for BeginGroup()\/End/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiGroupData>
GrowIndex	src/imgui/imgui_draw.cpp	/^void ImFont::GrowIndex(int new_size)$/;"	f	class:ImFont	typeref:typename:void
HAVE_WINAPIFAMILY	src/glad.cpp	/^    #define HAVE_WINAPIFAMILY /;"	d	file:
HAVE_WINAPIFAMILY	src/glad.cpp	/^  #define HAVE_WINAPIFAMILY /;"	d	file:
HIGH	src/typedefs.h	/^const bool HIGH = true;$/;"	v	typeref:typename:const bool
HasClipOrigin	src/imgui/imgui_impl_opengl3.cpp	/^    bool            HasClipOrigin;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
HasCloseButton	src/imgui/imgui_internal.h	/^    bool                    HasCloseButton;                     \/\/ Set when the window has a c/;"	m	struct:ImGuiWindow	typeref:typename:bool
HasSelection	src/imgui/imgui_internal.h	/^    bool        HasSelection() const        { return Stb.select_start != Stb.select_end; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:bool
HeldHeaderColumn	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         HeldHeaderColumn;           \/\/ Index of column header being he/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HelpMarker	src/imgui/imgui_demo.cpp	/^static void HelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
Hidden	src/imgui/imgui_internal.h	/^    bool                    Hidden;                             \/\/ Do not display (== HiddenFr/;"	m	struct:ImGuiWindow	typeref:typename:bool
HiddenFramesCanSkipItems	src/imgui/imgui_internal.h	/^    ImS8                    HiddenFramesCanSkipItems;           \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HiddenFramesCannotSkipItems	src/imgui/imgui_internal.h	/^    ImS8                    HiddenFramesCannotSkipItems;        \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HiddenFramesForRenderOnly	src/imgui/imgui_internal.h	/^    ImS8                    HiddenFramesForRenderOnly;          \/\/ Hide the window until frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
History	src/imgui/imgui_demo.cpp	/^    ImVector<char*>       History;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
HistoryPos	src/imgui/imgui_demo.cpp	/^    int                   HistoryPos;    \/\/ -1: new line, 0..History.Size-1 browsing history.$/;"	m	struct:ExampleAppConsole	typeref:typename:int	file:
HitTestHoleOffset	src/imgui/imgui_internal.h	/^    ImVec2ih                HitTestHoleOffset;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2ih
HitTestHoleSize	src/imgui/imgui_internal.h	/^    ImVec2ih                HitTestHoleSize;                    \/\/ Define an optional rectangu/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2ih
HookId	src/imgui/imgui_internal.h	/^    ImGuiID                     HookId;     \/\/ A unique ID assigned by AddContextHook()$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiID
HookIdNext	src/imgui/imgui_internal.h	/^    ImGuiID                             HookIdNext;             \/\/ Next available HookId$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
Hooks	src/imgui/imgui_internal.h	/^    ImVector<ImGuiContextHook>          Hooks;                  \/\/ Hooks for extensions (e.g. /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiContextHook>
HostBackupClipRect	src/imgui/imgui_internal.h	/^    ImRect              HostBackupClipRect;     \/\/ Backup of ClipRect during PushColumnsBackgr/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostBackupColumnsOffset	src/imgui/imgui_internal.h	/^    ImVec1                      HostBackupColumnsOffset;    \/\/ Backup of OuterWindow->DC.Colum/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec1
HostBackupCurrLineSize	src/imgui/imgui_internal.h	/^    ImVec2                      HostBackupCurrLineSize;     \/\/ Backup of InnerWindow->DC.CurrL/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupCursorMaxPos	src/imgui/imgui_internal.h	/^    ImVec2                      HostBackupCursorMaxPos;     \/\/ Backup of InnerWindow->DC.Curso/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupInnerClipRect	src/imgui/imgui_internal.h	/^    ImRect                      HostBackupInnerClipRect;    \/\/ Backup of InnerWindow->ClipRect/;"	m	struct:ImGuiTable	typeref:typename:ImRect
HostBackupItemWidth	src/imgui/imgui_internal.h	/^    float                       HostBackupItemWidth;        \/\/ Backup of OuterWindow->DC.ItemW/;"	m	struct:ImGuiTableTempData	typeref:typename:float
HostBackupItemWidthStackSize	src/imgui/imgui_internal.h	/^    int                         HostBackupItemWidthStackSize;\/\/Backup of OuterWindow->DC.ItemW/;"	m	struct:ImGuiTableTempData	typeref:typename:int
HostBackupParentWorkRect	src/imgui/imgui_internal.h	/^    ImRect                      HostBackupParentWorkRect;   \/\/ Backup of InnerWindow->ParentWo/;"	m	struct:ImGuiTableTempData	typeref:typename:ImRect
HostBackupParentWorkRect	src/imgui/imgui_internal.h	/^    ImRect              HostBackupParentWorkRect;\/\/Backup of WorkRect at the time of BeginColu/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostBackupPrevLineSize	src/imgui/imgui_internal.h	/^    ImVec2                      HostBackupPrevLineSize;     \/\/ Backup of InnerWindow->DC.PrevL/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupWorkRect	src/imgui/imgui_internal.h	/^    ImRect                      HostBackupWorkRect;         \/\/ Backup of InnerWindow->WorkRect/;"	m	struct:ImGuiTableTempData	typeref:typename:ImRect
HostClipRect	src/imgui/imgui_internal.h	/^    ImRect                      HostClipRect;               \/\/ This is used to check if we can/;"	m	struct:ImGuiTable	typeref:typename:ImRect
HostCursorMaxPosX	src/imgui/imgui_internal.h	/^    float               HostCursorMaxPosX;      \/\/ Backup of CursorMaxPos at the time of Begin/;"	m	struct:ImGuiOldColumns	typeref:typename:float
HostCursorPosY	src/imgui/imgui_internal.h	/^    float               HostCursorPosY;         \/\/ Backup of CursorPos at the time of BeginCol/;"	m	struct:ImGuiOldColumns	typeref:typename:float
HostIndentX	src/imgui/imgui_internal.h	/^    float                       HostIndentX;$/;"	m	struct:ImGuiTable	typeref:typename:float
HostInitialClipRect	src/imgui/imgui_internal.h	/^    ImRect              HostInitialClipRect;    \/\/ Backup of ClipRect at the time of BeginColu/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostSkipItems	src/imgui/imgui_internal.h	/^    bool                        HostSkipItems;              \/\/ Backup of InnerWindow->SkipItem/;"	m	struct:ImGuiTable	typeref:typename:bool
HoveredColumnBody	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         HoveredColumnBody;          \/\/ Index of column whose visible r/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HoveredColumnBorder	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         HoveredColumnBorder;        \/\/ Index of column whose right-bor/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HoveredId	src/imgui/imgui_internal.h	/^    ImGuiID                 HoveredId;                          \/\/ Hovered widget, filled duri/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdAllowOverlap	src/imgui/imgui_internal.h	/^    bool                    HoveredIdAllowOverlap;$/;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdDisabled	src/imgui/imgui_internal.h	/^    bool                    HoveredIdDisabled;                  \/\/ At least one widget passed /;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdNotActiveTimer	src/imgui/imgui_internal.h	/^    float                   HoveredIdNotActiveTimer;            \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredIdPreviousFrame	src/imgui/imgui_internal.h	/^    ImGuiID                 HoveredIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdPreviousFrameUsingMouseWheel	src/imgui/imgui_internal.h	/^    bool                    HoveredIdPreviousFrameUsingMouseWheel;$/;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdTimer	src/imgui/imgui_internal.h	/^    float                   HoveredIdTimer;                     \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredIdUsingMouseWheel	src/imgui/imgui_internal.h	/^    bool                    HoveredIdUsingMouseWheel;           \/\/ Hovered widget will use mou/;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*            HoveredWindow;                      \/\/ Window the mouse is hoverin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
HoveredWindowUnderMovingWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*            HoveredWindowUnderMovingWindow;     \/\/ Hovered window ignoring Mov/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ID	src/imgui/imgui_demo.cpp	/^    int         ID;$/;"	m	struct:__anonecc473760111::MyItem	typeref:typename:int	file:
ID	src/imgui/imgui_internal.h	/^    ImGuiID                     ID;                     \/\/ Set to 0 to invalidate\/delete the /;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiID
ID	src/imgui/imgui_internal.h	/^    ImGuiID                     ID;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiID
ID	src/imgui/imgui_internal.h	/^    ImGuiID                 ID;                                 \/\/ == ImHashStr(Name)$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ID	src/imgui/imgui_internal.h	/^    ImGuiID                 ID;                     \/\/ widget id owning the text state$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiID
ID	src/imgui/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiID
ID	src/imgui/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImGuiID
ID	src/imgui/imgui_internal.h	/^    ImGuiID             ID;                     \/\/ Zero for tab-bars used by docking$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
ID	src/imgui/imgui_internal.h	/^    ImGuiID             ID;             \/\/ Init,Move    \/\/ Best candidate item ID$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiID
ID	src/imgui/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImGuiID
ID	src/imgui/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiID
ID	src/imgui/imgui_internal.h	/^    ImGuiID     ID;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImGuiID
IDStack	src/imgui/imgui_internal.h	/^    ImVector<ImGuiID>       IDStack;                            \/\/ ID stack. ID are hashes see/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiID>
IMGL3W_IMPL	src/imgui/imgui_impl_opengl3.cpp	/^#define IMGL3W_IMPL$/;"	d	file:
IMGUI_CDECL	src/imgui/imgui_demo.cpp	/^#define IMGUI_CDECL /;"	d	file:
IMGUI_CDECL	src/imgui/imgui_demo.cpp	/^#define IMGUI_CDECL$/;"	d	file:
IMGUI_CDECL	src/imgui/imgui_internal.h	/^#define IMGUI_CDECL /;"	d
IMGUI_CDECL	src/imgui/imgui_internal.h	/^#define IMGUI_CDECL$/;"	d
IMGUI_DEBUG_INI_SETTINGS	src/imgui/imgui.cpp	/^#define IMGUI_DEBUG_INI_SETTINGS /;"	d	file:
IMGUI_DEBUG_LOG	src/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG(/;"	d
IMGUI_DEBUG_LOG_ACTIVEID	src/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_ACTIVEID(/;"	d
IMGUI_DEBUG_LOG_FOCUS	src/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_FOCUS(/;"	d
IMGUI_DEBUG_LOG_IO	src/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_IO(/;"	d
IMGUI_DEBUG_LOG_NAV	src/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_NAV(/;"	d
IMGUI_DEBUG_LOG_POPUP	src/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_POPUP(/;"	d
IMGUI_DEBUG_NAV_RECTS	src/imgui/imgui.cpp	/^#define IMGUI_DEBUG_NAV_RECTS /;"	d	file:
IMGUI_DEBUG_NAV_SCORING	src/imgui/imgui.cpp	/^#define IMGUI_DEBUG_NAV_SCORING /;"	d	file:
IMGUI_DEBUG_PRINTF	src/imgui/imgui_internal.h	/^#define IMGUI_DEBUG_PRINTF(/;"	d
IMGUI_DEFINE_MATH_OPERATORS	src/imgui/imgui.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	src/imgui/imgui_draw.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	src/imgui/imgui_tables.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	src/imgui/imgui_widgets.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEMO_MARKER	src/imgui/imgui_demo.cpp	/^#define IMGUI_DEMO_MARKER(/;"	d	file:
IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS	src/imgui/imgui_internal.h	/^#define IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS$/;"	d
IMGUI_DISABLE_TTY_FUNCTIONS	src/imgui/imgui_internal.h	/^#define IMGUI_DISABLE_TTY_FUNCTIONS /;"	d
IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS	src/imgui/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS	src/imgui/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_FUNCTIONS	src/imgui/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_FUNCTIONS$/;"	d	file:
IMGUI_ENABLE_SSE	src/imgui/imgui_internal.h	/^#define IMGUI_ENABLE_SSE$/;"	d
IMGUI_ENABLE_STB_TRUETYPE	src/imgui/imgui_internal.h	/^#define IMGUI_ENABLE_STB_TRUETYPE$/;"	d
IMGUI_IMPL_HAS_POLYGON_MODE	src/imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_HAS_POLYGON_MODE$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER	src/imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_EXTENSIONS	src/imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_EXTENSIONS$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART	src/imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET	src/imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET$/;"	d	file:
IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY	src/imgui/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY$/;"	d	file:
IMGUI_LAYER_H	src/imgui_layer.h	/^#define IMGUI_LAYER_H$/;"	d
IMGUI_STB_NAMESPACE	src/imgui/imgui_draw.cpp	/^namespace IMGUI_STB_NAMESPACE$/;"	n	file:
IMGUI_TABLE_MAX_COLUMNS	src/imgui/imgui_internal.h	/^#define IMGUI_TABLE_MAX_COLUMNS /;"	d
IMGUI_TABLE_MAX_DRAW_CHANNELS	src/imgui/imgui_internal.h	/^#define IMGUI_TABLE_MAX_DRAW_CHANNELS /;"	d
IMGUI_TEST_ENGINE_ITEM_ADD	src/imgui/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_ADD(/;"	d
IMGUI_TEST_ENGINE_ITEM_INFO	src/imgui/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_INFO(/;"	d
IMGUI_TEST_ENGINE_LOG	src/imgui/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_LOG(/;"	d
IM_ASSERT_PARANOID	src/imgui/imgui_internal.h	/^#define IM_ASSERT_PARANOID(/;"	d
IM_ASSERT_USER_ERROR	src/imgui/imgui_internal.h	/^#define IM_ASSERT_USER_ERROR(/;"	d
IM_CLAMP	src/imgui/imgui_demo.cpp	/^#define IM_CLAMP(/;"	d	file:
IM_COL32_DISABLE	src/imgui/imgui_internal.h	/^#define IM_COL32_DISABLE /;"	d
IM_DEBUG_BREAK	src/imgui/imgui_internal.h	/^#define IM_DEBUG_BREAK(/;"	d
IM_DRAWLIST_ARCFAST_SAMPLE_MAX	src/imgui/imgui_internal.h	/^#define IM_DRAWLIST_ARCFAST_SAMPLE_MAX /;"	d
IM_DRAWLIST_ARCFAST_TABLE_SIZE	src/imgui/imgui_internal.h	/^#define IM_DRAWLIST_ARCFAST_TABLE_SIZE /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC	src/imgui/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_ERROR	src/imgui/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_ERROR(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R	src/imgui/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX	src/imgui/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN	src/imgui/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN /;"	d
IM_F32_TO_INT8_SAT	src/imgui/imgui_internal.h	/^#define IM_F32_TO_INT8_SAT(/;"	d
IM_F32_TO_INT8_UNBOUND	src/imgui/imgui_internal.h	/^#define IM_F32_TO_INT8_UNBOUND(/;"	d
IM_FIXNORMAL2F	src/imgui/imgui_draw.cpp	/^#define IM_FIXNORMAL2F(/;"	d	file:
IM_FIXNORMAL2F_MAX_INVLEN2	src/imgui/imgui_draw.cpp	/^#define IM_FIXNORMAL2F_MAX_INVLEN2 /;"	d	file:
IM_FLOOR	src/imgui/imgui_internal.h	/^#define IM_FLOOR(/;"	d
IM_MAX	src/imgui/imgui_demo.cpp	/^#define IM_MAX(/;"	d	file:
IM_MEMALIGN	src/imgui/imgui_internal.h	/^#define IM_MEMALIGN(/;"	d
IM_MIN	src/imgui/imgui_demo.cpp	/^#define IM_MIN(/;"	d	file:
IM_MSVC_WARNING_SUPPRESS	src/imgui/imgui_internal.h	/^#define IM_MSVC_WARNING_SUPPRESS(/;"	d
IM_NEWLINE	src/imgui/imgui_demo.cpp	/^#define IM_NEWLINE /;"	d	file:
IM_NEWLINE	src/imgui/imgui_internal.h	/^#define IM_NEWLINE /;"	d
IM_NORMALIZE2F_OVER_ZERO	src/imgui/imgui_draw.cpp	/^#define IM_NORMALIZE2F_OVER_ZERO(/;"	d	file:
IM_PI	src/imgui/imgui_internal.h	/^#define IM_PI /;"	d
IM_PRId64	src/imgui/imgui_demo.cpp	/^#define IM_PRId64 /;"	d	file:
IM_PRIu64	src/imgui/imgui_demo.cpp	/^#define IM_PRIu64 /;"	d	file:
IM_ROUND	src/imgui/imgui_internal.h	/^#define IM_ROUND(/;"	d
IM_ROUNDUP_TO_EVEN	src/imgui/imgui_internal.h	/^#define IM_ROUNDUP_TO_EVEN(/;"	d
IM_S16_MAX	src/imgui/imgui_widgets.cpp	/^static const signed short   IM_S16_MAX = 32767;$/;"	v	typeref:typename:const signed short	file:
IM_S16_MIN	src/imgui/imgui_widgets.cpp	/^static const signed short   IM_S16_MIN = -32768;$/;"	v	typeref:typename:const signed short	file:
IM_S32_MAX	src/imgui/imgui_widgets.cpp	/^static const ImS32          IM_S32_MAX = INT_MAX;    \/\/ (2147483647), (0x7FFFFFFF)$/;"	v	typeref:typename:const ImS32	file:
IM_S32_MIN	src/imgui/imgui_widgets.cpp	/^static const ImS32          IM_S32_MIN = INT_MIN;    \/\/ (-2147483647 - 1), (0x80000000);$/;"	v	typeref:typename:const ImS32	file:
IM_S64_MAX	src/imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = 9223372036854775807LL;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MAX	src/imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = LLONG_MAX;  \/\/ (9223372036854775807ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	src/imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = -9223372036854775807LL - 1;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	src/imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = LLONG_MIN;  \/\/ (-9223372036854775807ll - 1ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S8_MAX	src/imgui/imgui_widgets.cpp	/^static const signed char    IM_S8_MAX  = 127;$/;"	v	typeref:typename:const signed char	file:
IM_S8_MIN	src/imgui/imgui_widgets.cpp	/^static const signed char    IM_S8_MIN  = -128;$/;"	v	typeref:typename:const signed char	file:
IM_STATIC_ASSERT	src/imgui/imgui_internal.h	/^#define IM_STATIC_ASSERT(/;"	d
IM_TABSIZE	src/imgui/imgui_internal.h	/^#define IM_TABSIZE /;"	d
IM_U16_MAX	src/imgui/imgui_widgets.cpp	/^static const unsigned short IM_U16_MAX = 0xFFFF;$/;"	v	typeref:typename:const unsigned short	file:
IM_U16_MIN	src/imgui/imgui_widgets.cpp	/^static const unsigned short IM_U16_MIN = 0;$/;"	v	typeref:typename:const unsigned short	file:
IM_U32_MAX	src/imgui/imgui_widgets.cpp	/^static const ImU32          IM_U32_MAX = UINT_MAX;   \/\/ (0xFFFFFFFF)$/;"	v	typeref:typename:const ImU32	file:
IM_U32_MIN	src/imgui/imgui_widgets.cpp	/^static const ImU32          IM_U32_MIN = 0;$/;"	v	typeref:typename:const ImU32	file:
IM_U64_MAX	src/imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = (2ULL * 9223372036854775807LL + 1);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MAX	src/imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = ULLONG_MAX; \/\/ (0xFFFFFFFFFFFFFFFFull);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MIN	src/imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MIN = 0;$/;"	v	typeref:typename:const ImU64	file:
IM_U8_MAX	src/imgui/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MAX  = 0xFF;$/;"	v	typeref:typename:const unsigned char	file:
IM_U8_MIN	src/imgui/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MIN  = 0;$/;"	v	typeref:typename:const unsigned char	file:
INCLUDE_STB_TEXTEDIT_H	src/imgui/imstb_textedit.h	/^#define INCLUDE_STB_TEXTEDIT_H$/;"	d
IO	src/imgui/imgui_internal.h	/^    ImGuiIO                 IO;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiIO
IO_MEM_HIGH	src/memory.h	/^    const u16 IO_MEM_HIGH        = 0x7FFF;$/;"	v	namespace:Layout	typeref:typename:const u16
IO_MEM_LOW	src/memory.h	/^    const u16 IO_MEM_LOW         = 0x4000;$/;"	v	namespace:Layout	typeref:typename:const u16
IO_PAGE_HIGH	src/memory.h	/^    const u16 IO_PAGE_HIGH       = 0x16FF;$/;"	v	namespace:Layout	typeref:typename:const u16
IO_PAGE_LOW	src/memory.h	/^    const u16 IO_PAGE_LOW        = 0x1600;$/;"	v	namespace:Layout	typeref:typename:const u16
IRQ_BRK_VECTOR	src/memory.h	/^    const u16 IRQ_BRK_VECTOR     = 0xFFFE; \/\/ 2 bytes$/;"	v	namespace:Layout	typeref:typename:const u16
IS_UWP	src/glad.cpp	/^    #define IS_UWP /;"	d	file:
IdealMaxPos	src/imgui/imgui_internal.h	/^    ImVec2                  IdealMaxPos;            \/\/ Used to implicitly calculate ContentSiz/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
ImAbs	src/imgui/imgui_internal.h	/^static inline double ImAbs(double x)            { return fabs(x); }$/;"	f	typeref:typename:double
ImAbs	src/imgui/imgui_internal.h	/^static inline float  ImAbs(float x)             { return fabsf(x); }$/;"	f	typeref:typename:float
ImAbs	src/imgui/imgui_internal.h	/^static inline int    ImAbs(int x)               { return x < 0 ? -x : x; }$/;"	f	typeref:typename:int
ImAcos	src/imgui/imgui_internal.h	/^#define ImAcos(/;"	d
ImAcos01	src/imgui/imgui_draw.cpp	/^static inline float ImAcos01(float x)$/;"	f	typeref:typename:float	file:
ImAddClampOverflow	src/imgui/imgui_internal.h	/^template<typename T> static inline T ImAddClampOverflow(T a, T b, T mn, T mx)   { if (b < 0 && (/;"	f	typeref:typename:T
ImAlphaBlendColors	src/imgui/imgui.cpp	/^IMGUI_API ImU32 ImAlphaBlendColors(ImU32 col_a, ImU32 col_b)$/;"	f	typeref:typename:IMGUI_API ImU32
ImAtan2	src/imgui/imgui_internal.h	/^#define ImAtan2(/;"	d
ImAtof	src/imgui/imgui_internal.h	/^#define ImAtof(/;"	d
ImAtoi	src/imgui/imgui_widgets.cpp	/^static const char* ImAtoi(const char* src, TYPE* output)$/;"	f	typeref:typename:const char *	file:
ImBezierCubicCalc	src/imgui/imgui_draw.cpp	/^ImVec2 ImBezierCubicCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4,/;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPoint	src/imgui/imgui.cpp	/^ImVec2 ImBezierCubicClosestPoint(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImV/;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPointCasteljau	src/imgui/imgui.cpp	/^ImVec2 ImBezierCubicClosestPointCasteljau(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, /;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPointCasteljauStep	src/imgui/imgui.cpp	/^static void ImBezierCubicClosestPointCasteljauStep(const ImVec2& p, ImVec2& p_closest, ImVec2& p/;"	f	typeref:typename:void	file:
ImBezierQuadraticCalc	src/imgui/imgui_draw.cpp	/^ImVec2 ImBezierQuadraticCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, float t)$/;"	f	typeref:typename:ImVec2
ImBitArray	src/imgui/imgui_internal.h	/^    ImBitArray()                                { ClearAllBits(); }$/;"	f	struct:ImBitArray
ImBitArray	src/imgui/imgui_internal.h	/^struct ImBitArray$/;"	s
ImBitArrayClearBit	src/imgui/imgui_internal.h	/^inline void     ImBitArrayClearBit(ImU32* arr, int n)           { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:void
ImBitArrayForNamedKeys	src/imgui/imgui_internal.h	/^typedef ImBitArray<ImGuiKey_NamedKey_COUNT, -ImGuiKey_NamedKey_BEGIN>    ImBitArrayForNamedKeys;$/;"	t	typeref:typename:ImBitArray<ImGuiKey_NamedKey_COUNT,-ImGuiKey_NamedKey_BEGIN>
ImBitArraySetBit	src/imgui/imgui_internal.h	/^inline void     ImBitArraySetBit(ImU32* arr, int n)             { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:void
ImBitArraySetBitRange	src/imgui/imgui_internal.h	/^inline void     ImBitArraySetBitRange(ImU32* arr, int n, int n2) \/\/ Works on range [n..n2)$/;"	f	typeref:typename:void
ImBitArrayTestBit	src/imgui/imgui_internal.h	/^inline bool     ImBitArrayTestBit(const ImU32* arr, int n)      { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_RESTORE bool
ImBitVector	src/imgui/imgui_internal.h	/^struct IMGUI_API ImBitVector$/;"	s
ImCeil	src/imgui/imgui_internal.h	/^#define ImCeil(/;"	d
ImCharIsBlankA	src/imgui/imgui_internal.h	/^static inline bool      ImCharIsBlankA(char c)          { return c == ' ' || c == '\\t'; }$/;"	f	typeref:typename:bool
ImCharIsBlankW	src/imgui/imgui_internal.h	/^static inline bool      ImCharIsBlankW(unsigned int c)  { return c == ' ' || c == '\\t' || c == /;"	f	typeref:typename:bool
ImChunkStream	src/imgui/imgui_internal.h	/^struct ImChunkStream$/;"	s
ImClamp	src/imgui/imgui_internal.h	/^static inline ImVec2 ImClamp(const ImVec2& v, const ImVec2& mn, ImVec2 mx)      { return ImVec2(/;"	f	typeref:typename:ImVec2
ImClamp	src/imgui/imgui_internal.h	/^template<typename T> static inline T ImClamp(T v, T mn, T mx)                   { return (v < mn/;"	f	typeref:typename:T
ImCos	src/imgui/imgui_internal.h	/^#define ImCos(/;"	d
ImDot	src/imgui/imgui_internal.h	/^static inline float  ImDot(const ImVec2& a, const ImVec2& b)                    { return a.x * b/;"	f	typeref:typename:float
ImDrawCmd_AreSequentialIdxOffset	src/imgui/imgui_draw.cpp	/^#define ImDrawCmd_AreSequentialIdxOffset(/;"	d	file:
ImDrawCmd_HeaderCompare	src/imgui/imgui_draw.cpp	/^#define ImDrawCmd_HeaderCompare(/;"	d	file:
ImDrawCmd_HeaderCopy	src/imgui/imgui_draw.cpp	/^#define ImDrawCmd_HeaderCopy(/;"	d	file:
ImDrawCmd_HeaderSize	src/imgui/imgui_draw.cpp	/^#define ImDrawCmd_HeaderSize /;"	d	file:
ImDrawDataBuilder	src/imgui/imgui_internal.h	/^struct ImDrawDataBuilder$/;"	s
ImDrawListSharedData	src/imgui/imgui_draw.cpp	/^ImDrawListSharedData::ImDrawListSharedData()$/;"	f	class:ImDrawListSharedData
ImDrawListSharedData	src/imgui/imgui_internal.h	/^struct IMGUI_API ImDrawListSharedData$/;"	s
ImFabs	src/imgui/imgui_internal.h	/^#define ImFabs(/;"	d
ImFileClose	src/imgui/imgui.cpp	/^bool    ImFileClose(ImFileHandle f)     { return fclose(f) == 0; }$/;"	f	typeref:typename:bool
ImFileClose	src/imgui/imgui_internal.h	/^static inline bool          ImFileClose(ImFileHandle)                               { return fal/;"	f	typeref:typename:bool
ImFileGetSize	src/imgui/imgui.cpp	/^ImU64   ImFileGetSize(ImFileHandle f)   { long off = 0, sz = 0; return ((off = ftell(f)) != -1 &/;"	f	typeref:typename:ImU64
ImFileGetSize	src/imgui/imgui_internal.h	/^static inline ImU64         ImFileGetSize(ImFileHandle)                             { return (Im/;"	f	typeref:typename:ImU64
ImFileHandle	src/imgui/imgui_internal.h	/^typedef FILE* ImFileHandle;$/;"	t	typeref:typename:FILE *
ImFileHandle	src/imgui/imgui_internal.h	/^typedef void* ImFileHandle;$/;"	t	typeref:typename:void *
ImFileLoadToMemory	src/imgui/imgui.cpp	/^void*   ImFileLoadToMemory(const char* filename, const char* mode, size_t* out_file_size, int pa/;"	f	typeref:typename:void *
ImFileOpen	src/imgui/imgui.cpp	/^ImFileHandle ImFileOpen(const char* filename, const char* mode)$/;"	f	typeref:typename:ImFileHandle
ImFileOpen	src/imgui/imgui_internal.h	/^static inline ImFileHandle  ImFileOpen(const char*, const char*)                    { return NUL/;"	f	typeref:typename:ImFileHandle
ImFileRead	src/imgui/imgui.cpp	/^ImU64   ImFileRead(void* data, ImU64 sz, ImU64 count, ImFileHandle f)           { return fread(d/;"	f	typeref:typename:ImU64
ImFileRead	src/imgui/imgui_internal.h	/^static inline ImU64         ImFileRead(void*, ImU64, ImU64, ImFileHandle)           { return 0; /;"	f	typeref:typename:ImU64
ImFileWrite	src/imgui/imgui.cpp	/^ImU64   ImFileWrite(const void* data, ImU64 sz, ImU64 count, ImFileHandle f)    { return fwrite(/;"	f	typeref:typename:ImU64
ImFileWrite	src/imgui/imgui_internal.h	/^static inline ImU64         ImFileWrite(const void*, ImU64, ImU64, ImFileHandle)    { return 0; /;"	f	typeref:typename:ImU64
ImFloor	src/imgui/imgui_internal.h	/^static inline ImVec2 ImFloor(const ImVec2& v)                                   { return ImVec2(/;"	f	typeref:typename:ImVec2
ImFloor	src/imgui/imgui_internal.h	/^static inline float  ImFloor(float f)                                           { return (float)/;"	f	typeref:typename:float
ImFloorSigned	src/imgui/imgui_internal.h	/^static inline ImVec2 ImFloorSigned(const ImVec2& v)                             { return ImVec2(/;"	f	typeref:typename:ImVec2
ImFloorSigned	src/imgui/imgui_internal.h	/^static inline float  ImFloorSigned(float f)                                     { return (float)/;"	f	typeref:typename:float
ImFmod	src/imgui/imgui_internal.h	/^#define ImFmod(/;"	d
ImFont	src/imgui/imgui_draw.cpp	/^ImFont::ImFont()$/;"	f	class:ImFont
ImFontAtlas	src/imgui/imgui_draw.cpp	/^ImFontAtlas::ImFontAtlas()$/;"	f	class:ImFontAtlas
ImFontAtlasBuildFinish	src/imgui/imgui_draw.cpp	/^void ImFontAtlasBuildFinish(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildInit	src/imgui/imgui_draw.cpp	/^void ImFontAtlasBuildInit(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyCalcLookupTable	src/imgui/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_brighten_/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyRectAlpha8	src/imgui/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char* pixels/;"	f	typeref:typename:void
ImFontAtlasBuildPackCustomRects	src/imgui/imgui_draw.cpp	/^void ImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, void* stbrp_context_opaque)$/;"	f	typeref:typename:void
ImFontAtlasBuildRender32bppRectFromString	src/imgui/imgui_draw.cpp	/^void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, c/;"	f	typeref:typename:void
ImFontAtlasBuildRender8bppRectFromString	src/imgui/imgui_draw.cpp	/^void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, co/;"	f	typeref:typename:void
ImFontAtlasBuildRenderDefaultTexData	src/imgui/imgui_draw.cpp	/^static void ImFontAtlasBuildRenderDefaultTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildRenderLinesTexData	src/imgui/imgui_draw.cpp	/^static void ImFontAtlasBuildRenderLinesTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildSetupFont	src/imgui/imgui_draw.cpp	/^void ImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, floa/;"	f	typeref:typename:void
ImFontAtlasBuildWithStbTruetype	src/imgui/imgui_draw.cpp	/^static bool ImFontAtlasBuildWithStbTruetype(ImFontAtlas* atlas)$/;"	f	typeref:typename:bool	file:
ImFontAtlasGetBuilderForStbTruetype	src/imgui/imgui_draw.cpp	/^const ImFontBuilderIO* ImFontAtlasGetBuilderForStbTruetype()$/;"	f	typeref:typename:const ImFontBuilderIO *
ImFontBuildDstData	src/imgui/imgui_draw.cpp	/^struct ImFontBuildDstData$/;"	s	file:
ImFontBuildSrcData	src/imgui/imgui_draw.cpp	/^struct ImFontBuildSrcData$/;"	s	file:
ImFontBuilderIO	src/imgui/imgui_internal.h	/^struct ImFontBuilderIO$/;"	s
ImFontConfig	src/imgui/imgui_draw.cpp	/^ImFontConfig::ImFontConfig()$/;"	f	class:ImFontConfig
ImFormatString	src/imgui/imgui.cpp	/^int ImFormatString(char* buf, size_t buf_size, const char* fmt, ...)$/;"	f	typeref:typename:int
ImFormatStringToTempBuffer	src/imgui/imgui.cpp	/^void ImFormatStringToTempBuffer(const char** out_buf, const char** out_buf_end, const char* fmt,/;"	f	typeref:typename:void
ImFormatStringToTempBufferV	src/imgui/imgui.cpp	/^void ImFormatStringToTempBufferV(const char** out_buf, const char** out_buf_end, const char* fmt/;"	f	typeref:typename:void
ImFormatStringV	src/imgui/imgui.cpp	/^int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)$/;"	f	typeref:typename:int
ImGetDirQuadrantFromDelta	src/imgui/imgui.cpp	/^ImGuiDir ImGetDirQuadrantFromDelta(float dx, float dy)$/;"	f	typeref:typename:ImGuiDir
ImGui	src/imgui/imgui.cpp	/^namespace ImGui$/;"	n	file:
ImGui	src/imgui/imgui_demo.cpp	/^namespace ImGui { IMGUI_API void ShowFontAtlas(ImFontAtlas* atlas); }$/;"	n	file:
ImGui	src/imgui/imgui_demo.cpp	/^namespace ImGui { extern ImGuiKeyData* GetKeyData(ImGuiKey key); }$/;"	n	file:
ImGui	src/imgui/imgui_internal.h	/^namespace ImGui$/;"	n
ImGui	src/imgui/imgui_widgets.cpp	/^namespace ImGui$/;"	n	file:
ImGuiActivateFlags	src/imgui/imgui_internal.h	/^typedef int ImGuiActivateFlags;         \/\/ -> enum ImGuiActivateFlags_      \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiActivateFlags_	src/imgui/imgui_internal.h	/^enum ImGuiActivateFlags_$/;"	g
ImGuiActivateFlags_None	src/imgui/imgui_internal.h	/^    ImGuiActivateFlags_None                 = 0,$/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_PreferInput	src/imgui/imgui_internal.h	/^    ImGuiActivateFlags_PreferInput          = 1 << 0,       \/\/ Favor activation that requires /;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_PreferTweak	src/imgui/imgui_internal.h	/^    ImGuiActivateFlags_PreferTweak          = 1 << 1,       \/\/ Favor activation for tweaking w/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_TryToPreserveState	src/imgui/imgui_internal.h	/^    ImGuiActivateFlags_TryToPreserveState   = 1 << 2        \/\/ Request widget to preserve stat/;"	e	enum:ImGuiActivateFlags_
ImGuiAxis	src/imgui/imgui_internal.h	/^enum ImGuiAxis$/;"	g
ImGuiAxis_None	src/imgui/imgui_internal.h	/^    ImGuiAxis_None = -1,$/;"	e	enum:ImGuiAxis
ImGuiAxis_X	src/imgui/imgui_internal.h	/^    ImGuiAxis_X = 0,$/;"	e	enum:ImGuiAxis
ImGuiAxis_Y	src/imgui/imgui_internal.h	/^    ImGuiAxis_Y = 1$/;"	e	enum:ImGuiAxis
ImGuiButtonFlagsPrivate_	src/imgui/imgui_internal.h	/^enum ImGuiButtonFlagsPrivate_$/;"	g
ImGuiButtonFlags_AlignTextBaseLine	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_AlignTextBaseLine      = 1 << 15,  \/\/ vertically align button to match te/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_AllowItemOverlap	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_AllowItemOverlap       = 1 << 12,  \/\/ require previous frame HoveredId to/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_DontClosePopups	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_DontClosePopups        = 1 << 13,  \/\/ disable automatically closing paren/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_FlattenChildren	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_FlattenChildren        = 1 << 11,  \/\/ allow interactions even if a child /;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoHoldingActiveId	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoHoldingActiveId      = 1 << 17,  \/\/ don't set ActiveId while holding th/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoHoveredOnFocus	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoHoveredOnFocus       = 1 << 19,  \/\/ don't report as hovered when nav fo/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoKeyModifiers	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoKeyModifiers         = 1 << 16,  \/\/ disable mouse interaction if a key /;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoNavFocus	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoNavFocus             = 1 << 18,  \/\/ don't override navigation focus whe/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClick	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClick         = 1 << 4,   \/\/ return true on click (mouse down ev/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClickRelease	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickRelease  = 1 << 5,   \/\/ [Default] return true on click + re/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClickReleaseAnywhere	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickReleaseAnywhere = 1 << 6, \/\/ return true on click + release/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDefault_	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDefault_      = ImGuiButtonFlags_PressedOnClickRelease$/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDoubleClick	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDoubleClick   = 1 << 8,   \/\/ return true on double-click (defaul/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDragDropHold	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDragDropHold  = 1 << 9,   \/\/ return true when held into while we/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnMask_	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnMask_         = ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnRelease	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnRelease       = 1 << 7,   \/\/ return true on release (default req/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_Repeat	src/imgui/imgui_internal.h	/^    ImGuiButtonFlags_Repeat                 = 1 << 10,  \/\/ hold to repeat$/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiColorMod	src/imgui/imgui_internal.h	/^struct ImGuiColorMod$/;"	s
ImGuiColumnsFlags_GrowParentContentsSize	src/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_GrowParentContentsSize    = ImGuiOldColumnFlags_GrowParentContentsSize$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiColumnsFlags_NoBorder	src/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoBorder                  = ImGuiOldColumnFlags_NoBorder,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiColumnsFlags_NoForceWithinWindow	src/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoForceWithinWindow       = ImGuiOldColumnFlags_NoForceWithinWindow,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiColumnsFlags_NoPreserveWidths	src/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoPreserveWidths          = ImGuiOldColumnFlags_NoPreserveWidths,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiColumnsFlags_NoResize	src/imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoResize                  = ImGuiOldColumnFlags_NoResize,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiColumnsFlags_None	src/imgui/imgui_internal.h	/^    , ImGuiColumnsFlags_None                    = ImGuiOldColumnFlags_None,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiComboFlagsPrivate_	src/imgui/imgui_internal.h	/^enum ImGuiComboFlagsPrivate_$/;"	g
ImGuiComboFlags_CustomPreview	src/imgui/imgui_internal.h	/^    ImGuiComboFlags_CustomPreview           = 1 << 20   \/\/ enable BeginComboPreview()$/;"	e	enum:ImGuiComboFlagsPrivate_
ImGuiComboPreviewData	src/imgui/imgui_internal.h	/^    ImGuiComboPreviewData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiComboPreviewData
ImGuiComboPreviewData	src/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiComboPreviewData$/;"	s
ImGuiContext	src/imgui/imgui_internal.h	/^    ImGuiContext(ImFontAtlas* shared_font_atlas)$/;"	f	struct:ImGuiContext
ImGuiContext	src/imgui/imgui_internal.h	/^struct ImGuiContext$/;"	s
ImGuiContextHook	src/imgui/imgui_internal.h	/^    ImGuiContextHook()          { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiContextHook
ImGuiContextHook	src/imgui/imgui_internal.h	/^struct ImGuiContextHook$/;"	s
ImGuiContextHookCallback	src/imgui/imgui_internal.h	/^typedef void (*ImGuiContextHookCallback)(ImGuiContext* ctx, ImGuiContextHook* hook);$/;"	t	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiContextHook * hook)
ImGuiContextHookType	src/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	g
ImGuiContextHookType_EndFramePost	src/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_EndFramePre	src/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_NewFramePost	src/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_NewFramePre	src/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_PendingRemoval_	src/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_RenderPost	src/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_RenderPre	src/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_Shutdown	src/imgui/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiDataTypeInfo	src/imgui/imgui_internal.h	/^struct ImGuiDataTypeInfo$/;"	s
ImGuiDataTypePrivate_	src/imgui/imgui_internal.h	/^enum ImGuiDataTypePrivate_$/;"	g
ImGuiDataTypeTempStorage	src/imgui/imgui_internal.h	/^struct ImGuiDataTypeTempStorage$/;"	s
ImGuiDataType_ID	src/imgui/imgui_internal.h	/^    ImGuiDataType_ID$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_Pointer	src/imgui/imgui_internal.h	/^    ImGuiDataType_Pointer,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_String	src/imgui/imgui_internal.h	/^    ImGuiDataType_String = ImGuiDataType_COUNT + 1,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDebugLogFlags	src/imgui/imgui_internal.h	/^typedef int ImGuiDebugLogFlags;         \/\/ -> enum ImGuiDebugLogFlags_      \/\/ Flags: for Sh/;"	t	typeref:typename:int
ImGuiDebugLogFlags_	src/imgui/imgui_internal.h	/^enum ImGuiDebugLogFlags_$/;"	g
ImGuiDebugLogFlags_EventActiveId	src/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_EventActiveId    = 1 << 0,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventFocus	src/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_EventFocus       = 1 << 1,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventIO	src/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_EventIO          = 1 << 4,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventMask_	src/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_EventMask_       = ImGuiDebugLogFlags_EventActiveId  | ImGuiDebugLogFlags/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventNav	src/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_EventNav         = 1 << 3,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventPopup	src/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_EventPopup       = 1 << 2,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_None	src/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_None             = 0,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_OutputToTTY	src/imgui/imgui_internal.h	/^    ImGuiDebugLogFlags_OutputToTTY      = 1 << 10   \/\/ Also send output to TTY$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDemoMarkerCallback	src/imgui/imgui_demo.cpp	/^typedef void (*ImGuiDemoMarkerCallback)(const char* file, int line, const char* section, void* u/;"	t	typeref:typename:void (*)(const char * file,int line,const char * section,void * user_data)	file:
ImGuiErrorLogCallback	src/imgui/imgui_internal.h	/^typedef void (*ImGuiErrorLogCallback)(void* user_data, const char* fmt, ...);$/;"	t	typeref:typename:void (*)(void * user_data,const char * fmt,...)
ImGuiGroupData	src/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiGroupData$/;"	s
ImGuiIO	src/imgui/imgui.cpp	/^ImGuiIO::ImGuiIO()$/;"	f	class:ImGuiIO
ImGuiInputEvent	src/imgui/imgui_internal.h	/^    ImGuiInputEvent() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputEvent
ImGuiInputEvent	src/imgui/imgui_internal.h	/^struct ImGuiInputEvent$/;"	s
ImGuiInputEventAppFocused	src/imgui/imgui_internal.h	/^struct ImGuiInputEventAppFocused    { bool Focused; };$/;"	s
ImGuiInputEventKey	src/imgui/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	s
ImGuiInputEventMouseButton	src/imgui/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; };$/;"	s
ImGuiInputEventMousePos	src/imgui/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; };$/;"	s
ImGuiInputEventMouseWheel	src/imgui/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; };$/;"	s
ImGuiInputEventText	src/imgui/imgui_internal.h	/^struct ImGuiInputEventText          { unsigned int Char; };$/;"	s
ImGuiInputEventType	src/imgui/imgui_internal.h	/^enum ImGuiInputEventType$/;"	g
ImGuiInputEventType_COUNT	src/imgui/imgui_internal.h	/^    ImGuiInputEventType_COUNT$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Focus	src/imgui/imgui_internal.h	/^    ImGuiInputEventType_Focus,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Key	src/imgui/imgui_internal.h	/^    ImGuiInputEventType_Key,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MouseButton	src/imgui/imgui_internal.h	/^    ImGuiInputEventType_MouseButton,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MousePos	src/imgui/imgui_internal.h	/^    ImGuiInputEventType_MousePos,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MouseWheel	src/imgui/imgui_internal.h	/^    ImGuiInputEventType_MouseWheel,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_None	src/imgui/imgui_internal.h	/^    ImGuiInputEventType_None = 0,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Text	src/imgui/imgui_internal.h	/^    ImGuiInputEventType_Text,$/;"	e	enum:ImGuiInputEventType
ImGuiInputSource	src/imgui/imgui_internal.h	/^enum ImGuiInputSource$/;"	g
ImGuiInputSource_COUNT	src/imgui/imgui_internal.h	/^    ImGuiInputSource_COUNT$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Clipboard	src/imgui/imgui_internal.h	/^    ImGuiInputSource_Clipboard,     \/\/ Currently only used by InputText()$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Gamepad	src/imgui/imgui_internal.h	/^    ImGuiInputSource_Gamepad,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Keyboard	src/imgui/imgui_internal.h	/^    ImGuiInputSource_Keyboard,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Mouse	src/imgui/imgui_internal.h	/^    ImGuiInputSource_Mouse,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Nav	src/imgui/imgui_internal.h	/^    ImGuiInputSource_Nav,           \/\/ Stored in g.ActiveIdSource only$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_None	src/imgui/imgui_internal.h	/^    ImGuiInputSource_None = 0,$/;"	e	enum:ImGuiInputSource
ImGuiInputTextCallbackData	src/imgui/imgui_widgets.cpp	/^ImGuiInputTextCallbackData::ImGuiInputTextCallbackData()$/;"	f	class:ImGuiInputTextCallbackData
ImGuiInputTextFlagsPrivate_	src/imgui/imgui_internal.h	/^enum ImGuiInputTextFlagsPrivate_$/;"	g
ImGuiInputTextFlags_MergedItem	src/imgui/imgui_internal.h	/^    ImGuiInputTextFlags_MergedItem          = 1 << 28   \/\/ For internal use by TempInputText()/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_Multiline	src/imgui/imgui_internal.h	/^    ImGuiInputTextFlags_Multiline           = 1 << 26,  \/\/ For internal use by InputTextMultil/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_NoMarkEdited	src/imgui/imgui_internal.h	/^    ImGuiInputTextFlags_NoMarkEdited        = 1 << 27,  \/\/ For internal use by functions using/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextState	src/imgui/imgui_internal.h	/^    ImGuiInputTextState()                   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextState
ImGuiInputTextState	src/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiInputTextState$/;"	s
ImGuiItemFlags	src/imgui/imgui_internal.h	/^typedef int ImGuiItemFlags;             \/\/ -> enum ImGuiItemFlags_          \/\/ Flags: for Pu/;"	t	typeref:typename:int
ImGuiItemFlags_	src/imgui/imgui_internal.h	/^enum ImGuiItemFlags_$/;"	g
ImGuiItemFlags_ButtonRepeat	src/imgui/imgui_internal.h	/^    ImGuiItemFlags_ButtonRepeat             = 1 << 1,  \/\/ false     \/\/ Button() will return /;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Disabled	src/imgui/imgui_internal.h	/^    ImGuiItemFlags_Disabled                 = 1 << 2,  \/\/ false     \/\/ Disable interactions /;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Inputable	src/imgui/imgui_internal.h	/^    ImGuiItemFlags_Inputable                = 1 << 8   \/\/ false     \/\/ [WIP] Auto-activate i/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_MixedValue	src/imgui/imgui_internal.h	/^    ImGuiItemFlags_MixedValue               = 1 << 6,  \/\/ false     \/\/ [BETA] Represent a mi/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNav	src/imgui/imgui_internal.h	/^    ImGuiItemFlags_NoNav                    = 1 << 3,  \/\/ false     \/\/ Disable keyboard\/gam/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNavDefaultFocus	src/imgui/imgui_internal.h	/^    ImGuiItemFlags_NoNavDefaultFocus        = 1 << 4,  \/\/ false     \/\/ Disable item being a /;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoTabStop	src/imgui/imgui_internal.h	/^    ImGuiItemFlags_NoTabStop                = 1 << 0,  \/\/ false     \/\/ Disable keyboard tabb/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_None	src/imgui/imgui_internal.h	/^    ImGuiItemFlags_None                     = 0,$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_ReadOnly	src/imgui/imgui_internal.h	/^    ImGuiItemFlags_ReadOnly                 = 1 << 7,  \/\/ false     \/\/ [ALPHA] Allow hoverin/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_SelectableDontClosePopup	src/imgui/imgui_internal.h	/^    ImGuiItemFlags_SelectableDontClosePopup = 1 << 5,  \/\/ false     \/\/ Disable MenuItem\/Sel/;"	e	enum:ImGuiItemFlags_
ImGuiItemStatusFlags	src/imgui/imgui_internal.h	/^typedef int ImGuiItemStatusFlags;       \/\/ -> enum ImGuiItemStatusFlags_    \/\/ Flags: for DC/;"	t	typeref:typename:int
ImGuiItemStatusFlags_	src/imgui/imgui_internal.h	/^enum ImGuiItemStatusFlags_$/;"	g
ImGuiItemStatusFlags_Checkable	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Checkable          = 1 << 22,  \/\/ Item is a checkable (e.g. CheckBox,/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Checked	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Checked            = 1 << 23   \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Deactivated	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Deactivated        = 1 << 6,   \/\/ Only valid if ImGuiItemStatusFlags_/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Edited	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Edited             = 1 << 2,   \/\/ Value exposed by item was edited in/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_FocusedByTabbing	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_FocusedByTabbing   = 1 << 8    \/\/ Set when the Focusable item just go/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDeactivated	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDeactivated     = 1 << 5,   \/\/ Set if the widget\/group is able to/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDisplayRect	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDisplayRect     = 1 << 1,   \/\/ g.LastItemData.DisplayRect is valid$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredRect	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredRect        = 1 << 0,   \/\/ Mouse position is within item recta/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredWindow	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredWindow      = 1 << 7,   \/\/ Override the HoveredWindow test to /;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_None	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_None               = 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Openable	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Openable           = 1 << 20,  \/\/ Item is an openable (e.g. TreeNode)$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Opened	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Opened             = 1 << 21,  \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledOpen	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledOpen        = 1 << 4,   \/\/ Set when TreeNode() reports togglin/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledSelection	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledSelection   = 1 << 3,   \/\/ Set when Selectable(), TreeNode() r/;"	e	enum:ImGuiItemStatusFlags_
ImGuiKeyPrivate_	src/imgui/imgui_internal.h	/^enum ImGuiKeyPrivate_$/;"	g
ImGuiKey_Gamepad_BEGIN	src/imgui/imgui_internal.h	/^    ImGuiKey_Gamepad_BEGIN          = ImGuiKey_GamepadStart,$/;"	e	enum:ImGuiKeyPrivate_
ImGuiKey_Gamepad_END	src/imgui/imgui_internal.h	/^    ImGuiKey_Gamepad_END            = ImGuiKey_GamepadRStickRight + 1$/;"	e	enum:ImGuiKeyPrivate_
ImGuiKey_LegacyNativeKey_BEGIN	src/imgui/imgui_internal.h	/^    ImGuiKey_LegacyNativeKey_BEGIN  = 0,$/;"	e	enum:ImGuiKeyPrivate_
ImGuiKey_LegacyNativeKey_END	src/imgui/imgui_internal.h	/^    ImGuiKey_LegacyNativeKey_END    = 512,$/;"	e	enum:ImGuiKeyPrivate_
ImGuiLastItemData	src/imgui/imgui_internal.h	/^    ImGuiLastItemData()     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiLastItemData
ImGuiLastItemData	src/imgui/imgui_internal.h	/^struct ImGuiLastItemData$/;"	s
ImGuiLayoutType	src/imgui/imgui_internal.h	/^typedef int ImGuiLayoutType;            \/\/ -> enum ImGuiLayoutType_         \/\/ Enum: Horizon/;"	t	typeref:typename:int
ImGuiLayoutType_	src/imgui/imgui_internal.h	/^enum ImGuiLayoutType_$/;"	g
ImGuiLayoutType_Horizontal	src/imgui/imgui_internal.h	/^    ImGuiLayoutType_Horizontal = 0,$/;"	e	enum:ImGuiLayoutType_
ImGuiLayoutType_Vertical	src/imgui/imgui_internal.h	/^    ImGuiLayoutType_Vertical = 1$/;"	e	enum:ImGuiLayoutType_
ImGuiListClipper	src/imgui/imgui.cpp	/^ImGuiListClipper::ImGuiListClipper()$/;"	f	class:ImGuiListClipper
ImGuiListClipperData	src/imgui/imgui_internal.h	/^    ImGuiListClipperData()          { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiListClipperData
ImGuiListClipperData	src/imgui/imgui_internal.h	/^struct ImGuiListClipperData$/;"	s
ImGuiListClipperRange	src/imgui/imgui_internal.h	/^struct ImGuiListClipperRange$/;"	s
ImGuiListClipper_SeekCursorAndSetupPrevLine	src/imgui/imgui.cpp	/^static void ImGuiListClipper_SeekCursorAndSetupPrevLine(float pos_y, float line_height)$/;"	f	typeref:typename:void	file:
ImGuiListClipper_SeekCursorForItem	src/imgui/imgui.cpp	/^static void ImGuiListClipper_SeekCursorForItem(ImGuiListClipper* clipper, int item_n)$/;"	f	typeref:typename:void	file:
ImGuiListClipper_SortAndFuseRanges	src/imgui/imgui.cpp	/^static void ImGuiListClipper_SortAndFuseRanges(ImVector<ImGuiListClipperRange>& ranges, int offs/;"	f	typeref:typename:void	file:
ImGuiLogType	src/imgui/imgui_internal.h	/^enum ImGuiLogType$/;"	g
ImGuiLogType_Buffer	src/imgui/imgui_internal.h	/^    ImGuiLogType_Buffer,$/;"	e	enum:ImGuiLogType
ImGuiLogType_Clipboard	src/imgui/imgui_internal.h	/^    ImGuiLogType_Clipboard$/;"	e	enum:ImGuiLogType
ImGuiLogType_File	src/imgui/imgui_internal.h	/^    ImGuiLogType_File,$/;"	e	enum:ImGuiLogType
ImGuiLogType_None	src/imgui/imgui_internal.h	/^    ImGuiLogType_None = 0,$/;"	e	enum:ImGuiLogType
ImGuiLogType_TTY	src/imgui/imgui_internal.h	/^    ImGuiLogType_TTY,$/;"	e	enum:ImGuiLogType
ImGuiMenuColumns	src/imgui/imgui_internal.h	/^    ImGuiMenuColumns() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiMenuColumns
ImGuiMenuColumns	src/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiMenuColumns$/;"	s
ImGuiMetricsConfig	src/imgui/imgui_internal.h	/^    ImGuiMetricsConfig()$/;"	f	struct:ImGuiMetricsConfig
ImGuiMetricsConfig	src/imgui/imgui_internal.h	/^struct ImGuiMetricsConfig$/;"	s
ImGuiNavDirSourceFlags	src/imgui/imgui_internal.h	/^typedef int ImGuiNavDirSourceFlags;     \/\/ -> enum ImGuiNavDirSourceFlags_  \/\/ Flags: for Ge/;"	t	typeref:typename:int
ImGuiNavDirSourceFlags_	src/imgui/imgui_internal.h	/^enum ImGuiNavDirSourceFlags_$/;"	g
ImGuiNavDirSourceFlags_Keyboard	src/imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_Keyboard         = 1 << 1,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_None	src/imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_None             = 0,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_PadDPad	src/imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_PadDPad          = 1 << 2,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_PadLStick	src/imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_PadLStick        = 1 << 3$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_RawKeyboard	src/imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_RawKeyboard      = 1 << 0,   \/\/ Raw keyboard (not pulled from nav),/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavHighlightFlags	src/imgui/imgui_internal.h	/^typedef int ImGuiNavHighlightFlags;     \/\/ -> enum ImGuiNavHighlightFlags_  \/\/ Flags: for Re/;"	t	typeref:typename:int
ImGuiNavHighlightFlags_	src/imgui/imgui_internal.h	/^enum ImGuiNavHighlightFlags_$/;"	g
ImGuiNavHighlightFlags_AlwaysDraw	src/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_AlwaysDraw       = 1 << 2,       \/\/ Draw rectangular highlight if (/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_NoRounding	src/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_NoRounding       = 1 << 3$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_None	src/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_None             = 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_TypeDefault	src/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_TypeDefault      = 1 << 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_TypeThin	src/imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_TypeThin         = 1 << 1,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavItemData	src/imgui/imgui_internal.h	/^    ImGuiNavItemData()  { Clear(); }$/;"	f	struct:ImGuiNavItemData
ImGuiNavItemData	src/imgui/imgui_internal.h	/^struct ImGuiNavItemData$/;"	s
ImGuiNavLayer	src/imgui/imgui_internal.h	/^enum ImGuiNavLayer$/;"	g
ImGuiNavLayer_COUNT	src/imgui/imgui_internal.h	/^    ImGuiNavLayer_COUNT$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Main	src/imgui/imgui_internal.h	/^    ImGuiNavLayer_Main  = 0,    \/\/ Main scrolling layer$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Menu	src/imgui/imgui_internal.h	/^    ImGuiNavLayer_Menu  = 1,    \/\/ Menu layer (access with Alt\/ImGuiNavInput_Menu)$/;"	e	enum:ImGuiNavLayer
ImGuiNavMoveFlags	src/imgui/imgui_internal.h	/^typedef int ImGuiNavMoveFlags;          \/\/ -> enum ImGuiNavMoveFlags_       \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiNavMoveFlags_	src/imgui/imgui_internal.h	/^enum ImGuiNavMoveFlags_$/;"	g
ImGuiNavMoveFlags_Activate	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_Activate              = 1 << 11,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AllowCurrentNavId	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_AllowCurrentNavId     = 1 << 4,   \/\/ Allow scoring and considering the c/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AlsoScoreVisibleSet	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_AlsoScoreVisibleSet   = 1 << 5,   \/\/ Store alternate result in NavMoveRe/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_DebugNoResult	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_DebugNoResult         = 1 << 8,   \/\/ Dummy scoring for debug purpose, do/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_DontSetNavHighlight	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_DontSetNavHighlight   = 1 << 12   \/\/ Do not alter the visible state of k/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_FocusApi	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_FocusApi              = 1 << 9,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_Forwarded	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_Forwarded             = 1 << 7,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopX	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopX                 = 1 << 0,   \/\/ On failed request, restart from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopY	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopY                 = 1 << 1,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_None	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_None                  = 0,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_ScrollToEdgeY	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_ScrollToEdgeY         = 1 << 6,   \/\/ Force scrolling to min\/max (used b/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_Tabbing	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_Tabbing               = 1 << 10,  \/\/ == Focus + Activate if item is Inpu/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapX	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapX                 = 1 << 2,   \/\/ On failed request, request from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapY	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapY                 = 1 << 3,   \/\/ This is not super useful but provid/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavReadMode	src/imgui/imgui_internal.h	/^enum ImGuiNavReadMode$/;"	g
ImGuiNavReadMode_Down	src/imgui/imgui_internal.h	/^    ImGuiNavReadMode_Down,$/;"	e	enum:ImGuiNavReadMode
ImGuiNavReadMode_Pressed	src/imgui/imgui_internal.h	/^    ImGuiNavReadMode_Pressed,$/;"	e	enum:ImGuiNavReadMode
ImGuiNavReadMode_Released	src/imgui/imgui_internal.h	/^    ImGuiNavReadMode_Released,$/;"	e	enum:ImGuiNavReadMode
ImGuiNavReadMode_Repeat	src/imgui/imgui_internal.h	/^    ImGuiNavReadMode_Repeat,$/;"	e	enum:ImGuiNavReadMode
ImGuiNavReadMode_RepeatFast	src/imgui/imgui_internal.h	/^    ImGuiNavReadMode_RepeatFast$/;"	e	enum:ImGuiNavReadMode
ImGuiNavReadMode_RepeatSlow	src/imgui/imgui_internal.h	/^    ImGuiNavReadMode_RepeatSlow,$/;"	e	enum:ImGuiNavReadMode
ImGuiNextItemData	src/imgui/imgui_internal.h	/^    ImGuiNextItemData()         { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiNextItemData
ImGuiNextItemData	src/imgui/imgui_internal.h	/^struct ImGuiNextItemData$/;"	s
ImGuiNextItemDataFlags	src/imgui/imgui_internal.h	/^typedef int ImGuiNextItemDataFlags;     \/\/ -> enum ImGuiNextItemDataFlags_  \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextItemDataFlags_	src/imgui/imgui_internal.h	/^enum ImGuiNextItemDataFlags_$/;"	g
ImGuiNextItemDataFlags_HasOpen	src/imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasOpen  = 1 << 1$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasWidth	src/imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasWidth = 1 << 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_None	src/imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags_None     = 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextWindowData	src/imgui/imgui_internal.h	/^    ImGuiNextWindowData()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiNextWindowData
ImGuiNextWindowData	src/imgui/imgui_internal.h	/^struct ImGuiNextWindowData$/;"	s
ImGuiNextWindowDataFlags	src/imgui/imgui_internal.h	/^typedef int ImGuiNextWindowDataFlags;   \/\/ -> enum ImGuiNextWindowDataFlags_\/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextWindowDataFlags_	src/imgui/imgui_internal.h	/^enum ImGuiNextWindowDataFlags_$/;"	g
ImGuiNextWindowDataFlags_HasBgAlpha	src/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasBgAlpha         = 1 << 6,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasCollapsed	src/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasCollapsed       = 1 << 3,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasContentSize	src/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasContentSize     = 1 << 2,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasFocus	src/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasFocus           = 1 << 5,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasPos	src/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasPos             = 1 << 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasScroll	src/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasScroll          = 1 << 7$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSize	src/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSize            = 1 << 1,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSizeConstraint	src/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSizeConstraint  = 1 << 4,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_None	src/imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_None               = 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiOldColumnData	src/imgui/imgui_internal.h	/^    ImGuiOldColumnData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiOldColumnData
ImGuiOldColumnData	src/imgui/imgui_internal.h	/^struct ImGuiOldColumnData$/;"	s
ImGuiOldColumnFlags	src/imgui/imgui_internal.h	/^typedef int ImGuiOldColumnFlags;        \/\/ -> enum ImGuiOldColumnFlags_     \/\/ Flags: for Be/;"	t	typeref:typename:int
ImGuiOldColumnFlags_	src/imgui/imgui_internal.h	/^enum ImGuiOldColumnFlags_$/;"	g
ImGuiOldColumnFlags_GrowParentContentsSize	src/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags_GrowParentContentsSize  = 1 << 4    \/\/ (WIP) Restore pre-1.51 behavior/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoBorder	src/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags_NoBorder                = 1 << 0,   \/\/ Disable column dividers$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoForceWithinWindow	src/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags_NoForceWithinWindow     = 1 << 3,   \/\/ Disable forcing columns to fit /;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoPreserveWidths	src/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags_NoPreserveWidths        = 1 << 2,   \/\/ Disable column width preservati/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoResize	src/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags_NoResize                = 1 << 1,   \/\/ Disable resizing columns when c/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_None	src/imgui/imgui_internal.h	/^    ImGuiOldColumnFlags_None                    = 0,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumns	src/imgui/imgui_internal.h	/^    ImGuiOldColumns()   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiOldColumns
ImGuiOldColumns	src/imgui/imgui_internal.h	/^struct ImGuiOldColumns$/;"	s
ImGuiPlotArrayGetterData	src/imgui/imgui_widgets.cpp	/^    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride/;"	f	struct:ImGuiPlotArrayGetterData	file:
ImGuiPlotArrayGetterData	src/imgui/imgui_widgets.cpp	/^struct ImGuiPlotArrayGetterData$/;"	s	file:
ImGuiPlotType	src/imgui/imgui_internal.h	/^enum ImGuiPlotType$/;"	g
ImGuiPlotType_Histogram	src/imgui/imgui_internal.h	/^    ImGuiPlotType_Histogram$/;"	e	enum:ImGuiPlotType
ImGuiPlotType_Lines	src/imgui/imgui_internal.h	/^    ImGuiPlotType_Lines,$/;"	e	enum:ImGuiPlotType
ImGuiPopupData	src/imgui/imgui_internal.h	/^    ImGuiPopupData()    { memset(this, 0, sizeof(*this)); ParentNavLayer = OpenFrameCount = -1; /;"	f	struct:ImGuiPopupData
ImGuiPopupData	src/imgui/imgui_internal.h	/^struct ImGuiPopupData$/;"	s
ImGuiPopupPositionPolicy	src/imgui/imgui_internal.h	/^enum ImGuiPopupPositionPolicy$/;"	g
ImGuiPopupPositionPolicy_ComboBox	src/imgui/imgui_internal.h	/^    ImGuiPopupPositionPolicy_ComboBox,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Default	src/imgui/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Default,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Tooltip	src/imgui/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Tooltip$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPtrOrIndex	src/imgui/imgui_internal.h	/^    ImGuiPtrOrIndex(int index)  { Ptr = NULL; Index = index; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	src/imgui/imgui_internal.h	/^    ImGuiPtrOrIndex(void* ptr)  { Ptr = ptr; Index = -1; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	src/imgui/imgui_internal.h	/^struct ImGuiPtrOrIndex$/;"	s
ImGuiResizeBorderDef	src/imgui/imgui.cpp	/^struct ImGuiResizeBorderDef$/;"	s	file:
ImGuiResizeGripDef	src/imgui/imgui.cpp	/^struct ImGuiResizeGripDef$/;"	s	file:
ImGuiScrollFlags	src/imgui/imgui_internal.h	/^typedef int ImGuiScrollFlags;           \/\/ -> enum ImGuiScrollFlags_        \/\/ Flags: for Sc/;"	t	typeref:typename:int
ImGuiScrollFlags_	src/imgui/imgui_internal.h	/^enum ImGuiScrollFlags_$/;"	g
ImGuiScrollFlags_AlwaysCenterX	src/imgui/imgui_internal.h	/^    ImGuiScrollFlags_AlwaysCenterX          = 1 << 4,       \/\/ Always center the result item o/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_AlwaysCenterY	src/imgui/imgui_internal.h	/^    ImGuiScrollFlags_AlwaysCenterY          = 1 << 5,       \/\/ Always center the result item o/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleCenterX	src/imgui/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleCenterX     = 1 << 2,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleCenterY	src/imgui/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleCenterY     = 1 << 3,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleEdgeX	src/imgui/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleEdgeX       = 1 << 0,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleEdgeY	src/imgui/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleEdgeY       = 1 << 1,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_MaskX_	src/imgui/imgui_internal.h	/^    ImGuiScrollFlags_MaskX_                 = ImGuiScrollFlags_KeepVisibleEdgeX | ImGuiScrollFla/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_MaskY_	src/imgui/imgui_internal.h	/^    ImGuiScrollFlags_MaskY_                 = ImGuiScrollFlags_KeepVisibleEdgeY | ImGuiScrollFla/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_NoScrollParent	src/imgui/imgui_internal.h	/^    ImGuiScrollFlags_NoScrollParent         = 1 << 6,       \/\/ Disable forwarding scrolling to/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_None	src/imgui/imgui_internal.h	/^    ImGuiScrollFlags_None                   = 0,$/;"	e	enum:ImGuiScrollFlags_
ImGuiSelectableFlagsPrivate_	src/imgui/imgui_internal.h	/^enum ImGuiSelectableFlagsPrivate_$/;"	g
ImGuiSelectableFlags_DrawHoveredWhenHeld	src/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_DrawHoveredWhenHeld    = 1 << 25,  \/\/ Always show active when held, e/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoHoldingActiveID	src/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_NoHoldingActiveID      = 1 << 20,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoPadWithHalfSpacing	src/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_NoPadWithHalfSpacing   = 1 << 27   \/\/ Disable padding each side with /;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SelectOnClick	src/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnClick          = 1 << 22,  \/\/ Override button behavior to rea/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SelectOnNav	src/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnNav            = 1 << 21,  \/\/ (WIP) Auto-select when moved in/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SelectOnRelease	src/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnRelease        = 1 << 23,  \/\/ Override button behavior to rea/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SetNavIdOnHover	src/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_SetNavIdOnHover        = 1 << 26,  \/\/ Set Nav\/Focus ID on mouse hove/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SpanAvailWidth	src/imgui/imgui_internal.h	/^    ImGuiSelectableFlags_SpanAvailWidth         = 1 << 24,  \/\/ Span all avail width even if we/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSeparatorFlags	src/imgui/imgui_internal.h	/^typedef int ImGuiSeparatorFlags;        \/\/ -> enum ImGuiSeparatorFlags_     \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiSeparatorFlags_	src/imgui/imgui_internal.h	/^enum ImGuiSeparatorFlags_$/;"	g
ImGuiSeparatorFlags_Horizontal	src/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_Horizontal          = 1 << 0,   \/\/ Axis default to current layout type/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_None	src/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_None                = 0,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_SpanAllColumns	src/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_SpanAllColumns      = 1 << 2$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_Vertical	src/imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_Vertical            = 1 << 1,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSettingsHandler	src/imgui/imgui_internal.h	/^    ImGuiSettingsHandler() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiSettingsHandler
ImGuiSettingsHandler	src/imgui/imgui_internal.h	/^struct ImGuiSettingsHandler$/;"	s
ImGuiShrinkWidthItem	src/imgui/imgui_internal.h	/^struct ImGuiShrinkWidthItem$/;"	s
ImGuiSliderFlagsPrivate_	src/imgui/imgui_internal.h	/^enum ImGuiSliderFlagsPrivate_$/;"	g
ImGuiSliderFlags_ReadOnly	src/imgui/imgui_internal.h	/^    ImGuiSliderFlags_ReadOnly               = 1 << 21$/;"	e	enum:ImGuiSliderFlagsPrivate_
ImGuiSliderFlags_Vertical	src/imgui/imgui_internal.h	/^    ImGuiSliderFlags_Vertical               = 1 << 20,  \/\/ Should this slider be orientated ve/;"	e	enum:ImGuiSliderFlagsPrivate_
ImGuiStackLevelInfo	src/imgui/imgui_internal.h	/^    ImGuiStackLevelInfo()   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiStackLevelInfo
ImGuiStackLevelInfo	src/imgui/imgui_internal.h	/^struct ImGuiStackLevelInfo$/;"	s
ImGuiStackSizes	src/imgui/imgui_internal.h	/^    ImGuiStackSizes() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiStackSizes
ImGuiStackSizes	src/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiStackSizes$/;"	s
ImGuiStackTool	src/imgui/imgui_internal.h	/^    ImGuiStackTool()        { memset(this, 0, sizeof(*this)); CopyToClipboardLastTime = -FLT_MAX/;"	f	struct:ImGuiStackTool
ImGuiStackTool	src/imgui/imgui_internal.h	/^struct ImGuiStackTool$/;"	s
ImGuiStyle	src/imgui/imgui.cpp	/^ImGuiStyle::ImGuiStyle()$/;"	f	class:ImGuiStyle
ImGuiStyleMod	src/imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, ImVec2 v)  { VarIdx = idx; BackupFloat[0] = v.x; BackupFloa/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	src/imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, float v)   { VarIdx = idx; BackupFloat[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	src/imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, int v)     { VarIdx = idx; BackupInt[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	src/imgui/imgui_internal.h	/^struct ImGuiStyleMod$/;"	s
ImGuiStyleVarInfo	src/imgui/imgui.cpp	/^struct ImGuiStyleVarInfo$/;"	s	file:
ImGuiTabBar	src/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiTabBar$/;"	s
ImGuiTabBar	src/imgui/imgui_widgets.cpp	/^ImGuiTabBar::ImGuiTabBar()$/;"	f	class:ImGuiTabBar
ImGuiTabBarFlagsPrivate_	src/imgui/imgui_internal.h	/^enum ImGuiTabBarFlagsPrivate_$/;"	g
ImGuiTabBarFlags_DockNode	src/imgui/imgui_internal.h	/^    ImGuiTabBarFlags_DockNode                   = 1 << 20,  \/\/ Part of a dock node [we don't u/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_IsFocused	src/imgui/imgui_internal.h	/^    ImGuiTabBarFlags_IsFocused                  = 1 << 21,$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_SaveSettings	src/imgui/imgui_internal.h	/^    ImGuiTabBarFlags_SaveSettings               = 1 << 22   \/\/ FIXME: Settings are handled by /;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarSection	src/imgui/imgui_widgets.cpp	/^    ImGuiTabBarSection() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTabBarSection	file:
ImGuiTabBarSection	src/imgui/imgui_widgets.cpp	/^struct ImGuiTabBarSection$/;"	s	file:
ImGuiTabItem	src/imgui/imgui_internal.h	/^    ImGuiTabItem()      { memset(this, 0, sizeof(*this)); LastFrameVisible = LastFrameSelected =/;"	f	struct:ImGuiTabItem
ImGuiTabItem	src/imgui/imgui_internal.h	/^struct ImGuiTabItem$/;"	s
ImGuiTabItemFlagsPrivate_	src/imgui/imgui_internal.h	/^enum ImGuiTabItemFlagsPrivate_$/;"	g
ImGuiTabItemFlags_Button	src/imgui/imgui_internal.h	/^    ImGuiTabItemFlags_Button                    = 1 << 21   \/\/ Used by TabItemButton, change t/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_NoCloseButton	src/imgui/imgui_internal.h	/^    ImGuiTabItemFlags_NoCloseButton             = 1 << 20,  \/\/ Track whether p_open was set or/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_SectionMask_	src/imgui/imgui_internal.h	/^    ImGuiTabItemFlags_SectionMask_              = ImGuiTabItemFlags_Leading | ImGuiTabItemFlags_/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTable	src/imgui/imgui_internal.h	/^    ImGuiTable()                { memset(this, 0, sizeof(*this)); LastFrameActive = -1; }$/;"	f	struct:ImGuiTable
ImGuiTable	src/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiTable$/;"	s
ImGuiTableCellData	src/imgui/imgui_internal.h	/^struct ImGuiTableCellData$/;"	s
ImGuiTableColumn	src/imgui/imgui_internal.h	/^    ImGuiTableColumn()$/;"	f	struct:ImGuiTableColumn
ImGuiTableColumn	src/imgui/imgui_internal.h	/^struct ImGuiTableColumn$/;"	s
ImGuiTableColumnIdx	src/imgui/imgui_internal.h	/^typedef ImS8 ImGuiTableColumnIdx;$/;"	t	typeref:typename:ImS8
ImGuiTableColumnSettings	src/imgui/imgui_internal.h	/^    ImGuiTableColumnSettings()$/;"	f	struct:ImGuiTableColumnSettings
ImGuiTableColumnSettings	src/imgui/imgui_internal.h	/^struct ImGuiTableColumnSettings$/;"	s
ImGuiTableDrawChannelIdx	src/imgui/imgui_internal.h	/^typedef ImU8 ImGuiTableDrawChannelIdx;$/;"	t	typeref:typename:ImU8
ImGuiTableInstanceData	src/imgui/imgui_internal.h	/^    ImGuiTableInstanceData()    { LastOuterHeight = LastFirstRowHeight = 0.0f; }$/;"	f	struct:ImGuiTableInstanceData
ImGuiTableInstanceData	src/imgui/imgui_internal.h	/^struct ImGuiTableInstanceData$/;"	s
ImGuiTableSettings	src/imgui/imgui_internal.h	/^    ImGuiTableSettings()        { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableSettings
ImGuiTableSettings	src/imgui/imgui_internal.h	/^struct ImGuiTableSettings$/;"	s
ImGuiTableTempData	src/imgui/imgui_internal.h	/^    ImGuiTableTempData()        { memset(this, 0, sizeof(*this)); LastTimeActive = -1.0f; }$/;"	f	struct:ImGuiTableTempData
ImGuiTableTempData	src/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiTableTempData$/;"	s
ImGuiTextFilter	src/imgui/imgui.cpp	/^ImGuiTextFilter::ImGuiTextFilter(const char* default_filter) \/\/-V1077$/;"	f	class:ImGuiTextFilter
ImGuiTextFlags	src/imgui/imgui_internal.h	/^typedef int ImGuiTextFlags;             \/\/ -> enum ImGuiTextFlags_          \/\/ Flags: for Te/;"	t	typeref:typename:int
ImGuiTextFlags_	src/imgui/imgui_internal.h	/^enum ImGuiTextFlags_$/;"	g
ImGuiTextFlags_NoWidthForLargeClippedText	src/imgui/imgui_internal.h	/^    ImGuiTextFlags_NoWidthForLargeClippedText = 1 << 0$/;"	e	enum:ImGuiTextFlags_
ImGuiTextFlags_None	src/imgui/imgui_internal.h	/^    ImGuiTextFlags_None = 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTooltipFlags	src/imgui/imgui_internal.h	/^typedef int ImGuiTooltipFlags;          \/\/ -> enum ImGuiTooltipFlags_       \/\/ Flags: for Be/;"	t	typeref:typename:int
ImGuiTooltipFlags_	src/imgui/imgui_internal.h	/^enum ImGuiTooltipFlags_$/;"	g
ImGuiTooltipFlags_None	src/imgui/imgui_internal.h	/^    ImGuiTooltipFlags_None = 0,$/;"	e	enum:ImGuiTooltipFlags_
ImGuiTooltipFlags_OverridePreviousTooltip	src/imgui/imgui_internal.h	/^    ImGuiTooltipFlags_OverridePreviousTooltip = 1 << 0      \/\/ Override will clear\/ignore pre/;"	e	enum:ImGuiTooltipFlags_
ImGuiTreeNodeFlagsPrivate_	src/imgui/imgui_internal.h	/^enum ImGuiTreeNodeFlagsPrivate_$/;"	g
ImGuiTreeNodeFlags_ClipLabelForTrailingButton	src/imgui/imgui_internal.h	/^    ImGuiTreeNodeFlags_ClipLabelForTrailingButton = 1 << 20$/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiViewportP	src/imgui/imgui_internal.h	/^    ImGuiViewportP()    { DrawListsLastFrame[0] = DrawListsLastFrame[1] = -1; DrawLists[0] = Dra/;"	f	struct:ImGuiViewportP
ImGuiViewportP	src/imgui/imgui_internal.h	/^struct ImGuiViewportP : public ImGuiViewport$/;"	s
ImGuiWindow	src/imgui/imgui.cpp	/^ImGuiWindow::ImGuiWindow(ImGuiContext* context, const char* name) : DrawListInst(NULL)$/;"	f	class:ImGuiWindow
ImGuiWindow	src/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiWindow$/;"	s
ImGuiWindowSettings	src/imgui/imgui_internal.h	/^    ImGuiWindowSettings()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiWindowSettings
ImGuiWindowSettings	src/imgui/imgui_internal.h	/^struct ImGuiWindowSettings$/;"	s
ImGuiWindowStackData	src/imgui/imgui_internal.h	/^struct ImGuiWindowStackData$/;"	s
ImGuiWindowTempData	src/imgui/imgui_internal.h	/^struct IMGUI_API ImGuiWindowTempData$/;"	s
ImGui_ImplGlfw_CharCallback	src/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CharCallback(GLFWwindow* window, unsigned int c)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_CursorEnterCallback	src/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CursorEnterCallback(GLFWwindow* window, int entered)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_CursorPosCallback	src/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CursorPosCallback(GLFWwindow* window, double x, double y)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_Data	src/imgui/imgui_impl_glfw.cpp	/^    ImGui_ImplGlfw_Data()   { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplGlfw_Data	file:
ImGui_ImplGlfw_Data	src/imgui/imgui_impl_glfw.cpp	/^struct ImGui_ImplGlfw_Data$/;"	s	file:
ImGui_ImplGlfw_GetBackendData	src/imgui/imgui_impl_glfw.cpp	/^static ImGui_ImplGlfw_Data* ImGui_ImplGlfw_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplGlfw_Data *	file:
ImGui_ImplGlfw_GetClipboardText	src/imgui/imgui_impl_glfw.cpp	/^static const char* ImGui_ImplGlfw_GetClipboardText(void* user_data)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplGlfw_Init	src/imgui/imgui_impl_glfw.cpp	/^static bool ImGui_ImplGlfw_Init(GLFWwindow* window, bool install_callbacks, GlfwClientApi client/;"	f	typeref:typename:bool	file:
ImGui_ImplGlfw_InitForOpenGL	src/imgui/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForOpenGL(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_InitForOther	src/imgui/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForOther(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_InitForVulkan	src/imgui/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForVulkan(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_InstallCallbacks	src/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_InstallCallbacks(GLFWwindow* window)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_KeyCallback	src/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_KeyCallback(GLFWwindow* window, int keycode, int scancode, int action, int m/;"	f	typeref:typename:void
ImGui_ImplGlfw_KeyToImGuiKey	src/imgui/imgui_impl_glfw.cpp	/^static ImGuiKey ImGui_ImplGlfw_KeyToImGuiKey(int key)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplGlfw_KeyToModifier	src/imgui/imgui_impl_glfw.cpp	/^static int ImGui_ImplGlfw_KeyToModifier(int key)$/;"	f	typeref:typename:int	file:
ImGui_ImplGlfw_MonitorCallback	src/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_MonitorCallback(GLFWmonitor*, int)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_MouseButtonCallback	src/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_MouseButtonCallback(GLFWwindow* window, int button, int action, int mods)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_NewFrame	src/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplGlfw_RestoreCallbacks	src/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_RestoreCallbacks(GLFWwindow* window)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_ScrollCallback	src/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_ScrollCallback(GLFWwindow* window, double xoffset, double yoffset)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_SetClipboardText	src/imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_SetClipboardText(void* user_data, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_Shutdown	src/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplGlfw_TranslateUntranslatedKey	src/imgui/imgui_impl_glfw.cpp	/^static int ImGui_ImplGlfw_TranslateUntranslatedKey(int key, int scancode)$/;"	f	typeref:typename:int	file:
ImGui_ImplGlfw_UpdateGamepads	src/imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateKeyModifiers	src/imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateKeyModifiers(int mods)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateMouseCursor	src/imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateMouseData	src/imgui/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMouseData()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_WindowFocusCallback	src/imgui/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_WindowFocusCallback(GLFWwindow* window, int focused)$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_CreateDeviceObjects	src/imgui/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_CreateFontsTexture	src/imgui/imgui_impl_opengl3.cpp	/^bool ImGui_ImplOpenGL3_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_Data	src/imgui/imgui_impl_opengl3.cpp	/^    ImGui_ImplOpenGL3_Data() { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplOpenGL3_Data	file:
ImGui_ImplOpenGL3_Data	src/imgui/imgui_impl_opengl3.cpp	/^struct ImGui_ImplOpenGL3_Data$/;"	s	file:
ImGui_ImplOpenGL3_DestroyDeviceObjects	src/imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_DestroyFontsTexture	src/imgui/imgui_impl_opengl3.cpp	/^void ImGui_ImplOpenGL3_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_GetBackendData	src/imgui/imgui_impl_opengl3.cpp	/^static ImGui_ImplOpenGL3_Data* ImGui_ImplOpenGL3_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplOpenGL3_Data *	file:
ImGui_ImplOpenGL3_Init	src/imgui/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_Init(const char* glsl_version)$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_NewFrame	src/imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_RenderDrawData	src/imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_SetupRenderState	src/imgui/imgui_impl_opengl3.cpp	/^static void ImGui_ImplOpenGL3_SetupRenderState(ImDrawData* draw_data, int fb_width, int fb_heigh/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL3_Shutdown	src/imgui/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_VtxAttribState	src/imgui/imgui_impl_opengl3.cpp	/^struct ImGui_ImplOpenGL3_VtxAttribState$/;"	s	file:
ImHashData	src/imgui/imgui.cpp	/^ImGuiID ImHashData(const void* data_p, size_t data_size, ImU32 seed)$/;"	f	typeref:typename:ImGuiID
ImHashStr	src/imgui/imgui.cpp	/^ImGuiID ImHashStr(const char* data_p, size_t data_size, ImU32 seed)$/;"	f	typeref:typename:ImGuiID
ImInvLength	src/imgui/imgui_internal.h	/^static inline float  ImInvLength(const ImVec2& lhs, float fail_value)           { float d = (lhs/;"	f	typeref:typename:float
ImIsFloatAboveGuaranteedIntegerPrecision	src/imgui/imgui_internal.h	/^static inline bool   ImIsFloatAboveGuaranteedIntegerPrecision(float f)          { return f <= -1/;"	f	typeref:typename:bool
ImIsPowerOfTwo	src/imgui/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(ImU64 v)         { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImIsPowerOfTwo	src/imgui/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(int v)           { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImLengthSqr	src/imgui/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec2& lhs)                             { return (lhs.x /;"	f	typeref:typename:float
ImLengthSqr	src/imgui/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec4& lhs)                             { return (lhs.x /;"	f	typeref:typename:float
ImLerp	src/imgui/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, const ImVec2& t)  { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	src/imgui/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, float t)          { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	src/imgui/imgui_internal.h	/^static inline ImVec4 ImLerp(const ImVec4& a, const ImVec4& b, float t)          { return ImVec4(/;"	f	typeref:typename:ImVec4
ImLerp	src/imgui/imgui_internal.h	/^template<typename T> static inline T ImLerp(T a, T b, float t)                  { return (T)(a +/;"	f	typeref:typename:T
ImLineClosestPoint	src/imgui/imgui.cpp	/^ImVec2 ImLineClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& p)$/;"	f	typeref:typename:ImVec2
ImLinearSweep	src/imgui/imgui_internal.h	/^static inline float  ImLinearSweep(float current, float target, float speed)    { if (current < /;"	f	typeref:typename:float
ImLog	src/imgui/imgui_internal.h	/^static inline double ImLog(double x)            { return log(x); }$/;"	f	typeref:typename:double
ImLog	src/imgui/imgui_internal.h	/^static inline float  ImLog(float x)             { return logf(x); }             \/\/ DragBehavio/;"	f	typeref:typename:float
ImMax	src/imgui/imgui_internal.h	/^static inline ImVec2 ImMax(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMax	src/imgui/imgui_internal.h	/^template<typename T> static inline T ImMax(T lhs, T rhs)                        { return lhs >= /;"	f	typeref:typename:T
ImMin	src/imgui/imgui_internal.h	/^static inline ImVec2 ImMin(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMin	src/imgui/imgui_internal.h	/^template<typename T> static inline T ImMin(T lhs, T rhs)                        { return lhs < r/;"	f	typeref:typename:T
ImModPositive	src/imgui/imgui_internal.h	/^static inline int    ImModPositive(int a, int b)                                { return (a + b)/;"	f	typeref:typename:int
ImMul	src/imgui/imgui_internal.h	/^static inline ImVec2 ImMul(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImParseFormatFindEnd	src/imgui/imgui_widgets.cpp	/^const char* ImParseFormatFindEnd(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatFindStart	src/imgui/imgui_widgets.cpp	/^const char* ImParseFormatFindStart(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatPrecision	src/imgui/imgui_widgets.cpp	/^int ImParseFormatPrecision(const char* fmt, int default_precision)$/;"	f	typeref:typename:int
ImParseFormatSanitizeForPrinting	src/imgui/imgui_widgets.cpp	/^void ImParseFormatSanitizeForPrinting(const char* fmt_in, char* fmt_out, size_t fmt_out_size)$/;"	f	typeref:typename:void
ImParseFormatSanitizeForScanning	src/imgui/imgui_widgets.cpp	/^const char* ImParseFormatSanitizeForScanning(const char* fmt_in, char* fmt_out, size_t fmt_out_s/;"	f	typeref:typename:const char *
ImParseFormatTrimDecorations	src/imgui/imgui_widgets.cpp	/^const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, size_t buf_size)$/;"	f	typeref:typename:const char *
ImPool	src/imgui/imgui_internal.h	/^    ImPool()    { FreeIdx = AliveCount = 0; }$/;"	f	struct:ImPool
ImPool	src/imgui/imgui_internal.h	/^struct ImPool$/;"	s
ImPoolIdx	src/imgui/imgui_internal.h	/^typedef int ImPoolIdx;$/;"	t	typeref:typename:int
ImPow	src/imgui/imgui_internal.h	/^static inline double ImPow(double x, double y)  { return pow(x, y); }$/;"	f	typeref:typename:double
ImPow	src/imgui/imgui_internal.h	/^static inline float  ImPow(float x, float y)    { return powf(x, y); }          \/\/ DragBehavio/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF float
ImQsort	src/imgui/imgui_internal.h	/^static inline void      ImQsort(void* base, size_t count, size_t size_of_element, int(IMGUI_CDEC/;"	f	typeref:typename:void
ImRect	src/imgui/imgui_internal.h	/^    constexpr ImRect()                                        : Min(0.0f, 0.0f), Max(0.0f, 0.0f)/;"	f	struct:ImRect
ImRect	src/imgui/imgui_internal.h	/^    constexpr ImRect(const ImVec2& min, const ImVec2& max)    : Min(min), Max(max)              /;"	f	struct:ImRect
ImRect	src/imgui/imgui_internal.h	/^    constexpr ImRect(const ImVec4& v)                         : Min(v.x, v.y), Max(v.z, v.w)    /;"	f	struct:ImRect
ImRect	src/imgui/imgui_internal.h	/^    constexpr ImRect(float x1, float y1, float x2, float y2)  : Min(x1, y1), Max(x2, y2)        /;"	f	struct:ImRect
ImRect	src/imgui/imgui_internal.h	/^struct IMGUI_API ImRect$/;"	s
ImRotate	src/imgui/imgui_internal.h	/^static inline ImVec2 ImRotate(const ImVec2& v, float cos_a, float sin_a)        { return ImVec2(/;"	f	typeref:typename:ImVec2
ImRsqrt	src/imgui/imgui_internal.h	/^static inline double ImRsqrt(double x)          { return 1.0 \/ sqrt(x); }$/;"	f	typeref:typename:double
ImRsqrt	src/imgui/imgui_internal.h	/^static inline float  ImRsqrt(float x)           { return 1.0f \/ sqrtf(x); }$/;"	f	typeref:typename:float
ImRsqrt	src/imgui/imgui_internal.h	/^static inline float  ImRsqrt(float x)           { return _mm_cvtss_f32(_mm_rsqrt_ss(_mm_set_ss(x/;"	f	typeref:typename:float
ImSaturate	src/imgui/imgui_internal.h	/^static inline float  ImSaturate(float f)                                        { return (f < 0./;"	f	typeref:typename:float
ImSign	src/imgui/imgui_internal.h	/^static inline double ImSign(double x)           { return (x < 0.0) ? -1.0 : (x > 0.0) ? 1.0 : 0./;"	f	typeref:typename:double
ImSign	src/imgui/imgui_internal.h	/^static inline float  ImSign(float x)            { return (x < 0.0f) ? -1.0f : (x > 0.0f) ? 1.0f /;"	f	typeref:typename:float
ImSin	src/imgui/imgui_internal.h	/^#define ImSin(/;"	d
ImSpan	src/imgui/imgui_internal.h	/^    inline ImSpan()                                 { Data = DataEnd = NULL; }$/;"	f	struct:ImSpan
ImSpan	src/imgui/imgui_internal.h	/^    inline ImSpan(T* data, T* data_end)             { Data = data; DataEnd = data_end; }$/;"	f	struct:ImSpan
ImSpan	src/imgui/imgui_internal.h	/^    inline ImSpan(T* data, int size)                { Data = data; DataEnd = data + size; }$/;"	f	struct:ImSpan
ImSpan	src/imgui/imgui_internal.h	/^struct ImSpan$/;"	s
ImSpanAllocator	src/imgui/imgui_internal.h	/^    ImSpanAllocator()                               { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImSpanAllocator
ImSpanAllocator	src/imgui/imgui_internal.h	/^struct ImSpanAllocator$/;"	s
ImSqrt	src/imgui/imgui_internal.h	/^#define ImSqrt(/;"	d
ImStb	src/imgui/imgui_internal.h	/^namespace ImStb$/;"	n
ImStb	src/imgui/imgui_widgets.cpp	/^namespace ImStb$/;"	n	file:
ImStrSkipBlank	src/imgui/imgui.cpp	/^const char* ImStrSkipBlank(const char* str)$/;"	f	typeref:typename:const char *
ImStrTrimBlanks	src/imgui/imgui.cpp	/^void ImStrTrimBlanks(char* buf)$/;"	f	typeref:typename:void
ImStrbolW	src/imgui/imgui.cpp	/^const ImWchar* ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin) \/\/ find beginn/;"	f	typeref:typename:const ImWchar *
ImStrchrRange	src/imgui/imgui.cpp	/^const char* ImStrchrRange(const char* str, const char* str_end, char c)$/;"	f	typeref:typename:const char *
ImStrdup	src/imgui/imgui.cpp	/^char* ImStrdup(const char* str)$/;"	f	typeref:typename:char *
ImStrdupcpy	src/imgui/imgui.cpp	/^char* ImStrdupcpy(char* dst, size_t* p_dst_size, const char* src)$/;"	f	typeref:typename:char *
ImStreolRange	src/imgui/imgui.cpp	/^const char* ImStreolRange(const char* str, const char* str_end)$/;"	f	typeref:typename:const char *
ImStricmp	src/imgui/imgui.cpp	/^int ImStricmp(const char* str1, const char* str2)$/;"	f	typeref:typename:int
ImStristr	src/imgui/imgui.cpp	/^const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const /;"	f	typeref:typename:const char *
ImStrlenW	src/imgui/imgui.cpp	/^int ImStrlenW(const ImWchar* str)$/;"	f	typeref:typename:int
ImStrncpy	src/imgui/imgui.cpp	/^void ImStrncpy(char* dst, const char* src, size_t count)$/;"	f	typeref:typename:void
ImStrnicmp	src/imgui/imgui.cpp	/^int ImStrnicmp(const char* str1, const char* str2, size_t count)$/;"	f	typeref:typename:int
ImSubClampOverflow	src/imgui/imgui_internal.h	/^template<typename T> static inline T ImSubClampOverflow(T a, T b, T mn, T mx)   { if (b > 0 && (/;"	f	typeref:typename:T
ImSwap	src/imgui/imgui_internal.h	/^template<typename T> static inline void ImSwap(T& a, T& b)                      { T tmp = a; a =/;"	f	typeref:typename:void
ImTextCharFromUtf8	src/imgui/imgui.cpp	/^int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCharToUtf8	src/imgui/imgui.cpp	/^const char* ImTextCharToUtf8(char out_buf[5], unsigned int c)$/;"	f	typeref:typename:const char *
ImTextCharToUtf8_inline	src/imgui/imgui.cpp	/^static inline int ImTextCharToUtf8_inline(char* buf, int buf_size, unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountCharsFromUtf8	src/imgui/imgui.cpp	/^int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	src/imgui/imgui.cpp	/^int ImTextCountUtf8BytesFromChar(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	src/imgui/imgui.cpp	/^static inline int ImTextCountUtf8BytesFromChar(unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountUtf8BytesFromStr	src/imgui/imgui.cpp	/^int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f	typeref:typename:int
ImTextStrFromUtf8	src/imgui/imgui.cpp	/^int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, /;"	f	typeref:typename:int
ImTextStrToUtf8	src/imgui/imgui.cpp	/^int ImTextStrToUtf8(char* out_buf, int out_buf_size, const ImWchar* in_text, const ImWchar* in_t/;"	f	typeref:typename:int
ImTriangleArea	src/imgui/imgui_internal.h	/^inline float         ImTriangleArea(const ImVec2& a, const ImVec2& b, const ImVec2& c) { return /;"	f	typeref:typename:float
ImTriangleBarycentricCoords	src/imgui/imgui.cpp	/^void ImTriangleBarycentricCoords(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2/;"	f	typeref:typename:void
ImTriangleClosestPoint	src/imgui/imgui.cpp	/^ImVec2 ImTriangleClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p/;"	f	typeref:typename:ImVec2
ImTriangleContainsPoint	src/imgui/imgui.cpp	/^bool ImTriangleContainsPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)$/;"	f	typeref:typename:bool
ImUpperPowerOfTwo	src/imgui/imgui_internal.h	/^static inline int       ImUpperPowerOfTwo(int v)        { v--; v |= v >> 1; v |= v >> 2; v |= v /;"	f	typeref:typename:int
ImVec1	src/imgui/imgui_internal.h	/^    constexpr ImVec1()         : x(0.0f) { }$/;"	f	struct:ImVec1
ImVec1	src/imgui/imgui_internal.h	/^    constexpr ImVec1(float _x) : x(_x) { }$/;"	f	struct:ImVec1
ImVec1	src/imgui/imgui_internal.h	/^struct ImVec1$/;"	s
ImVec2ih	src/imgui/imgui_internal.h	/^    constexpr ImVec2ih()                           : x(0), y(0) {}$/;"	f	struct:ImVec2ih
ImVec2ih	src/imgui/imgui_internal.h	/^    constexpr ImVec2ih(short _x, short _y)         : x(_x), y(_y) {}$/;"	f	struct:ImVec2ih
ImVec2ih	src/imgui/imgui_internal.h	/^    constexpr explicit ImVec2ih(const ImVec2& rhs) : x((short)rhs.x), y((short)rhs.y) {}$/;"	f	struct:ImVec2ih
ImVec2ih	src/imgui/imgui_internal.h	/^struct ImVec2ih$/;"	s
Image	src/imgui/imgui_widgets.cpp	/^void ImGui::Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVe/;"	f	class:ImGui	typeref:typename:void
ImageButton	src/imgui/imgui_widgets.cpp	/^bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, cons/;"	f	class:ImGui	typeref:typename:bool
ImageButtonEx	src/imgui/imgui_widgets.cpp	/^bool ImGui::ImageButtonEx(ImGuiID id, ImTextureID texture_id, const ImVec2& size, const ImVec2& /;"	f	class:ImGui	typeref:typename:bool
ImguiLayer	src/imgui_layer.h	/^    ImguiLayer(const Cpu &cpu, const Memory &mem) : cpu(cpu), mem(mem) {};$/;"	f	class:ImguiLayer
ImguiLayer	src/imgui_layer.h	/^class ImguiLayer$/;"	c
InFlags	src/imgui/imgui_internal.h	/^    ImGuiItemFlags          InFlags;            \/\/ See ImGuiItemFlags_$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiItemFlags
InFlags	src/imgui/imgui_internal.h	/^    ImGuiItemFlags      InFlags;        \/\/ ????,Move    \/\/ Best candidate item flags$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiItemFlags
Indent	src/imgui/imgui.cpp	/^void ImGui::Indent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
Indent	src/imgui/imgui_internal.h	/^    ImVec1                  Indent;                 \/\/ Indentation \/ start position from left/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
Index	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     Index;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
Index	src/imgui/imgui_internal.h	/^    int         Index;          \/\/ Usually index in a main pool.$/;"	m	struct:ImGuiPtrOrIndex	typeref:typename:int
Index	src/imgui/imgui_internal.h	/^    int         Index;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:int
IndexBufferSize	src/imgui/imgui_impl_opengl3.cpp	/^    GLsizeiptr      IndexBufferSize;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLsizeiptr	file:
IndexDuringLayout	src/imgui/imgui_internal.h	/^    ImS16               IndexDuringLayout;      \/\/ Index only used during TabBarLayout()$/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
IndexWithinEnabledSet	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     IndexWithinEnabledSet;          \/\/ Index within enabled\/visible s/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
InitStretchWeightOrWidth	src/imgui/imgui_internal.h	/^    float                   InitStretchWeightOrWidth;       \/\/ Value passed to TableSetupColum/;"	m	struct:ImGuiTableColumn	typeref:typename:float
InitialFlags	src/imgui/imgui_internal.h	/^    ImDrawListFlags InitialFlags;               \/\/ Initial flags at the beginning of the frame/;"	m	struct:ImDrawListSharedData	typeref:typename:ImDrawListFlags
InitialTextA	src/imgui/imgui_internal.h	/^    ImVector<char>          InitialTextA;           \/\/ backup of end-user buffer at the time o/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
InitialWidth	src/imgui/imgui_internal.h	/^    float       InitialWidth;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
Initialize	src/imgui/imgui.cpp	/^void ImGui::Initialize()$/;"	f	class:ImGui	typeref:typename:void
Initialized	src/imgui/imgui_internal.h	/^    bool                    Initialized;$/;"	m	struct:ImGuiContext	typeref:typename:bool
InnerClipRect	src/imgui/imgui_internal.h	/^    ImRect                      InnerClipRect;$/;"	m	struct:ImGuiTable	typeref:typename:ImRect
InnerClipRect	src/imgui/imgui_internal.h	/^    ImRect                  InnerClipRect;                      \/\/ == InnerRect shrunk by Wind/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerDir	src/imgui/imgui.cpp	/^    ImVec2  InnerDir;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
InnerDir	src/imgui/imgui.cpp	/^    ImVec2 InnerDir;$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
InnerRect	src/imgui/imgui_internal.h	/^    ImRect                      InnerRect;                  \/\/ InnerRect but without decoratio/;"	m	struct:ImGuiTable	typeref:typename:ImRect
InnerRect	src/imgui/imgui_internal.h	/^    ImRect                  InnerRect;                          \/\/ Inner rectangle (omit title/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerWidth	src/imgui/imgui_internal.h	/^    float                       InnerWidth;                 \/\/ User value passed to BeginTable/;"	m	struct:ImGuiTable	typeref:typename:float
InnerWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*                InnerWindow;                \/\/ Window holding the table data (/;"	m	struct:ImGuiTable	typeref:typename:ImGuiWindow *
InputBuf	src/imgui/imgui_demo.cpp	/^    char                  InputBuf[256];$/;"	m	struct:ExampleAppConsole	typeref:typename:char[256]	file:
InputDouble	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputDouble(const char* label, double* v, double step, double step_fast, const char*/;"	f	class:ImGui	typeref:typename:bool
InputEventsQueue	src/imgui/imgui_internal.h	/^    ImVector<ImGuiInputEvent> InputEventsQueue;                 \/\/ Input events which will be /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiInputEvent>
InputEventsTrail	src/imgui/imgui_internal.h	/^    ImVector<ImGuiInputEvent> InputEventsTrail;                 \/\/ Past input events processed/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiInputEvent>
InputFloat	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, const char* for/;"	f	class:ImGui	typeref:typename:bool
InputFloat2	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat3	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat4	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputInt	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags fla/;"	f	class:ImGui	typeref:typename:bool
InputInt2	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt3	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt4	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputScalar	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_/;"	f	class:ImGui	typeref:typename:bool
InputScalarN	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int component/;"	f	class:ImGui	typeref:typename:bool
InputScalar_DefaultCharsFilter	src/imgui/imgui_widgets.cpp	/^static inline ImGuiInputTextFlags InputScalar_DefaultCharsFilter(ImGuiDataType data_type, const /;"	f	typeref:typename:ImGuiInputTextFlags	file:
InputText	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, /;"	f	class:ImGui	typeref:typename:bool
InputTextCalcTextLenAndLineCount	src/imgui/imgui_widgets.cpp	/^static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)$/;"	f	typeref:typename:int	file:
InputTextCalcTextSizeW	src/imgui/imgui_widgets.cpp	/^static ImVec2 InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const I/;"	f	typeref:typename:ImVec2	file:
InputTextEx	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVe/;"	f	class:ImGui	typeref:typename:bool
InputTextFilterCharacter	src/imgui/imgui_widgets.cpp	/^static bool InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiInput/;"	f	typeref:typename:bool	file:
InputTextMultiline	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size/;"	f	class:ImGui	typeref:typename:bool
InputTextPasswordFont	src/imgui/imgui_internal.h	/^    ImFont                  InputTextPasswordFont;$/;"	m	struct:ImGuiContext	typeref:typename:ImFont
InputTextReconcileUndoStateAfterUserCallback	src/imgui/imgui_widgets.cpp	/^static void InputTextReconcileUndoStateAfterUserCallback(ImGuiInputTextState* state, const char*/;"	f	typeref:typename:void	file:
InputTextState	src/imgui/imgui_internal.h	/^    ImGuiInputTextState     InputTextState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputTextState
InputTextWithHint	src/imgui/imgui_widgets.cpp	/^bool ImGui::InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, I/;"	f	class:ImGui	typeref:typename:bool
InsertChars	src/imgui/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
InstalledCallbacks	src/imgui/imgui_impl_glfw.cpp	/^    bool                    InstalledCallbacks;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:bool	file:
InstanceCurrent	src/imgui/imgui_internal.h	/^    ImS16                       InstanceCurrent;            \/\/ Count of BeginTable() calls wit/;"	m	struct:ImGuiTable	typeref:typename:ImS16
InstanceDataExtra	src/imgui/imgui_internal.h	/^    ImVector<ImGuiTableInstanceData>    InstanceDataExtra;  \/\/ FIXME-OPT: Using a small-vector/;"	m	struct:ImGuiTable	typeref:typename:ImVector<ImGuiTableInstanceData>
InstanceDataFirst	src/imgui/imgui_internal.h	/^    ImGuiTableInstanceData      InstanceDataFirst;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableInstanceData
InstanceInteracted	src/imgui/imgui_internal.h	/^    ImS16                       InstanceInteracted;         \/\/ Mark which instance (generally /;"	m	struct:ImGuiTable	typeref:typename:ImS16
Instruction	src/m6502.h	/^struct Instruction$/;"	s
InvisibleButton	src/imgui/imgui_widgets.cpp	/^bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsActiveIdUsingKey	src/imgui/imgui_internal.h	/^    inline bool             IsActiveIdUsingKey(ImGuiKey key)                            { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsActiveIdUsingNavDir	src/imgui/imgui_internal.h	/^    inline bool             IsActiveIdUsingNavDir(ImGuiDir dir)                         { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsActiveIdUsingNavInput	src/imgui/imgui_internal.h	/^    inline bool             IsActiveIdUsingNavInput(ImGuiNavInput input)                { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsAnyItemActive	src/imgui/imgui.cpp	/^bool ImGui::IsAnyItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemFocused	src/imgui/imgui.cpp	/^bool ImGui::IsAnyItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemHovered	src/imgui/imgui.cpp	/^bool ImGui::IsAnyItemHovered()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyMouseDown	src/imgui/imgui.cpp	/^bool ImGui::IsAnyMouseDown()$/;"	f	class:ImGui	typeref:typename:bool
IsBeingResized	src/imgui/imgui_internal.h	/^    bool                IsBeingResized;$/;"	m	struct:ImGuiOldColumns	typeref:typename:bool
IsClippedEx	src/imgui/imgui.cpp	/^bool ImGui::IsClippedEx(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
IsContextPopupOpen	src/imgui/imgui_internal.h	/^    bool                        IsContextPopupOpen;         \/\/ Set when default context menu i/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDefaultDisplayOrder	src/imgui/imgui_internal.h	/^    bool                        IsDefaultDisplayOrder;      \/\/ Set when display order is uncha/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDefaultSizingPolicy	src/imgui/imgui_internal.h	/^    bool                        IsDefaultSizingPolicy;      \/\/ Set if user didn't explicitly s/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDragDropActive	src/imgui/imgui.cpp	/^bool ImGui::IsDragDropActive()$/;"	f	class:ImGui	typeref:typename:bool
IsDragDropPayloadBeingAccepted	src/imgui/imgui.cpp	/^bool ImGui::IsDragDropPayloadBeingAccepted()$/;"	f	class:ImGui	typeref:typename:bool
IsEnabled	src/imgui/imgui_internal.h	/^    ImU8                    IsEnabled : 1; \/\/ "Visible" in ini file$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:1
IsEnabled	src/imgui/imgui_internal.h	/^    bool                    IsEnabled;                      \/\/ IsUserEnabled && (Flags & ImGui/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsExplicitChild	src/imgui/imgui_internal.h	/^    bool                    IsExplicitChild;                    \/\/ Set when passed _ChildWindo/;"	m	struct:ImGuiWindow	typeref:typename:bool
IsFallbackWindow	src/imgui/imgui_internal.h	/^    bool                    IsFallbackWindow;                   \/\/ Set on the "Debug##Default"/;"	m	struct:ImGuiWindow	typeref:typename:bool
IsFirstFrame	src/imgui/imgui_internal.h	/^    bool                IsFirstFrame;$/;"	m	struct:ImGuiOldColumns	typeref:typename:bool
IsGamepadKey	src/imgui/imgui_internal.h	/^    inline bool             IsGamepadKey(ImGuiKey key)                                  { return/;"	f	namespace:ImGui	typeref:typename:bool
IsGlyphRangeUnused	src/imgui/imgui_draw.cpp	/^bool ImFont::IsGlyphRangeUnused(unsigned int c_begin, unsigned int c_last)$/;"	f	class:ImFont	typeref:typename:bool
IsInitializing	src/imgui/imgui_internal.h	/^    bool                        IsInitializing;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsInsideRow	src/imgui/imgui_internal.h	/^    bool                        IsInsideRow;                \/\/ Set when inside TableBeginRow()/;"	m	struct:ImGuiTable	typeref:typename:bool
IsInverted	src/imgui/imgui_internal.h	/^    bool        IsInverted() const                  { return Min.x > Max.x || Min.y > Max.y; }$/;"	f	struct:ImRect	typeref:typename:bool
IsItemActivated	src/imgui/imgui.cpp	/^bool ImGui::IsItemActivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemActive	src/imgui/imgui.cpp	/^bool ImGui::IsItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsItemClicked	src/imgui/imgui.cpp	/^bool ImGui::IsItemClicked(ImGuiMouseButton mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivated	src/imgui/imgui.cpp	/^bool ImGui::IsItemDeactivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivatedAfterEdit	src/imgui/imgui.cpp	/^bool ImGui::IsItemDeactivatedAfterEdit()$/;"	f	class:ImGui	typeref:typename:bool
IsItemEdited	src/imgui/imgui.cpp	/^bool ImGui::IsItemEdited()$/;"	f	class:ImGui	typeref:typename:bool
IsItemFocused	src/imgui/imgui.cpp	/^bool ImGui::IsItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsItemHovered	src/imgui/imgui.cpp	/^bool ImGui::IsItemHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledOpen	src/imgui/imgui.cpp	/^bool ImGui::IsItemToggledOpen()$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledSelection	src/imgui/imgui.cpp	/^bool ImGui::IsItemToggledSelection()$/;"	f	class:ImGui	typeref:typename:bool
IsItemVisible	src/imgui/imgui.cpp	/^bool ImGui::IsItemVisible()$/;"	f	class:ImGui	typeref:typename:bool
IsKeyDown	src/imgui/imgui.cpp	/^bool ImGui::IsKeyDown(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressed	src/imgui/imgui.cpp	/^bool ImGui::IsKeyPressed(ImGuiKey key, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressedMap	src/imgui/imgui_internal.h	/^    inline bool             IsKeyPressedMap(ImGuiKey key, bool repeat = true)           { IM_ASS/;"	f	namespace:ImGui	typeref:typename:bool
IsKeyReleased	src/imgui/imgui.cpp	/^bool ImGui::IsKeyReleased(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:bool
IsLayoutLocked	src/imgui/imgui_internal.h	/^    bool                        IsLayoutLocked;             \/\/ Set by TableUpdateLayout() whic/;"	m	struct:ImGuiTable	typeref:typename:bool
IsLegacyKey	src/imgui/imgui_internal.h	/^    inline bool             IsLegacyKey(ImGuiKey key)                                   { return/;"	f	namespace:ImGui	typeref:typename:bool
IsLegacyNativeDupe	src/imgui/imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	f	struct:ShowDemoWindowMisc::funcs	typeref:typename:bool	file:
IsMouseClicked	src/imgui/imgui.cpp	/^bool ImGui::IsMouseClicked(ImGuiMouseButton button, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDoubleClicked	src/imgui/imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDown	src/imgui/imgui.cpp	/^bool ImGui::IsMouseDown(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragPastThreshold	src/imgui/imgui.cpp	/^bool ImGui::IsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragging	src/imgui/imgui.cpp	/^bool ImGui::IsMouseDragging(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseHoveringRect	src/imgui/imgui.cpp	/^bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)$/;"	f	class:ImGui	typeref:typename:bool
IsMousePosValid	src/imgui/imgui.cpp	/^bool ImGui::IsMousePosValid(const ImVec2* mouse_pos)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleased	src/imgui/imgui.cpp	/^bool ImGui::IsMouseReleased(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsNamedKey	src/imgui/imgui_internal.h	/^    inline bool             IsNamedKey(ImGuiKey key)                                    { return/;"	f	namespace:ImGui	typeref:typename:bool
IsNavInputDown	src/imgui/imgui_internal.h	/^    inline bool             IsNavInputDown(ImGuiNavInput n)                             { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsNavInputTest	src/imgui/imgui_internal.h	/^    inline bool             IsNavInputTest(ImGuiNavInput n, ImGuiNavReadMode rm)        { return/;"	f	namespace:ImGui	typeref:typename:bool
IsPopupOpen	src/imgui/imgui.cpp	/^bool ImGui::IsPopupOpen(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
IsPopupOpen	src/imgui/imgui.cpp	/^bool ImGui::IsPopupOpen(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
IsPreserveWidthAuto	src/imgui/imgui_internal.h	/^    bool                    IsPreserveWidthAuto;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsRectVisible	src/imgui/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)$/;"	f	class:ImGui	typeref:typename:bool
IsRectVisible	src/imgui/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:bool
IsRequestOutput	src/imgui/imgui_internal.h	/^    bool                    IsRequestOutput;                \/\/ Return value for TableSetColumn/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsResetAllRequest	src/imgui/imgui_internal.h	/^    bool                        IsResetAllRequest;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsResetDisplayOrderRequest	src/imgui/imgui_internal.h	/^    bool                        IsResetDisplayOrderRequest;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsRootOfOpenMenuSet	src/imgui/imgui_widgets.cpp	/^static bool IsRootOfOpenMenuSet()$/;"	f	typeref:typename:bool	file:
IsSameLine	src/imgui/imgui_internal.h	/^    bool                    IsSameLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
IsSettingsDirty	src/imgui/imgui_internal.h	/^    bool                        IsSettingsDirty;            \/\/ Set when table settings have ch/;"	m	struct:ImGuiTable	typeref:typename:bool
IsSettingsRequestLoad	src/imgui/imgui_internal.h	/^    bool                        IsSettingsRequestLoad;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsSkipItems	src/imgui/imgui_internal.h	/^    bool                    IsSkipItems;                    \/\/ Do we want item submissions to /;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsSortSpecsDirty	src/imgui/imgui_internal.h	/^    bool                        IsSortSpecsDirty;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsStretch	src/imgui/imgui_internal.h	/^    ImU8                    IsStretch : 1;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:1
IsUnfrozenRows	src/imgui/imgui_internal.h	/^    bool                        IsUnfrozenRows;             \/\/ Set when we got past the frozen/;"	m	struct:ImGuiTable	typeref:typename:bool
IsUserEnabled	src/imgui/imgui_internal.h	/^    bool                    IsUserEnabled;                  \/\/ Is the column not marked Hidden/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsUserEnabledNextFrame	src/imgui/imgui_internal.h	/^    bool                    IsUserEnabledNextFrame;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsUsingHeaders	src/imgui/imgui_internal.h	/^    bool                        IsUsingHeaders;             \/\/ Set when the first row had the /;"	m	struct:ImGuiTable	typeref:typename:bool
IsVisibleX	src/imgui/imgui_internal.h	/^    bool                    IsVisibleX;                     \/\/ Is actually in view (e.g. overl/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsVisibleY	src/imgui/imgui_internal.h	/^    bool                    IsVisibleY;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsWindowAbove	src/imgui/imgui.cpp	/^bool ImGui::IsWindowAbove(ImGuiWindow* potential_above, ImGuiWindow* potential_below)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowActiveAndVisible	src/imgui/imgui.cpp	/^static bool IsWindowActiveAndVisible(ImGuiWindow* window)$/;"	f	typeref:typename:bool	file:
IsWindowAppearing	src/imgui/imgui.cpp	/^bool ImGui::IsWindowAppearing()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowChildOf	src/imgui/imgui.cpp	/^bool ImGui::IsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent, bool popup_hiera/;"	f	class:ImGui	typeref:typename:bool
IsWindowCollapsed	src/imgui/imgui.cpp	/^bool ImGui::IsWindowCollapsed()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowContentHoverable	src/imgui/imgui.cpp	/^static inline bool IsWindowContentHoverable(ImGuiWindow* window, ImGuiHoveredFlags flags)$/;"	f	typeref:typename:bool	file:
IsWindowFocused	src/imgui/imgui.cpp	/^bool ImGui::IsWindowFocused(ImGuiFocusedFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowHovered	src/imgui/imgui.cpp	/^bool ImGui::IsWindowHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowNavFocusable	src/imgui/imgui.cpp	/^bool ImGui::IsWindowNavFocusable(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowWithinBeginStackOf	src/imgui/imgui.cpp	/^bool ImGui::IsWindowWithinBeginStackOf(ImGuiWindow* window, ImGuiWindow* potential_parent)$/;"	f	class:ImGui	typeref:typename:bool
ItemAdd	src/imgui/imgui.cpp	/^bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg, ImGuiItemFlags extra/;"	f	class:ImGui	typeref:typename:bool
ItemFlagsStack	src/imgui/imgui_internal.h	/^    ImVector<ImGuiItemFlags>ItemFlagsStack;                     \/\/ Stack for PushItemFlag()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiItemFlags>
ItemGetter	src/imgui/imgui_demo.cpp	/^        struct Funcs { static bool ItemGetter(void* data, int n, const char** out_str) { *out_st/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:bool	file:
ItemHoverable	src/imgui/imgui.cpp	/^bool ImGui::ItemHoverable(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
ItemSize	src/imgui/imgui.cpp	/^void ImGui::ItemSize(const ImVec2& size, float text_baseline_y)$/;"	f	class:ImGui	typeref:typename:void
ItemSize	src/imgui/imgui_internal.h	/^    inline void             ItemSize(const ImRect& bb, float text_baseline_y = -1.0f) { ItemSize/;"	f	namespace:ImGui	typeref:typename:void
ItemSpacingY	src/imgui/imgui_internal.h	/^    float               ItemSpacingY;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ItemWidth	src/imgui/imgui_internal.h	/^    float                   ItemWidth;                      \/\/ Current item width for the colu/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ItemWidth	src/imgui/imgui_internal.h	/^    float                   ItemWidth;              \/\/ Current item width (>0.0: width in pixe/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
ItemWidthDefault	src/imgui/imgui_internal.h	/^    float                   ItemWidthDefault;$/;"	m	struct:ImGuiWindow	typeref:typename:float
ItemWidthStack	src/imgui/imgui_internal.h	/^    ImVector<float>         ItemWidthStack;         \/\/ Store item widths to restore (attention/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
Items	src/imgui/imgui_demo.cpp	/^    ImVector<char*>       Items;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
ItemsFrozen	src/imgui/imgui_internal.h	/^    int                             ItemsFrozen;$/;"	m	struct:ImGuiListClipperData	typeref:typename:int
Items_ArrayGetter	src/imgui/imgui_widgets.cpp	/^static bool Items_ArrayGetter(void* data, int idx, const char** out_text)$/;"	f	typeref:typename:bool	file:
Items_SingleStringGetter	src/imgui/imgui_widgets.cpp	/^static bool Items_SingleStringGetter(void* data, int idx, const char** out_text)$/;"	f	typeref:typename:bool	file:
JMP_ABS	src/m6502.h	/^    JMP_ABS = 0x4c$/;"	e	enum:TTInstruction
KeepAliveID	src/imgui/imgui.cpp	/^void ImGui::KeepAliveID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Key	src/imgui/imgui_demo.cpp	/^                struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ShowDemoWindowMisc::KeyLayoutData	typeref:typename:ImGuiKey	file:
Key	src/imgui/imgui_internal.h	/^        ImGuiInputEventKey          Key;            \/\/ if Type == ImGuiInputEventType_Key$/;"	m	union:ImGuiInputEvent::__anon6fa7fe33020a	typeref:typename:ImGuiInputEventKey
Key	src/imgui/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:ImGuiKey
KeyLayoutData	src/imgui/imgui_demo.cpp	/^                struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	s	function:ShowDemoWindowMisc	file:
LDA_I	src/m6502.h	/^    LDA_I   = 0xA9,$/;"	e	enum:TTInstruction
LDX_I	src/m6502.h	/^    LDX_I   = 0xA2,$/;"	e	enum:TTInstruction
LDY_I	src/m6502.h	/^    LDY_I   = 0xA0,$/;"	e	enum:TTInstruction
LOW	src/typedefs.h	/^const bool LOW  = false;$/;"	v	typeref:typename:const bool
Label	src/imgui/imgui_demo.cpp	/^                struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ShowDemoWindowMisc::KeyLayoutData	typeref:typename:const char *	file:
LabelText	src/imgui/imgui_widgets.cpp	/^void ImGui::LabelText(const char* label, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LabelTextV	src/imgui/imgui_widgets.cpp	/^void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LastActiveFrame	src/imgui/imgui_internal.h	/^    int                     LastActiveFrame;$/;"	m	struct:ImGuiStackTool	typeref:typename:int
LastActiveId	src/imgui/imgui_internal.h	/^    ImGuiID                 LastActiveId;                       \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
LastActiveIdTimer	src/imgui/imgui_internal.h	/^    float                   LastActiveIdTimer;                  \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:float
LastFirstRowHeight	src/imgui/imgui_internal.h	/^    float                       LastFirstRowHeight;         \/\/ Height of first row from last f/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastFrameActive	src/imgui/imgui_internal.h	/^    int                         LastFrameActive;$/;"	m	struct:ImGuiTable	typeref:typename:int
LastFrameActive	src/imgui/imgui_internal.h	/^    int                     LastFrameActive;                    \/\/ Last frame number the windo/;"	m	struct:ImGuiWindow	typeref:typename:int
LastFrameSelected	src/imgui/imgui_internal.h	/^    int                 LastFrameSelected;      \/\/ This allows us to infer an ordered list of /;"	m	struct:ImGuiTabItem	typeref:typename:int
LastFrameVisible	src/imgui/imgui_internal.h	/^    int                 LastFrameVisible;$/;"	m	struct:ImGuiTabItem	typeref:typename:int
LastItemData	src/imgui/imgui_internal.h	/^    ImGuiLastItemData       LastItemData;                       \/\/ Storage for last submitted /;"	m	struct:ImGuiContext	typeref:typename:ImGuiLastItemData
LastOuterHeight	src/imgui/imgui_internal.h	/^    float                       LastOuterHeight;            \/\/ Outer height from last frame \//;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastResizedColumn	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         LastResizedColumn;          \/\/ Index of column being resized f/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
LastRowFlags	src/imgui/imgui_internal.h	/^    ImGuiTableRowFlags          LastRowFlags : 16;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableRowFlags:16
LastTabItemIdx	src/imgui/imgui_internal.h	/^    ImS16               LastTabItemIdx;         \/\/ Index of last BeginTabItem() tab for use by/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
LastTimeActive	src/imgui/imgui_internal.h	/^    float                       LastTimeActive;             \/\/ Last timestamp this structure w/;"	m	struct:ImGuiTableTempData	typeref:typename:float
LastTimeActive	src/imgui/imgui_internal.h	/^    float                   LastTimeActive;                     \/\/ Last timestamp the window w/;"	m	struct:ImGuiWindow	typeref:typename:float
LastValidMousePos	src/imgui/imgui_impl_glfw.cpp	/^    ImVec2                  LastValidMousePos;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:ImVec2	file:
Layers	src/imgui/imgui_internal.h	/^    ImVector<ImDrawList*>   Layers[2];           \/\/ Global layers for: regular, tooltip$/;"	m	struct:ImDrawDataBuilder	typeref:typename:ImVector<ImDrawList * >[2]
Layout	src/memory.h	/^namespace Layout$/;"	n
LayoutType	src/imgui/imgui_internal.h	/^    ImGuiLayoutType         LayoutType;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
LeftMostEnabledColumn	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         LeftMostEnabledColumn;      \/\/ Index of left-most non-hidden c/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
LeftMostStretchedColumn	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         LeftMostStretchedColumn;    \/\/ Index of left-most stretched co/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
LineMaxY	src/imgui/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
LineMinY	src/imgui/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
LineOffsets	src/imgui/imgui_demo.cpp	/^    ImVector<int>       LineOffsets; \/\/ Index to lines offset. We maintain this with AddLog() /;"	m	struct:ExampleAppLog	typeref:typename:ImVector<int>	file:
ListBox	src/imgui/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, bool (*items_getter)(void*, int, const/;"	f	class:ImGui	typeref:typename:bool
ListBox	src/imgui/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_c/;"	f	class:ImGui	typeref:typename:bool
ListBoxHeader	src/imgui/imgui_widgets.cpp	/^bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)$/;"	f	class:ImGui	typeref:typename:bool
ListClipper	src/imgui/imgui_internal.h	/^    ImGuiListClipper*               ListClipper;$/;"	m	struct:ImGuiListClipperData	typeref:typename:ImGuiListClipper *
LoadIniSettingsFromDisk	src/imgui/imgui.cpp	/^void ImGui::LoadIniSettingsFromDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
LoadIniSettingsFromMemory	src/imgui/imgui.cpp	/^void ImGui::LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size)$/;"	f	class:ImGui	typeref:typename:void
LogBegin	src/imgui/imgui.cpp	/^void ImGui::LogBegin(ImGuiLogType type, int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogBuffer	src/imgui/imgui_internal.h	/^    ImGuiTextBuffer         LogBuffer;                          \/\/ Accumulation buffer when lo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
LogButtons	src/imgui/imgui.cpp	/^void ImGui::LogButtons()$/;"	f	class:ImGui	typeref:typename:void
LogDepthRef	src/imgui/imgui_internal.h	/^    int                     LogDepthRef;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpand	src/imgui/imgui_internal.h	/^    int                     LogDepthToExpand;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpandDefault	src/imgui/imgui_internal.h	/^    int                     LogDepthToExpandDefault;            \/\/ Default\/stored value for L/;"	m	struct:ImGuiContext	typeref:typename:int
LogEnabled	src/imgui/imgui_internal.h	/^    bool                    LogEnabled;                         \/\/ Currently capturing$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogFile	src/imgui/imgui_internal.h	/^    ImFileHandle            LogFile;                            \/\/ If != NULL log to stdout\/ /;"	m	struct:ImGuiContext	typeref:typename:ImFileHandle
LogFinish	src/imgui/imgui.cpp	/^void ImGui::LogFinish()$/;"	f	class:ImGui	typeref:typename:void
LogLineFirstItem	src/imgui/imgui_internal.h	/^    bool                    LogLineFirstItem;$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogLinePosY	src/imgui/imgui_internal.h	/^    float                   LogLinePosY;$/;"	m	struct:ImGuiContext	typeref:typename:float
LogNextPrefix	src/imgui/imgui_internal.h	/^    const char*             LogNextPrefix;$/;"	m	struct:ImGuiContext	typeref:typename:const char *
LogNextSuffix	src/imgui/imgui_internal.h	/^    const char*             LogNextSuffix;$/;"	m	struct:ImGuiContext	typeref:typename:const char *
LogRenderedText	src/imgui/imgui.cpp	/^void ImGui::LogRenderedText(const ImVec2* ref_pos, const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
LogSetNextTextDecoration	src/imgui/imgui.cpp	/^void ImGui::LogSetNextTextDecoration(const char* prefix, const char* suffix)$/;"	f	class:ImGui	typeref:typename:void
LogText	src/imgui/imgui.cpp	/^void ImGui::LogText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LogTextV	src/imgui/imgui.cpp	/^static inline void LogTextV(ImGuiContext& g, const char* fmt, va_list args)$/;"	f	typeref:typename:void	file:
LogTextV	src/imgui/imgui.cpp	/^void ImGui::LogTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LogToBuffer	src/imgui/imgui.cpp	/^void ImGui::LogToBuffer(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToClipboard	src/imgui/imgui.cpp	/^void ImGui::LogToClipboard(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToFile	src/imgui/imgui.cpp	/^void ImGui::LogToFile(int auto_open_depth, const char* filename)$/;"	f	class:ImGui	typeref:typename:void
LogToTTY	src/imgui/imgui.cpp	/^void ImGui::LogToTTY(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogType	src/imgui/imgui_internal.h	/^    ImGuiLogType            LogType;                            \/\/ Capture target$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiLogType
LossynessOffset	src/imgui/imgui_internal.h	/^    float                           LossynessOffset;$/;"	m	struct:ImGuiListClipperData	typeref:typename:float
LowerBound	src/imgui/imgui.cpp	/^static ImGuiStorage::ImGuiStoragePair* LowerBound(ImVector<ImGuiStorage::ImGuiStoragePair>& data/;"	f	typeref:typename:ImGuiStorage::ImGuiStoragePair *	file:
M6502_H	src/m6502.h	/^#define M6502_H$/;"	d
MAP_ANALOG	src/imgui/imgui_impl_glfw.cpp	/^    #define MAP_ANALOG(/;"	d	file:
MAP_BUTTON	src/imgui/imgui_impl_glfw.cpp	/^    #define MAP_BUTTON(/;"	d	file:
MEMORY_H	src/memory.h	/^#define MEMORY_H$/;"	d
MEM_SIZE	src/memory.h	/^    const u32 MEM_SIZE          = 0x10000;$/;"	v	namespace:Layout	typeref:typename:const u32
MallocWrapper	src/imgui/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void *	file:
MallocWrapper	src/imgui/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); return mal/;"	f	typeref:typename:void *	file:
Map	src/imgui/imgui_internal.h	/^    ImGuiStorage    Map;        \/\/ ID->Index$/;"	m	struct:ImPool	typeref:typename:ImGuiStorage
MarkIniSettingsDirty	src/imgui/imgui.cpp	/^void ImGui::MarkIniSettingsDirty()$/;"	f	class:ImGui	typeref:typename:void
MarkIniSettingsDirty	src/imgui/imgui.cpp	/^void ImGui::MarkIniSettingsDirty(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
MarkItemEdited	src/imgui/imgui.cpp	/^void ImGui::MarkItemEdited(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Max	src/imgui/imgui_internal.h	/^    ImVec2      Max;    \/\/ Lower-right$/;"	m	struct:ImRect	typeref:typename:ImVec2
Max	src/imgui/imgui_internal.h	/^    int     Max;$/;"	m	struct:ImGuiListClipperRange	typeref:typename:int
MaxX	src/imgui/imgui_internal.h	/^    float                   MaxX;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
MemAlloc	src/imgui/imgui.cpp	/^void* ImGui::MemAlloc(size_t size)$/;"	f	class:ImGui	typeref:typename:void *
MemFree	src/imgui/imgui.cpp	/^void ImGui::MemFree(void* ptr)$/;"	f	class:ImGui	typeref:typename:void
Memory	src/memory.cpp	/^Memory::Memory()$/;"	f	class:Memory
Memory	src/memory.h	/^struct Memory $/;"	s
MemoryCompacted	src/imgui/imgui_internal.h	/^    bool                        MemoryCompacted;$/;"	m	struct:ImGuiTable	typeref:typename:bool
MemoryCompacted	src/imgui/imgui_internal.h	/^    bool                    MemoryCompacted;                    \/\/ Set when window extraneous /;"	m	struct:ImGuiWindow	typeref:typename:bool
MemoryDrawListIdxCapacity	src/imgui/imgui_internal.h	/^    int                     MemoryDrawListIdxCapacity;          \/\/ Backup of last idx\/vtx cou/;"	m	struct:ImGuiWindow	typeref:typename:int
MemoryDrawListVtxCapacity	src/imgui/imgui_internal.h	/^    int                     MemoryDrawListVtxCapacity;$/;"	m	struct:ImGuiWindow	typeref:typename:int
MenuBarAppending	src/imgui/imgui_internal.h	/^    bool                    MenuBarAppending;       \/\/ FIXME: Remove this$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
MenuBarHeight	src/imgui/imgui_internal.h	/^    float       MenuBarHeight() const   { ImGuiContext& g = *GImGui; return (Flags & ImGuiWindow/;"	f	struct:ImGuiWindow	typeref:typename:float
MenuBarOffset	src/imgui/imgui_internal.h	/^    ImVec2                  MenuBarOffset;          \/\/ MenuBarOffset.x is sort of equivalent o/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
MenuBarOffsetMinVal	src/imgui/imgui_internal.h	/^    ImVec2                      MenuBarOffsetMinVal;    \/\/ (Always on) This is not exposed pub/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
MenuBarRect	src/imgui/imgui_internal.h	/^    ImRect      MenuBarRect() const     { float y1 = Pos.y + TitleBarHeight(); return ImRect(Pos/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
MenuColumns	src/imgui/imgui_internal.h	/^    ImGuiMenuColumns        MenuColumns;            \/\/ Simplified columns storage for menu ite/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiMenuColumns
MenuItem	src/imgui/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItem	src/imgui/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItemEx	src/imgui/imgui_widgets.cpp	/^bool ImGui::MenuItemEx(const char* label, const char* icon, const char* shortcut, bool selected,/;"	f	class:ImGui	typeref:typename:bool
MenusIdSubmittedThisFrame	src/imgui/imgui_internal.h	/^    ImVector<ImGuiID>       MenusIdSubmittedThisFrame;          \/\/ A list of menu IDs that wer/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiID>
Merge	src/imgui/imgui_draw.cpp	/^void ImDrawListSplitter::Merge(ImDrawList* draw_list)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
MergeGroup	src/imgui/imgui_tables.cpp	/^        MergeGroup() { ChannelsCount = 0; }$/;"	f	struct:ImGui::TableMergeDrawChannels::MergeGroup	file:
MergeGroup	src/imgui/imgui_tables.cpp	/^    struct MergeGroup$/;"	s	function:ImGui::TableMergeDrawChannels	file:
MetricsHelpMarker	src/imgui/imgui.cpp	/^static void MetricsHelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
Min	src/imgui/imgui_internal.h	/^    ImVec2      Min;    \/\/ Upper-left$/;"	m	struct:ImRect	typeref:typename:ImVec2
Min	src/imgui/imgui_internal.h	/^    int     Min;$/;"	m	struct:ImGuiListClipperRange	typeref:typename:int
MinColumnWidth	src/imgui/imgui_internal.h	/^    float                       MinColumnWidth;$/;"	m	struct:ImGuiTable	typeref:typename:float
MinX	src/imgui/imgui_internal.h	/^    float                   MinX;                           \/\/ Absolute positions$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Mode	src/imgui/imgui_demo.cpp	/^            enum Mode$/;"	g	function:ShowDemoWindowWidgets	file:
Mode_Copy	src/imgui/imgui_demo.cpp	/^                Mode_Copy,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Move	src/imgui/imgui_demo.cpp	/^                Mode_Move,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Swap	src/imgui/imgui_demo.cpp	/^                Mode_Swap$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
MouseButton	src/imgui/imgui_internal.h	/^        ImGuiInputEventMouseButton  MouseButton;    \/\/ if Type == ImGuiInputEventType_MouseBut/;"	m	union:ImGuiInputEvent::__anon6fa7fe33020a	typeref:typename:ImGuiInputEventMouseButton
MouseCursor	src/imgui/imgui_internal.h	/^    ImGuiMouseCursor        MouseCursor;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMouseCursor
MouseCursors	src/imgui/imgui_impl_glfw.cpp	/^    GLFWcursor*             MouseCursors[ImGuiMouseCursor_COUNT];$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcursor * []	file:
MouseLastValidPos	src/imgui/imgui_internal.h	/^    ImVec2                  MouseLastValidPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
MousePos	src/imgui/imgui_internal.h	/^        ImGuiInputEventMousePos     MousePos;       \/\/ if Type == ImGuiInputEventType_MousePos$/;"	m	union:ImGuiInputEvent::__anon6fa7fe33020a	typeref:typename:ImGuiInputEventMousePos
MouseWheel	src/imgui/imgui_internal.h	/^        ImGuiInputEventMouseWheel   MouseWheel;     \/\/ if Type == ImGuiInputEventType_MouseWhe/;"	m	union:ImGuiInputEvent::__anon6fa7fe33020a	typeref:typename:ImGuiInputEventMouseWheel
MouseWindow	src/imgui/imgui_impl_glfw.cpp	/^    GLFWwindow*             MouseWindow;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWwindow *	file:
MoveId	src/imgui/imgui_internal.h	/^    ImGuiID                 MoveId;                             \/\/ == window->GetID("#MOVE")$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
MovingWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*            MovingWindow;                       \/\/ Track the window we clicked/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
MyCallback	src/imgui/imgui_demo.cpp	/^                static int MyCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:int	file:
MyDocument	src/imgui/imgui_demo.cpp	/^    MyDocument(const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f, 1.0f, 1.0f/;"	f	struct:MyDocument	file:
MyDocument	src/imgui/imgui_demo.cpp	/^struct MyDocument$/;"	s	file:
MyInputTextMultiline	src/imgui/imgui_demo.cpp	/^                static bool MyInputTextMultiline(const char* label, ImVector<char>* my_str, cons/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:bool	file:
MyItem	src/imgui/imgui_demo.cpp	/^struct MyItem$/;"	s	namespace:__anonecc473760111	file:
MyItemColumnID	src/imgui/imgui_demo.cpp	/^enum MyItemColumnID$/;"	g	namespace:__anonecc473760111	file:
MyItemColumnID_Action	src/imgui/imgui_demo.cpp	/^    MyItemColumnID_Action,$/;"	e	enum:__anonecc473760111::MyItemColumnID	file:
MyItemColumnID_Description	src/imgui/imgui_demo.cpp	/^    MyItemColumnID_Description$/;"	e	enum:__anonecc473760111::MyItemColumnID	file:
MyItemColumnID_ID	src/imgui/imgui_demo.cpp	/^    MyItemColumnID_ID,$/;"	e	enum:__anonecc473760111::MyItemColumnID	file:
MyItemColumnID_Name	src/imgui/imgui_demo.cpp	/^    MyItemColumnID_Name,$/;"	e	enum:__anonecc473760111::MyItemColumnID	file:
MyItemColumnID_Quantity	src/imgui/imgui_demo.cpp	/^    MyItemColumnID_Quantity,$/;"	e	enum:__anonecc473760111::MyItemColumnID	file:
MyResizeCallback	src/imgui/imgui_demo.cpp	/^                static int MyResizeCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:int	file:
MyTreeNode	src/imgui/imgui_demo.cpp	/^            struct MyTreeNode$/;"	s	function:ShowDemoWindowTables	file:
NAV_MAP_KEY	src/imgui/imgui.cpp	/^        #define NAV_MAP_KEY(/;"	d	file:
NAV_WINDOWING_HIGHLIGHT_DELAY	src/imgui/imgui.cpp	/^static const float NAV_WINDOWING_HIGHLIGHT_DELAY            = 0.20f;    \/\/ Time before the hig/;"	v	typeref:typename:const float	file:
NAV_WINDOWING_LIST_APPEAR_DELAY	src/imgui/imgui.cpp	/^static const float NAV_WINDOWING_LIST_APPEAR_DELAY          = 0.15f;    \/\/ Time before the win/;"	v	typeref:typename:const float	file:
NMI_VECTOR	src/memory.h	/^    const u16 NMI_VECTOR         = 0xFFFA; \/\/ 2 bytes$/;"	v	namespace:Layout	typeref:typename:const u16
NOMINMAX	src/imgui/imgui.cpp	/^#define NOMINMAX$/;"	d	file:
NOP	src/m6502.h	/^    NOP     = 0xEA,$/;"	e	enum:TTInstruction
Name	src/imgui/imgui_demo.cpp	/^                const char*     Name;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:const char *	file:
Name	src/imgui/imgui_demo.cpp	/^    const char* Name;       \/\/ Document title$/;"	m	struct:MyDocument	typeref:typename:const char *	file:
Name	src/imgui/imgui_demo.cpp	/^    const char* Name;$/;"	m	struct:__anonecc473760111::MyItem	typeref:typename:const char *	file:
Name	src/imgui/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:const char *	file:
Name	src/imgui/imgui_internal.h	/^    char*                   Name;                               \/\/ Window name, owned by the w/;"	m	struct:ImGuiWindow	typeref:typename:char *
Name	src/imgui/imgui_internal.h	/^    const char* Name;           \/\/ Short descriptive name for the type, for debugging$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
NameBufLen	src/imgui/imgui_internal.h	/^    int                     NameBufLen;                         \/\/ Size of buffer storing Name/;"	m	struct:ImGuiWindow	typeref:typename:int
NameOffset	src/imgui/imgui_internal.h	/^    ImS16                   NameOffset;                     \/\/ Offset into parent ColumnsNames/;"	m	struct:ImGuiTableColumn	typeref:typename:ImS16
NameOffset	src/imgui/imgui_internal.h	/^    ImS32               NameOffset;             \/\/ When Window==NULL, offset to name within pa/;"	m	struct:ImGuiTabItem	typeref:typename:ImS32
NavActivateDownId	src/imgui/imgui_internal.h	/^    ImGuiID                 NavActivateDownId;                  \/\/ ~~ IsNavInputDown(ImGuiNavI/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivateFlags	src/imgui/imgui_internal.h	/^    ImGuiActivateFlags      NavActivateFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiActivateFlags
NavActivateId	src/imgui/imgui_internal.h	/^    ImGuiID                 NavActivateId;                      \/\/ ~~ (g.ActiveId == 0) && IsN/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivateInputId	src/imgui/imgui_internal.h	/^    ImGuiID                 NavActivateInputId;                 \/\/ ~~ IsNavInputPressed(ImGuiN/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivatePressedId	src/imgui/imgui_internal.h	/^    ImGuiID                 NavActivatePressedId;               \/\/ ~~ IsNavInputPressed(ImGuiN/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavAnyRequest	src/imgui/imgui_internal.h	/^    bool                    NavAnyRequest;                      \/\/ ~~ NavMoveRequest || NavIni/;"	m	struct:ImGuiContext	typeref:typename:bool
NavApplyItemToResult	src/imgui/imgui.cpp	/^static void ImGui::NavApplyItemToResult(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:void	file:
NavCalcPreferredRefPos	src/imgui/imgui.cpp	/^static ImVec2 ImGui::NavCalcPreferredRefPos()$/;"	f	class:ImGui	typeref:typename:ImVec2	file:
NavClampRectToVisibleAreaForMoveDir	src/imgui/imgui.cpp	/^static void inline NavClampRectToVisibleAreaForMoveDir(ImGuiDir move_dir, ImRect& r, const ImRec/;"	f	typeref:typename:void	file:
NavDisableHighlight	src/imgui/imgui_internal.h	/^    bool                    NavDisableHighlight;                \/\/ When user starts using mous/;"	m	struct:ImGuiContext	typeref:typename:bool
NavDisableMouseHover	src/imgui/imgui_internal.h	/^    bool                    NavDisableMouseHover;               \/\/ When user starts using game/;"	m	struct:ImGuiContext	typeref:typename:bool
NavEndFrame	src/imgui/imgui.cpp	/^static void ImGui::NavEndFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
NavFocusScopeId	src/imgui/imgui_internal.h	/^    ImGuiID                 NavFocusScopeId;                    \/\/ Identify a selection scope /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavFocusScopeIdCurrent	src/imgui/imgui_internal.h	/^    ImGuiID                 NavFocusScopeIdCurrent; \/\/ Current focus scope ID while appending$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiID
NavHasScroll	src/imgui/imgui_internal.h	/^    bool                    NavHasScroll;           \/\/ Set when scrolling can be used (ScrollM/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavHideHighlightOneFrame	src/imgui/imgui_internal.h	/^    bool                    NavHideHighlightOneFrame;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavId	src/imgui/imgui_internal.h	/^    ImGuiID                 NavId;                              \/\/ Focused item for navigation$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavIdIsAlive	src/imgui/imgui_internal.h	/^    bool                    NavIdIsAlive;                       \/\/ Nav widget has been seen th/;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitRequest	src/imgui/imgui_internal.h	/^    bool                    NavInitRequest;                     \/\/ Init request for appearing /;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitRequestApplyResult	src/imgui/imgui.cpp	/^void ImGui::NavInitRequestApplyResult()$/;"	f	class:ImGui	typeref:typename:void
NavInitRequestFromMove	src/imgui/imgui_internal.h	/^    bool                    NavInitRequestFromMove;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitResultId	src/imgui/imgui_internal.h	/^    ImGuiID                 NavInitResultId;                    \/\/ Init request result (first /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavInitResultRectRel	src/imgui/imgui_internal.h	/^    ImRect                  NavInitResultRectRel;               \/\/ Init request result rectang/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavInitWindow	src/imgui/imgui.cpp	/^void ImGui::NavInitWindow(ImGuiWindow* window, bool force_reinit)$/;"	f	class:ImGui	typeref:typename:void
NavInputSource	src/imgui/imgui_internal.h	/^    ImGuiInputSource        NavInputSource;                     \/\/ Keyboard or Gamepad mode? T/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
NavJustMovedToFocusScopeId	src/imgui/imgui_internal.h	/^    ImGuiID                 NavJustMovedToFocusScopeId;         \/\/ Just navigated to this focu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToId	src/imgui/imgui_internal.h	/^    ImGuiID                 NavJustMovedToId;                   \/\/ Just navigated to this id (/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToKeyMods	src/imgui/imgui_internal.h	/^    ImGuiModFlags           NavJustMovedToKeyMods;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiModFlags
NavLastChildNavWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*            NavLastChildNavWindow;              \/\/ When going to the menu bar,/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
NavLastIds	src/imgui/imgui_internal.h	/^    ImGuiID                 NavLastIds[ImGuiNavLayer_COUNT];    \/\/ Last known NavId for this w/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID[]
NavLayer	src/imgui/imgui_internal.h	/^    ImGuiNavLayer           NavLayer;                           \/\/ Layer we are navigating on./;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavLayer
NavLayerCurrent	src/imgui/imgui_internal.h	/^    ImGuiNavLayer           NavLayerCurrent;        \/\/ Current layer, 0..31 (we currently only/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiNavLayer
NavLayerCurrent	src/imgui/imgui_internal.h	/^    ImS8                    NavLayerCurrent;                \/\/ ImGuiNavLayer in 1 byte$/;"	m	struct:ImGuiTableColumn	typeref:typename:ImS8
NavLayersActiveMask	src/imgui/imgui_internal.h	/^    short                   NavLayersActiveMask;    \/\/ Which layers have been written to (resu/;"	m	struct:ImGuiWindowTempData	typeref:typename:short
NavLayersActiveMaskNext	src/imgui/imgui_internal.h	/^    short                   NavLayersActiveMaskNext;\/\/ Which layers have been written to (accu/;"	m	struct:ImGuiWindowTempData	typeref:typename:short
NavMousePosDirty	src/imgui/imgui_internal.h	/^    bool                    NavMousePosDirty;                   \/\/ When set we will update mou/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveClipDir	src/imgui/imgui_internal.h	/^    ImGuiDir                NavMoveClipDir;                     \/\/ FIXME-NAV: Describe the pur/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDir	src/imgui/imgui_internal.h	/^    ImGuiDir                NavMoveDir;                         \/\/ Direction of the move reque/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDirForDebug	src/imgui/imgui_internal.h	/^    ImGuiDir                NavMoveDirForDebug;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveFlags	src/imgui/imgui_internal.h	/^    ImGuiNavMoveFlags       NavMoveFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveFlags
NavMoveForwardToNextFrame	src/imgui/imgui_internal.h	/^    bool                    NavMoveForwardToNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveKeyMods	src/imgui/imgui_internal.h	/^    ImGuiModFlags           NavMoveKeyMods;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiModFlags
NavMoveRequestApplyResult	src/imgui/imgui.cpp	/^void ImGui::NavMoveRequestApplyResult()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestButNoResultYet	src/imgui/imgui.cpp	/^bool ImGui::NavMoveRequestButNoResultYet()$/;"	f	class:ImGui	typeref:typename:bool
NavMoveRequestCancel	src/imgui/imgui.cpp	/^void ImGui::NavMoveRequestCancel()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestForward	src/imgui/imgui.cpp	/^void ImGui::NavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_f/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestResolveWithLastItem	src/imgui/imgui.cpp	/^void ImGui::NavMoveRequestResolveWithLastItem(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestSubmit	src/imgui/imgui.cpp	/^void ImGui::NavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_fl/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestTryWrapping	src/imgui/imgui.cpp	/^void ImGui::NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags wrap_flags)$/;"	f	class:ImGui	typeref:typename:void
NavMoveResultLocal	src/imgui/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultLocal;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveResultLocalVisible	src/imgui/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultLocalVisible;          \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveResultOther	src/imgui/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultOther;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveScoringItems	src/imgui/imgui_internal.h	/^    bool                    NavMoveScoringItems;                \/\/ Move request submitted, sti/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveScrollFlags	src/imgui/imgui_internal.h	/^    ImGuiScrollFlags        NavMoveScrollFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiScrollFlags
NavMoveSubmitted	src/imgui/imgui_internal.h	/^    bool                    NavMoveSubmitted;                   \/\/ Move request submitted, wil/;"	m	struct:ImGuiContext	typeref:typename:bool
NavNextActivateFlags	src/imgui/imgui_internal.h	/^    ImGuiActivateFlags      NavNextActivateFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiActivateFlags
NavNextActivateId	src/imgui/imgui_internal.h	/^    ImGuiID                 NavNextActivateId;                  \/\/ Set by ActivateItem(), queu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavProcessItem	src/imgui/imgui.cpp	/^static void ImGui::NavProcessItem()$/;"	f	class:ImGui	typeref:typename:void	file:
NavProcessItemForTabbingRequest	src/imgui/imgui.cpp	/^void ImGui::NavProcessItemForTabbingRequest(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
NavRect	src/imgui/imgui_internal.h	/^    ImRect                  NavRect;            \/\/ Navigation scoring rectangle (not displayed/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
NavRectRel	src/imgui/imgui_internal.h	/^    ImRect                  NavRectRel[ImGuiNavLayer_COUNT];    \/\/ Reference rectangle, in win/;"	m	struct:ImGuiWindow	typeref:typename:ImRect[]
NavRestoreHighlightAfterMove	src/imgui/imgui.cpp	/^void ImGui::NavRestoreHighlightAfterMove()$/;"	f	class:ImGui	typeref:typename:void
NavRestoreLastChildNavWindow	src/imgui/imgui.cpp	/^static ImGuiWindow* ImGui::NavRestoreLastChildNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *	file:
NavRestoreLayer	src/imgui/imgui.cpp	/^void ImGui::NavRestoreLayer(ImGuiNavLayer layer)$/;"	f	class:ImGui	typeref:typename:void
NavSaveLastChildNavWindowIntoParent	src/imgui/imgui.cpp	/^static void ImGui::NavSaveLastChildNavWindowIntoParent(ImGuiWindow* nav_window)$/;"	f	class:ImGui	typeref:typename:void	file:
NavScoreItem	src/imgui/imgui.cpp	/^static bool ImGui::NavScoreItem(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:bool	file:
NavScoreItemDistInterval	src/imgui/imgui.cpp	/^static float inline NavScoreItemDistInterval(float a0, float a1, float b0, float b1)$/;"	f	typeref:typename:float	file:
NavScoringDebugCount	src/imgui/imgui_internal.h	/^    int                     NavScoringDebugCount;               \/\/ Metrics for debugging$/;"	m	struct:ImGuiContext	typeref:typename:int
NavScoringNoClipRect	src/imgui/imgui_internal.h	/^    ImRect                  NavScoringNoClipRect;               \/\/ Some nav operations (such a/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavScoringRect	src/imgui/imgui_internal.h	/^    ImRect                  NavScoringRect;                     \/\/ Rectangle used for scoring,/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavTabbingCounter	src/imgui/imgui_internal.h	/^    int                     NavTabbingCounter;                  \/\/ >0 when counting items for /;"	m	struct:ImGuiContext	typeref:typename:int
NavTabbingDir	src/imgui/imgui_internal.h	/^    int                     NavTabbingDir;                      \/\/ Generally -1 or +1, 0 when /;"	m	struct:ImGuiContext	typeref:typename:int
NavTabbingResultFirst	src/imgui/imgui_internal.h	/^    ImGuiNavItemData        NavTabbingResultFirst;              \/\/ First tabbing request candi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavUpdate	src/imgui/imgui.cpp	/^static void ImGui::NavUpdate()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateAnyRequestFlag	src/imgui/imgui.cpp	/^static inline void ImGui::NavUpdateAnyRequestFlag()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCancelRequest	src/imgui/imgui.cpp	/^static void ImGui::NavUpdateCancelRequest()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCreateMoveRequest	src/imgui/imgui.cpp	/^void ImGui::NavUpdateCreateMoveRequest()$/;"	f	class:ImGui	typeref:typename:void
NavUpdateCreateTabbingRequest	src/imgui/imgui.cpp	/^void ImGui::NavUpdateCreateTabbingRequest()$/;"	f	class:ImGui	typeref:typename:void
NavUpdateCreateWrappingRequest	src/imgui/imgui.cpp	/^static void ImGui::NavUpdateCreateWrappingRequest()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdatePageUpPageDown	src/imgui/imgui.cpp	/^static float ImGui::NavUpdatePageUpPageDown()$/;"	f	class:ImGui	typeref:typename:float	file:
NavUpdateWindowing	src/imgui/imgui.cpp	/^static void ImGui::NavUpdateWindowing()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateWindowingHighlightWindow	src/imgui/imgui.cpp	/^static void NavUpdateWindowingHighlightWindow(int focus_change_dir)$/;"	f	typeref:typename:void	file:
NavUpdateWindowingOverlay	src/imgui/imgui.cpp	/^void ImGui::NavUpdateWindowingOverlay()$/;"	f	class:ImGui	typeref:typename:void
NavWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindow;                          \/\/ Focused window for navigati/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingHighlightAlpha	src/imgui/imgui_internal.h	/^    float                   NavWindowingHighlightAlpha;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingListWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingListWindow;             \/\/ Internal window actually li/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTarget	src/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTarget;                 \/\/ Target window when doing CT/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTargetAnim	src/imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTargetAnim;             \/\/ Record of last valid NavWin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTimer	src/imgui/imgui_internal.h	/^    float                   NavWindowingTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingToggleLayer	src/imgui/imgui_internal.h	/^    bool                    NavWindowingToggleLayer;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NewFrame	src/imgui/imgui.cpp	/^void ImGui::NewFrame()$/;"	f	class:ImGui	typeref:typename:void
NewLine	src/imgui/imgui_widgets.cpp	/^void ImGui::NewLine()$/;"	f	class:ImGui	typeref:typename:void
NextColumn	src/imgui/imgui_tables.cpp	/^void ImGui::NextColumn()$/;"	f	class:ImGui	typeref:typename:void
NextEnabledColumn	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     NextEnabledColumn;              \/\/ Index of next enabled\/visible /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
NextItemData	src/imgui/imgui_internal.h	/^    ImGuiNextItemData       NextItemData;                       \/\/ Storage for SetNextItem** f/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextItemData
NextSelectedTabId	src/imgui/imgui_internal.h	/^    ImGuiID             NextSelectedTabId;      \/\/ Next selected tab\/window. Will also trigge/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
NextTotalWidth	src/imgui/imgui_internal.h	/^    ImU32       NextTotalWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU32
NextWindowData	src/imgui/imgui_internal.h	/^    ImGuiNextWindowData     NextWindowData;                     \/\/ Storage for SetNextWindow**/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextWindowData
Normalized	src/imgui/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
NotifyOfDocumentsClosedElsewhere	src/imgui/imgui_demo.cpp	/^static void NotifyOfDocumentsClosedElsewhere(ExampleAppDocuments& app)$/;"	f	typeref:typename:void	file:
OP_INVALID	src/m6502_instructions.cpp	/^u8 OP_INVALID(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
OffMaxX	src/imgui/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
OffMinX	src/imgui/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
Offset	src/imgui/imgui.cpp	/^    ImU32           Offset;$/;"	m	struct:ImGuiStyleVarInfo	typeref:typename:ImU32	file:
Offset	src/imgui/imgui_internal.h	/^    float               Offset;                 \/\/ Position relative to beginning of tab$/;"	m	struct:ImGuiTabItem	typeref:typename:float
OffsetIcon	src/imgui/imgui_internal.h	/^    ImU16       OffsetIcon;         \/\/ Always zero for now$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetLabel	src/imgui/imgui_internal.h	/^    ImU16       OffsetLabel;        \/\/ Offsets are locked in Update()$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetMark	src/imgui/imgui_internal.h	/^    ImU16       OffsetMark;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetNorm	src/imgui/imgui_internal.h	/^    float               OffsetNorm;         \/\/ Column start offset, normalized 0.0 (far left) /;"	m	struct:ImGuiOldColumnData	typeref:typename:float
OffsetNormBeforeResize	src/imgui/imgui_internal.h	/^    float               OffsetNormBeforeResize;$/;"	m	struct:ImGuiOldColumnData	typeref:typename:float
OffsetShortcut	src/imgui/imgui_internal.h	/^    ImU16       OffsetShortcut;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
Offsets	src/imgui/imgui_internal.h	/^    int     Offsets[CHUNKS];$/;"	m	struct:ImSpanAllocator	typeref:typename:int[]
OnKeyPressed	src/imgui/imgui_widgets.cpp	/^void ImGuiInputTextState::OnKeyPressed(int key)$/;"	f	class:ImGuiInputTextState	typeref:typename:void
Open	src/imgui/imgui_demo.cpp	/^    bool        Open;       \/\/ Set when open (we keep an array of all available documents to s/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenCond	src/imgui/imgui_internal.h	/^    ImGuiCond                   OpenCond;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiCond
OpenFrameCount	src/imgui/imgui_internal.h	/^    int                 OpenFrameCount; \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:int
OpenMousePos	src/imgui/imgui_internal.h	/^    ImVec2              OpenMousePos;   \/\/ Set on OpenPopup(), copy of mouse position at the t/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenParentId	src/imgui/imgui_internal.h	/^    ImGuiID             OpenParentId;   \/\/ Set on OpenPopup(), we need this to differentiate m/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
OpenPopup	src/imgui/imgui.cpp	/^void ImGui::OpenPopup(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopup	src/imgui/imgui.cpp	/^void ImGui::OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupEx	src/imgui/imgui.cpp	/^void ImGui::OpenPopupEx(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupOnItemClick	src/imgui/imgui.cpp	/^void ImGui::OpenPopupOnItemClick(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupPos	src/imgui/imgui_internal.h	/^    ImVec2              OpenPopupPos;   \/\/ Set on OpenPopup(), preferred popup position (typic/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenPopupStack	src/imgui/imgui_internal.h	/^    ImVector<ImGuiPopupData>OpenPopupStack;                     \/\/ Which popups are open (pers/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
OpenPrev	src/imgui/imgui_demo.cpp	/^    bool        OpenPrev;   \/\/ Copy of Open from last update.$/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenVal	src/imgui/imgui_internal.h	/^    bool                        OpenVal;        \/\/ Set by SetNextItemOpen()$/;"	m	struct:ImGuiNextItemData	typeref:typename:bool
OuterAngle	src/imgui/imgui.cpp	/^    float  OuterAngle;$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:float	file:
OuterPaddingX	src/imgui/imgui_internal.h	/^    float                       OuterPaddingX;$/;"	m	struct:ImGuiTable	typeref:typename:float
OuterRect	src/imgui/imgui_internal.h	/^    ImRect                      OuterRect;                  \/\/ Note: for non-scrolling table, /;"	m	struct:ImGuiTable	typeref:typename:ImRect
OuterRectClipped	src/imgui/imgui_internal.h	/^    ImRect                  OuterRectClipped;                   \/\/ == Window->Rect() just afte/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
OuterWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*                OuterWindow;                \/\/ Parent window for the table$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiWindow *
Overlaps	src/imgui/imgui_internal.h	/^    bool        Overlaps(const ImRect& r) const     { return r.Min.y <  Max.y && r.Max.y >  Min./;"	f	struct:ImRect	typeref:typename:bool
Owner	src/imgui/imgui_internal.h	/^    ImGuiID                     Owner;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiID
PC	src/m6502.h	/^    u16 PC = 0x00;$/;"	m	struct:Cpu	typeref:typename:u16
PFNGLXGETPROCADDRESSPROC_PRIVATE	src/glad.cpp	/^typedef void* (APIENTRYP PFNGLXGETPROCADDRESSPROC_PRIVATE)(const char*);$/;"	t	typeref:typename:void * (APIENTRYP)(const char *)	file:
PFNWGLGETPROCADDRESSPROC_PRIVATE	src/glad.cpp	/^typedef void* (APIENTRYP PFNWGLGETPROCADDRESSPROC_PRIVATE)(const char*);$/;"	t	typeref:typename:void * (APIENTRYP)(const char *)	file:
PHA	src/m6502.h	/^    PHA     = 0x48,$/;"	e	enum:TTInstruction
PackRange	src/imgui/imgui_draw.cpp	/^    stbtt_pack_range    PackRange;          \/\/ Hold the list of codepoints to pack (essentiall/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_pack_range	file:
PackedChars	src/imgui/imgui_draw.cpp	/^    stbtt_packedchar*   PackedChars;        \/\/ Output glyphs$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_packedchar *	file:
PairComparerByID	src/imgui/imgui.cpp	/^        static int IMGUI_CDECL PairComparerByID(const void* lhs, const void* rhs)$/;"	f	struct:ImGuiStorage::BuildSortByKey::StaticFunc	typeref:typename:int IMGUI_CDECL	file:
ParentLastItemDataBackup	src/imgui/imgui_internal.h	/^    ImGuiLastItemData       ParentLastItemDataBackup;$/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiLastItemData
ParentLayoutType	src/imgui/imgui_internal.h	/^    ImGuiLayoutType         ParentLayoutType;       \/\/ Layout type of parent window at the tim/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
ParentNavLayer	src/imgui/imgui_internal.h	/^    int                 ParentNavLayer; \/\/ Resolved on BeginPopup(). Actually a ImGuiNavLayer /;"	m	struct:ImGuiPopupData	typeref:typename:int
ParentWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*            ParentWindow;                       \/\/ If we are a child _or_ popu/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWindowInBeginStack	src/imgui/imgui_internal.h	/^    ImGuiWindow*            ParentWindowInBeginStack;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWorkRect	src/imgui/imgui_internal.h	/^    ImRect                  ParentWorkRect;                     \/\/ Backup of WorkRect before e/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
PassFilter	src/imgui/imgui.cpp	/^bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
PatchFormatStringFloatToInt	src/imgui/imgui_widgets.cpp	/^static const char* PatchFormatStringFloatToInt(const char* fmt)$/;"	f	typeref:typename:const char *	file:
PathArcTo	src/imgui/imgui_draw.cpp	/^void ImDrawList::PathArcTo(const ImVec2& center, float radius, float a_min, float a_max, int num/;"	f	class:ImDrawList	typeref:typename:void
PathArcToFast	src/imgui/imgui_draw.cpp	/^void ImDrawList::PathArcToFast(const ImVec2& center, float radius, int a_min_of_12, int a_max_of/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCubicCurveTo	src/imgui/imgui_draw.cpp	/^void ImDrawList::PathBezierCubicCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, in/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCubicCurveToCasteljau	src/imgui/imgui_draw.cpp	/^static void PathBezierCubicCurveToCasteljau(ImVector<ImVec2>* path, float x1, float y1, float x2/;"	f	typeref:typename:void	file:
PathBezierQuadraticCurveTo	src/imgui/imgui_draw.cpp	/^void ImDrawList::PathBezierQuadraticCurveTo(const ImVec2& p2, const ImVec2& p3, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
PathBezierQuadraticCurveToCasteljau	src/imgui/imgui_draw.cpp	/^static void PathBezierQuadraticCurveToCasteljau(ImVector<ImVec2>* path, float x1, float y1, floa/;"	f	typeref:typename:void	file:
PathRect	src/imgui/imgui_draw.cpp	/^void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, ImDrawFlags flags)$/;"	f	class:ImDrawList	typeref:typename:void
PlatformImeData	src/imgui/imgui_internal.h	/^    ImGuiPlatformImeData    PlatformImeData;                    \/\/ Data updated by current fra/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformImeData
PlatformImeDataPrev	src/imgui/imgui_internal.h	/^    ImGuiPlatformImeData    PlatformImeDataPrev;                \/\/ Previous frame data (when c/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformImeData
PlatformLocaleDecimalPoint	src/imgui/imgui_internal.h	/^    char                    PlatformLocaleDecimalPoint;         \/\/ '.' or *localeconv()->decim/;"	m	struct:ImGuiContext	typeref:typename:char
PlotEx	src/imgui/imgui_widgets.cpp	/^int ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data,/;"	f	class:ImGui	typeref:typename:int
PlotHistogram	src/imgui/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_o/;"	f	class:ImGui	typeref:typename:void
PlotHistogram	src/imgui/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* /;"	f	class:ImGui	typeref:typename:void
PlotLines	src/imgui/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offse/;"	f	class:ImGui	typeref:typename:void
PlotLines	src/imgui/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data/;"	f	class:ImGui	typeref:typename:void
Plot_ArrayGetter	src/imgui/imgui_widgets.cpp	/^static float Plot_ArrayGetter(void* data, int idx)$/;"	f	typeref:typename:float	file:
PopAllowKeyboardFocus	src/imgui/imgui.cpp	/^void ImGui::PopAllowKeyboardFocus()$/;"	f	class:ImGui	typeref:typename:void
PopButtonRepeat	src/imgui/imgui.cpp	/^void ImGui::PopButtonRepeat()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	src/imgui/imgui.cpp	/^void ImGui::PopClipRect()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	src/imgui/imgui_draw.cpp	/^void ImDrawList::PopClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
PopColumnsBackground	src/imgui/imgui_tables.cpp	/^void ImGui::PopColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PopFocusScope	src/imgui/imgui.cpp	/^void ImGui::PopFocusScope()$/;"	f	class:ImGui	typeref:typename:void
PopFont	src/imgui/imgui.cpp	/^void  ImGui::PopFont()$/;"	f	class:ImGui	typeref:typename:void
PopID	src/imgui/imgui.cpp	/^void ImGui::PopID()$/;"	f	class:ImGui	typeref:typename:void
PopItemFlag	src/imgui/imgui.cpp	/^void ImGui::PopItemFlag()$/;"	f	class:ImGui	typeref:typename:void
PopItemWidth	src/imgui/imgui.cpp	/^void ImGui::PopItemWidth()$/;"	f	class:ImGui	typeref:typename:void
PopStyleColor	src/imgui/imgui.cpp	/^void ImGui::PopStyleColor(int count)$/;"	f	class:ImGui	typeref:typename:void
PopStyleCompact	src/imgui/imgui_demo.cpp	/^static void PopStyleCompact()$/;"	f	typeref:typename:void	file:
PopStyleVar	src/imgui/imgui.cpp	/^void ImGui::PopStyleVar(int count)$/;"	f	class:ImGui	typeref:typename:void
PopTextWrapPos	src/imgui/imgui.cpp	/^void ImGui::PopTextWrapPos()$/;"	f	class:ImGui	typeref:typename:void
PopTextureID	src/imgui/imgui_draw.cpp	/^void ImDrawList::PopTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
PopupId	src/imgui/imgui_internal.h	/^    ImGuiID                 PopupId;                            \/\/ ID in the popup stack when /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
PopupId	src/imgui/imgui_internal.h	/^    ImGuiID             PopupId;        \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
Pos	src/imgui/imgui_internal.h	/^    ImVec2                  Pos;                                \/\/ Position (always rounded-up/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Pos	src/imgui/imgui_internal.h	/^    ImVec2ih    Pos;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
PosCond	src/imgui/imgui_internal.h	/^    ImGuiCond                   PosCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
PosPivotVal	src/imgui/imgui_internal.h	/^    ImVec2                      PosPivotVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosToIndexConvert	src/imgui/imgui_internal.h	/^    bool    PosToIndexConvert;      \/\/ Begin\/End are absolute position (will be converted to /;"	m	struct:ImGuiListClipperRange	typeref:typename:bool
PosToIndexOffsetMax	src/imgui/imgui_internal.h	/^    ImS8    PosToIndexOffsetMax;    \/\/ Add to Min after converting to indices$/;"	m	struct:ImGuiListClipperRange	typeref:typename:ImS8
PosToIndexOffsetMin	src/imgui/imgui_internal.h	/^    ImS8    PosToIndexOffsetMin;    \/\/ Add to Min after converting to indices$/;"	m	struct:ImGuiListClipperRange	typeref:typename:ImS8
PosVal	src/imgui/imgui_internal.h	/^    ImVec2                      PosVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosX	src/imgui/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:float
PosY	src/imgui/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:float
PrevEnabledColumn	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     PrevEnabledColumn;              \/\/ Index of prev enabled\/visible /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
PrevFrameVisible	src/imgui/imgui_internal.h	/^    int                 PrevFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
PrevLineSize	src/imgui/imgui_internal.h	/^    ImVec2                  PrevLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
PrevLineTextBaseOffset	src/imgui/imgui_internal.h	/^    float                   PrevLineTextBaseOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
PrevTabsContentsHeight	src/imgui/imgui_internal.h	/^    float               PrevTabsContentsHeight; \/\/ Record the height of contents submitted bel/;"	m	struct:ImGuiTabBar	typeref:typename:float
PrevUserCallbackChar	src/imgui/imgui_impl_glfw.cpp	/^    GLFWcharfun             PrevUserCallbackChar;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcharfun	file:
PrevUserCallbackCursorEnter	src/imgui/imgui_impl_glfw.cpp	/^    GLFWcursorenterfun      PrevUserCallbackCursorEnter;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcursorenterfun	file:
PrevUserCallbackCursorPos	src/imgui/imgui_impl_glfw.cpp	/^    GLFWcursorposfun        PrevUserCallbackCursorPos;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWcursorposfun	file:
PrevUserCallbackKey	src/imgui/imgui_impl_glfw.cpp	/^    GLFWkeyfun              PrevUserCallbackKey;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWkeyfun	file:
PrevUserCallbackMonitor	src/imgui/imgui_impl_glfw.cpp	/^    GLFWmonitorfun          PrevUserCallbackMonitor;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWmonitorfun	file:
PrevUserCallbackMousebutton	src/imgui/imgui_impl_glfw.cpp	/^    GLFWmousebuttonfun      PrevUserCallbackMousebutton;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWmousebuttonfun	file:
PrevUserCallbackScroll	src/imgui/imgui_impl_glfw.cpp	/^    GLFWscrollfun           PrevUserCallbackScroll;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWscrollfun	file:
PrevUserCallbackWindowFocus	src/imgui/imgui_impl_glfw.cpp	/^    GLFWwindowfocusfun      PrevUserCallbackWindowFocus;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWwindowfocusfun	file:
PreviewRect	src/imgui/imgui_internal.h	/^    ImRect          PreviewRect;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImRect
PrimQuadUV	src/imgui/imgui_draw.cpp	/^void ImDrawList::PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, /;"	f	class:ImDrawList	typeref:typename:void
PrimRect	src/imgui/imgui_draw.cpp	/^void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& c, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
PrimRectUV	src/imgui/imgui_draw.cpp	/^void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& /;"	f	class:ImDrawList	typeref:typename:void
PrimReserve	src/imgui/imgui_draw.cpp	/^void ImDrawList::PrimReserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimUnreserve	src/imgui/imgui_draw.cpp	/^void ImDrawList::PrimUnreserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrintFmt	src/imgui/imgui_internal.h	/^    const char* PrintFmt;       \/\/ Default printf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
ProgressBar	src/imgui/imgui_widgets.cpp	/^void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)$/;"	f	class:ImGui	typeref:typename:void
Ptr	src/imgui/imgui_impl_opengl3.cpp	/^    GLvoid* Ptr;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLvoid *	file:
Ptr	src/imgui/imgui_internal.h	/^    void*       Ptr;            \/\/ Either field can be set, not both. e.g. Dock node tab bars /;"	m	struct:ImGuiPtrOrIndex	typeref:typename:void *
PushAllowKeyboardFocus	src/imgui/imgui.cpp	/^void ImGui::PushAllowKeyboardFocus(bool allow_keyboard_focus)$/;"	f	class:ImGui	typeref:typename:void
PushButtonRepeat	src/imgui/imgui.cpp	/^void ImGui::PushButtonRepeat(bool repeat)$/;"	f	class:ImGui	typeref:typename:void
PushClipRect	src/imgui/imgui.cpp	/^void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersec/;"	f	class:ImGui	typeref:typename:void
PushClipRect	src/imgui/imgui_draw.cpp	/^void ImDrawList::PushClipRect(const ImVec2& cr_min, const ImVec2& cr_max, bool intersect_with_cu/;"	f	class:ImDrawList	typeref:typename:void
PushClipRectFullScreen	src/imgui/imgui_draw.cpp	/^void ImDrawList::PushClipRectFullScreen()$/;"	f	class:ImDrawList	typeref:typename:void
PushColumnClipRect	src/imgui/imgui_tables.cpp	/^void ImGui::PushColumnClipRect(int column_index)$/;"	f	class:ImGui	typeref:typename:void
PushColumnsBackground	src/imgui/imgui_tables.cpp	/^void ImGui::PushColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PushFocusScope	src/imgui/imgui.cpp	/^void ImGui::PushFocusScope(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushFont	src/imgui/imgui.cpp	/^void ImGui::PushFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
PushID	src/imgui/imgui.cpp	/^void ImGui::PushID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	src/imgui/imgui.cpp	/^void ImGui::PushID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:void
PushID	src/imgui/imgui.cpp	/^void ImGui::PushID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	src/imgui/imgui.cpp	/^void ImGui::PushID(int int_id)$/;"	f	class:ImGui	typeref:typename:void
PushItemFlag	src/imgui/imgui.cpp	/^void ImGui::PushItemFlag(ImGuiItemFlags option, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
PushItemWidth	src/imgui/imgui.cpp	/^void ImGui::PushItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
PushMultiItemsWidths	src/imgui/imgui.cpp	/^void ImGui::PushMultiItemsWidths(int components, float w_full)$/;"	f	class:ImGui	typeref:typename:void
PushOverrideID	src/imgui/imgui.cpp	/^void ImGui::PushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	src/imgui/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	src/imgui/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleCompact	src/imgui/imgui_demo.cpp	/^static void PushStyleCompact()$/;"	f	typeref:typename:void	file:
PushStyleVar	src/imgui/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVar	src/imgui/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)$/;"	f	class:ImGui	typeref:typename:void
PushTextWrapPos	src/imgui/imgui.cpp	/^void ImGui::PushTextWrapPos(float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:void
PushTextureID	src/imgui/imgui_draw.cpp	/^void ImDrawList::PushTextureID(ImTextureID texture_id)$/;"	f	class:ImDrawList	typeref:typename:void
Quantity	src/imgui/imgui_demo.cpp	/^    int         Quantity;$/;"	m	struct:__anonecc473760111::MyItem	typeref:typename:int	file:
QueryFrameCount	src/imgui/imgui_internal.h	/^    ImS8                    QueryFrameCount;            \/\/ >= 1: Query in progress$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImS8
QueryId	src/imgui/imgui_internal.h	/^    ImGuiID                 QueryId;                    \/\/ ID to query details for$/;"	m	struct:ImGuiStackTool	typeref:typename:ImGuiID
QuerySuccess	src/imgui/imgui_internal.h	/^    bool                    QuerySuccess;               \/\/ Obtained result from DebugHookIdInf/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:bool
RESET_VECTOR	src/memory.h	/^    const u16 RESET_VECTOR       = 0xFFFC; \/\/ 2 bytes$/;"	v	namespace:Layout	typeref:typename:const u16
RESOLUTION_X	src/display.h	/^    const unsigned int RESOLUTION_X     = VGA_TEXT_COLUMNS * VGA_CHAR_SIZE;$/;"	m	class:Display	typeref:typename:const unsigned int
RESOLUTION_Y	src/display.h	/^    const unsigned int RESOLUTION_Y     = VGA_TEXT_ROWS * VGA_CHAR_SIZE;$/;"	m	class:Display	typeref:typename:const unsigned int
RadioButton	src/imgui/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, bool active)$/;"	f	class:ImGui	typeref:typename:bool
RadioButton	src/imgui/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, int* v, int v_button)$/;"	f	class:ImGui	typeref:typename:bool
Ranges	src/imgui/imgui_internal.h	/^    ImVector<ImGuiListClipperRange> Ranges;$/;"	m	struct:ImGuiListClipperData	typeref:typename:ImVector<ImGuiListClipperRange>
RawData	src/imgui/imgui_internal.h	/^    void*                       RawData;                    \/\/ Single allocation to hold Colum/;"	m	struct:ImGuiTable	typeref:typename:void *
ReadInitFn	src/imgui/imgui_internal.h	/^    void        (*ReadInitFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ReadLineFn	src/imgui/imgui_internal.h	/^    void        (*ReadLineFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, con/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,void * entry,const char * line)
ReadOpenFn	src/imgui/imgui_internal.h	/^    void*       (*ReadOpenFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void * (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,const char * name)
Rect	src/imgui/imgui_internal.h	/^    ImRect                  Rect;               \/\/ Full rectangle$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
Rect	src/imgui/imgui_internal.h	/^    ImRect      Rect() const            { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Si/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
RectRel	src/imgui/imgui_internal.h	/^    ImRect              RectRel;        \/\/ Init,Move    \/\/ Best candidate bounding box in wi/;"	m	struct:ImGuiNavItemData	typeref:typename:ImRect
Rects	src/imgui/imgui_draw.cpp	/^    stbrp_rect*         Rects;              \/\/ Rectangle to pack. We first fill in their size /;"	m	struct:ImFontBuildSrcData	typeref:typename:stbrp_rect *	file:
RefScale	src/imgui/imgui_internal.h	/^    float                       RefScale;                   \/\/ Reference scale to be able to r/;"	m	struct:ImGuiTable	typeref:typename:float
RefScale	src/imgui/imgui_internal.h	/^    float                       RefScale;               \/\/ Reference scale to be able to resca/;"	m	struct:ImGuiTableSettings	typeref:typename:float
Remove	src/imgui/imgui_internal.h	/^    void        Remove(ImGuiID key, ImPoolIdx idx)  { Buf[idx].~T(); *(int*)&Buf[idx] = FreeIdx;/;"	f	struct:ImPool	typeref:typename:void
Remove	src/imgui/imgui_internal.h	/^    void        Remove(ImGuiID key, const T* p)     { Remove(key, GetIndex(p)); }$/;"	f	struct:ImPool	typeref:typename:void
RemoveContextHook	src/imgui/imgui.cpp	/^void ImGui::RemoveContextHook(ImGuiContext* ctx, ImGuiID hook_id)$/;"	f	class:ImGui	typeref:typename:void
RemoveSettingsHandler	src/imgui/imgui.cpp	/^void ImGui::RemoveSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:void
Render	src/imgui/imgui.cpp	/^void ImGui::Render()$/;"	f	class:ImGui	typeref:typename:void
RenderArrow	src/imgui/imgui_draw.cpp	/^void ImGui::RenderArrow(ImDrawList* draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale)$/;"	f	class:ImGui	typeref:typename:void
RenderArrowPointingAt	src/imgui/imgui_draw.cpp	/^void ImGui::RenderArrowPointingAt(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir di/;"	f	class:ImGui	typeref:typename:void
RenderArrowsForVerticalBar	src/imgui/imgui_widgets.cpp	/^static void RenderArrowsForVerticalBar(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, float /;"	f	typeref:typename:void	file:
RenderBullet	src/imgui/imgui_draw.cpp	/^void ImGui::RenderBullet(ImDrawList* draw_list, ImVec2 pos, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
RenderChar	src/imgui/imgui_draw.cpp	/^void ImFont::RenderChar(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, ImWchar/;"	f	class:ImFont	typeref:typename:void
RenderCheckMark	src/imgui/imgui_draw.cpp	/^void ImGui::RenderCheckMark(ImDrawList* draw_list, ImVec2 pos, ImU32 col, float sz)$/;"	f	class:ImGui	typeref:typename:void
RenderColorRectWithAlphaCheckerboard	src/imgui/imgui_draw.cpp	/^void ImGui::RenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list, ImVec2 p_min, ImVec2 p_m/;"	f	class:ImGui	typeref:typename:void
RenderDimmedBackgroundBehindWindow	src/imgui/imgui.cpp	/^static void ImGui::RenderDimmedBackgroundBehindWindow(ImGuiWindow* window, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderDimmedBackgrounds	src/imgui/imgui.cpp	/^static void ImGui::RenderDimmedBackgrounds()$/;"	f	class:ImGui	typeref:typename:void	file:
RenderFrame	src/imgui/imgui.cpp	/^void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderFrameBorder	src/imgui/imgui.cpp	/^void ImGui::RenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderMouseCursor	src/imgui/imgui.cpp	/^void ImGui::RenderMouseCursor(ImVec2 base_pos, float base_scale, ImGuiMouseCursor mouse_cursor, /;"	f	class:ImGui	typeref:typename:void
RenderNavHighlight	src/imgui/imgui.cpp	/^void ImGui::RenderNavHighlight(const ImRect& bb, ImGuiID id, ImGuiNavHighlightFlags flags)$/;"	f	class:ImGui	typeref:typename:void
RenderRectFilledRangeH	src/imgui/imgui_draw.cpp	/^void ImGui::RenderRectFilledRangeH(ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x/;"	f	class:ImGui	typeref:typename:void
RenderRectFilledWithHole	src/imgui/imgui_draw.cpp	/^void ImGui::RenderRectFilledWithHole(ImDrawList* draw_list, const ImRect& outer, const ImRect& i/;"	f	class:ImGui	typeref:typename:void
RenderText	src/imgui/imgui.cpp	/^void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_/;"	f	class:ImGui	typeref:typename:void
RenderText	src/imgui/imgui_draw.cpp	/^void ImFont::RenderText(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, const I/;"	f	class:ImFont	typeref:typename:void
RenderTextClipped	src/imgui/imgui.cpp	/^void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, co/;"	f	class:ImGui	typeref:typename:void
RenderTextClippedEx	src/imgui/imgui.cpp	/^void ImGui::RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_/;"	f	class:ImGui	typeref:typename:void
RenderTextEllipsis	src/imgui/imgui.cpp	/^void ImGui::RenderTextEllipsis(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_m/;"	f	class:ImGui	typeref:typename:void
RenderTextWrapped	src/imgui/imgui.cpp	/^void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_wid/;"	f	class:ImGui	typeref:typename:void
RenderViewportsThumbnails	src/imgui/imgui.cpp	/^static void RenderViewportsThumbnails()$/;"	f	typeref:typename:void	file:
RenderWindowDecorations	src/imgui/imgui.cpp	/^void ImGui::RenderWindowDecorations(ImGuiWindow* window, const ImRect& title_bar_rect, bool titl/;"	f	class:ImGui	typeref:typename:void
RenderWindowOuterBorders	src/imgui/imgui.cpp	/^static void ImGui::RenderWindowOuterBorders(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderWindowTitleBarContents	src/imgui/imgui.cpp	/^void ImGui::RenderWindowTitleBarContents(ImGuiWindow* window, const ImRect& title_bar_rect, cons/;"	f	class:ImGui	typeref:typename:void
ReorderColumn	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ReorderColumn;              \/\/ Index of column being reordered/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ReorderColumnDir	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ReorderColumnDir;           \/\/ -1 or +1$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ReorderRequestOffset	src/imgui/imgui_internal.h	/^    ImS16               ReorderRequestOffset;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
ReorderRequestTabId	src/imgui/imgui_internal.h	/^    ImGuiID             ReorderRequestTabId;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
RequestOutputMaskByIndex	src/imgui/imgui_internal.h	/^    ImU64                       RequestOutputMaskByIndex;   \/\/ Column Index -> IsVisible || Au/;"	m	struct:ImGuiTable	typeref:typename:ImU64
RequestedWidth	src/imgui/imgui_internal.h	/^    float               RequestedWidth;         \/\/ Width optionally requested by caller, -1.0f/;"	m	struct:ImGuiTabItem	typeref:typename:float
Reserve	src/imgui/imgui_internal.h	/^    inline void  Reserve(int n, size_t sz, int a=4) { IM_ASSERT(n == CurrIdx && n < CHUNKS); Cur/;"	f	struct:ImSpanAllocator	typeref:typename:void
Reserve	src/imgui/imgui_internal.h	/^    void        Reserve(int capacity)               { Buf.reserve(capacity); Map.Data.reserve(ca/;"	f	struct:ImPool	typeref:typename:void
Reset	src/imgui/imgui_internal.h	/^    void                            Reset(ImGuiListClipper* clipper) { ListClipper = clipper; St/;"	f	struct:ImGuiListClipperData	typeref:typename:void
ResetMouseDragDelta	src/imgui/imgui.cpp	/^void ImGui::ResetMouseDragDelta(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:void
ResizeBorderHeld	src/imgui/imgui_internal.h	/^    signed char             ResizeBorderHeld;                   \/\/ Current border being held f/;"	m	struct:ImGuiWindow	typeref:typename:signed char
ResizeLockMinContentsX2	src/imgui/imgui_internal.h	/^    float                       ResizeLockMinContentsX2;    \/\/ Lock minimum contents width whi/;"	m	struct:ImGuiTable	typeref:typename:float
ResizedColumn	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         ResizedColumn;              \/\/ Index of column being resized. /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ResizedColumnNextWidth	src/imgui/imgui_internal.h	/^    float                       ResizedColumnNextWidth;$/;"	m	struct:ImGuiTable	typeref:typename:float
Results	src/imgui/imgui_internal.h	/^    ImVector<ImGuiStackLevelInfo> Results;$/;"	m	struct:ImGuiStackTool	typeref:typename:ImVector<ImGuiStackLevelInfo>
RightMostEnabledColumn	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         RightMostEnabledColumn;     \/\/ Index of right-most non-hidden /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RightMostStretchedColumn	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         RightMostStretchedColumn;   \/\/ Index of right-most stretched c/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RootWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindow;                         \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForNav	src/imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindowForNav;                   \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForTitleBarHighlight	src/imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindowForTitleBarHighlight;     \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowPopupTree	src/imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindowPopupTree;                \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RoundScalarWithFormatT	src/imgui/imgui_widgets.cpp	/^TYPE ImGui::RoundScalarWithFormatT(const char* format, ImGuiDataType data_type, TYPE v)$/;"	f	class:ImGui	typeref:typename:TYPE
Row	src/imgui/imgui_demo.cpp	/^                struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ShowDemoWindowMisc::KeyLayoutData	typeref:typename:int	file:
RowBgColor	src/imgui/imgui_internal.h	/^    ImU32                       RowBgColor[2];              \/\/ Background color override for c/;"	m	struct:ImGuiTable	typeref:typename:ImU32[2]
RowBgColorCounter	src/imgui/imgui_internal.h	/^    int                         RowBgColorCounter;          \/\/ Counter for alternating backgro/;"	m	struct:ImGuiTable	typeref:typename:int
RowCellData	src/imgui/imgui_internal.h	/^    ImSpan<ImGuiTableCellData>  RowCellData;                \/\/ Point within RawData[]. Store c/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableCellData>
RowCellDataCurrent	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         RowCellDataCurrent;         \/\/ Index of current RowCellData[] /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RowFlags	src/imgui/imgui_internal.h	/^    ImGuiTableRowFlags          RowFlags : 16;              \/\/ Current row flags, see ImGuiTab/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableRowFlags:16
RowIndentOffsetX	src/imgui/imgui_internal.h	/^    float                       RowIndentOffsetX;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowMinHeight	src/imgui/imgui_internal.h	/^    float                       RowMinHeight;               \/\/ Height submitted to TableNextRo/;"	m	struct:ImGuiTable	typeref:typename:float
RowPosY1	src/imgui/imgui_internal.h	/^    float                       RowPosY1;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowPosY2	src/imgui/imgui_internal.h	/^    float                       RowPosY2;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowTextBaseline	src/imgui/imgui_internal.h	/^    float                       RowTextBaseline;$/;"	m	struct:ImGuiTable	typeref:typename:float
SP	src/m6502.h	/^    u16 SP = 0x0000;$/;"	m	struct:Cpu	typeref:typename:u16
SR	src/m6502.h	/^    u8 SR = 0x00;$/;"	m	struct:Cpu	typeref:typename:u8
STACK_PAGE_HIGH	src/memory.h	/^    const u16 STACK_PAGE_HIGH    = 0x01FF;$/;"	v	namespace:Layout	typeref:typename:const u16
STACK_PAGE_LOW	src/memory.h	/^    const u16 STACK_PAGE_LOW     = 0x0100;$/;"	v	namespace:Layout	typeref:typename:const u16
STBRP_ASSERT	src/imgui/imgui_draw.cpp	/^#define STBRP_ASSERT(/;"	d	file:
STBRP_ASSERT	src/imgui/imstb_rectpack.h	/^#define STBRP_ASSERT /;"	d
STBRP_DEF	src/imgui/imstb_rectpack.h	/^#define STBRP_DEF /;"	d
STBRP_HEURISTIC_Skyline_BF_sortHeight	src/imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:__anon69592cc70103
STBRP_HEURISTIC_Skyline_BL_sortHeight	src/imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BL_sortHeight = STBRP_HEURISTIC_Skyline_default,$/;"	e	enum:__anon69592cc70103
STBRP_HEURISTIC_Skyline_default	src/imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_default=0,$/;"	e	enum:__anon69592cc70103
STBRP_SORT	src/imgui/imgui_draw.cpp	/^#define STBRP_SORT /;"	d	file:
STBRP_SORT	src/imgui/imstb_rectpack.h	/^#define STBRP_SORT /;"	d
STBRP_STATIC	src/imgui/imgui_draw.cpp	/^#define STBRP_STATIC$/;"	d	file:
STBRP__CDECL	src/imgui/imstb_rectpack.h	/^#define STBRP__CDECL /;"	d
STBRP__CDECL	src/imgui/imstb_rectpack.h	/^#define STBRP__CDECL$/;"	d
STBRP__INIT_skyline	src/imgui/imstb_rectpack.h	/^   STBRP__INIT_skyline = 1$/;"	e	enum:__anon69592cc70203
STBRP__MAXVAL	src/imgui/imstb_rectpack.h	/^#define STBRP__MAXVAL /;"	d
STBRP__NOTUSED	src/imgui/imstb_rectpack.h	/^#define STBRP__NOTUSED(/;"	d
STBTT_DEF	src/imgui/imstb_truetype.h	/^#define STBTT_DEF /;"	d
STBTT_FIX	src/imgui/imstb_truetype.h	/^#define STBTT_FIX /;"	d
STBTT_FIXMASK	src/imgui/imstb_truetype.h	/^#define STBTT_FIXMASK /;"	d
STBTT_FIXSHIFT	src/imgui/imstb_truetype.h	/^#define STBTT_FIXSHIFT /;"	d
STBTT_GPOS_TODO_assert	src/imgui/imstb_truetype.h	/^#define STBTT_GPOS_TODO_assert(/;"	d
STBTT_MACSTYLE_BOLD	src/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_BOLD /;"	d
STBTT_MACSTYLE_DONTCARE	src/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_DONTCARE /;"	d
STBTT_MACSTYLE_ITALIC	src/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_ITALIC /;"	d
STBTT_MACSTYLE_NONE	src/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_NONE /;"	d
STBTT_MACSTYLE_UNDERSCORE	src/imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_UNDERSCORE /;"	d
STBTT_MAC_EID_ARABIC	src/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon80c56a9c0c03
STBTT_MAC_EID_CHINESE_TRAD	src/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon80c56a9c0c03
STBTT_MAC_EID_GREEK	src/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon80c56a9c0c03
STBTT_MAC_EID_HEBREW	src/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon80c56a9c0c03
STBTT_MAC_EID_JAPANESE	src/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon80c56a9c0c03
STBTT_MAC_EID_KOREAN	src/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon80c56a9c0c03
STBTT_MAC_EID_ROMAN	src/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon80c56a9c0c03
STBTT_MAC_EID_RUSSIAN	src/imgui/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon80c56a9c0c03
STBTT_MAC_LANG_ARABIC	src/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon80c56a9c0e03
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	src/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon80c56a9c0e03
STBTT_MAC_LANG_CHINESE_TRAD	src/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon80c56a9c0e03
STBTT_MAC_LANG_DUTCH	src/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon80c56a9c0e03
STBTT_MAC_LANG_ENGLISH	src/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon80c56a9c0e03
STBTT_MAC_LANG_FRENCH	src/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon80c56a9c0e03
STBTT_MAC_LANG_GERMAN	src/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon80c56a9c0e03
STBTT_MAC_LANG_HEBREW	src/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon80c56a9c0e03
STBTT_MAC_LANG_ITALIAN	src/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon80c56a9c0e03
STBTT_MAC_LANG_JAPANESE	src/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon80c56a9c0e03
STBTT_MAC_LANG_KOREAN	src/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon80c56a9c0e03
STBTT_MAC_LANG_RUSSIAN	src/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon80c56a9c0e03
STBTT_MAC_LANG_SPANISH	src/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon80c56a9c0e03
STBTT_MAC_LANG_SWEDISH	src/imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon80c56a9c0e03
STBTT_MAX_OVERSAMPLE	src/imgui/imstb_truetype.h	/^#define STBTT_MAX_OVERSAMPLE /;"	d
STBTT_MS_EID_SHIFTJIS	src/imgui/imstb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anon80c56a9c0b03
STBTT_MS_EID_SYMBOL	src/imgui/imstb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anon80c56a9c0b03
STBTT_MS_EID_UNICODE_BMP	src/imgui/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anon80c56a9c0b03
STBTT_MS_EID_UNICODE_FULL	src/imgui/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anon80c56a9c0b03
STBTT_MS_LANG_CHINESE	src/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon80c56a9c0d03
STBTT_MS_LANG_DUTCH	src/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon80c56a9c0d03
STBTT_MS_LANG_ENGLISH	src/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon80c56a9c0d03
STBTT_MS_LANG_FRENCH	src/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon80c56a9c0d03
STBTT_MS_LANG_GERMAN	src/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon80c56a9c0d03
STBTT_MS_LANG_HEBREW	src/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon80c56a9c0d03
STBTT_MS_LANG_ITALIAN	src/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon80c56a9c0d03
STBTT_MS_LANG_JAPANESE	src/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon80c56a9c0d03
STBTT_MS_LANG_KOREAN	src/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon80c56a9c0d03
STBTT_MS_LANG_RUSSIAN	src/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon80c56a9c0d03
STBTT_MS_LANG_SPANISH	src/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon80c56a9c0d03
STBTT_MS_LANG_SWEDISH	src/imgui/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon80c56a9c0d03
STBTT_PLATFORM_ID_ISO	src/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anon80c56a9c0903
STBTT_PLATFORM_ID_MAC	src/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anon80c56a9c0903
STBTT_PLATFORM_ID_MICROSOFT	src/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anon80c56a9c0903
STBTT_PLATFORM_ID_UNICODE	src/imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anon80c56a9c0903
STBTT_POINT_SIZE	src/imgui/imstb_truetype.h	/^#define STBTT_POINT_SIZE(/;"	d
STBTT_RASTERIZER_VERSION	src/imgui/imstb_truetype.h	/^#define STBTT_RASTERIZER_VERSION /;"	d
STBTT_STATIC	src/imgui/imgui_draw.cpp	/^#define STBTT_STATIC$/;"	d	file:
STBTT_UNICODE_EID_ISO_10646	src/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anon80c56a9c0a03
STBTT_UNICODE_EID_UNICODE_1_0	src/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anon80c56a9c0a03
STBTT_UNICODE_EID_UNICODE_1_1	src/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anon80c56a9c0a03
STBTT_UNICODE_EID_UNICODE_2_0_BMP	src/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anon80c56a9c0a03
STBTT_UNICODE_EID_UNICODE_2_0_FULL	src/imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anon80c56a9c0a03
STBTT__COMPARE	src/imgui/imstb_truetype.h	/^#define STBTT__COMPARE(/;"	d
STBTT__CSCTX_INIT	src/imgui/imstb_truetype.h	/^#define STBTT__CSCTX_INIT(/;"	d
STBTT__CSERR	src/imgui/imstb_truetype.h	/^#define STBTT__CSERR(/;"	d
STBTT__NOTUSED	src/imgui/imstb_truetype.h	/^#define STBTT__NOTUSED(/;"	d
STBTT__OVER_MASK	src/imgui/imstb_truetype.h	/^#define STBTT__OVER_MASK /;"	d
STBTT_acos	src/imgui/imstb_truetype.h	/^   #define STBTT_acos(/;"	d
STBTT_assert	src/imgui/imgui_draw.cpp	/^#define STBTT_assert(/;"	d	file:
STBTT_assert	src/imgui/imstb_truetype.h	/^   #define STBTT_assert(/;"	d
STBTT_cos	src/imgui/imstb_truetype.h	/^   #define STBTT_cos(/;"	d
STBTT_fabs	src/imgui/imgui_draw.cpp	/^#define STBTT_fabs(/;"	d	file:
STBTT_fabs	src/imgui/imstb_truetype.h	/^   #define STBTT_fabs(/;"	d
STBTT_fmod	src/imgui/imgui_draw.cpp	/^#define STBTT_fmod(/;"	d	file:
STBTT_fmod	src/imgui/imstb_truetype.h	/^   #define STBTT_fmod(/;"	d
STBTT_free	src/imgui/imgui_draw.cpp	/^#define STBTT_free(/;"	d	file:
STBTT_free	src/imgui/imstb_truetype.h	/^   #define STBTT_free(/;"	d
STBTT_iceil	src/imgui/imgui_draw.cpp	/^#define STBTT_iceil(/;"	d	file:
STBTT_iceil	src/imgui/imstb_truetype.h	/^   #define STBTT_iceil(/;"	d
STBTT_ifloor	src/imgui/imgui_draw.cpp	/^#define STBTT_ifloor(/;"	d	file:
STBTT_ifloor	src/imgui/imstb_truetype.h	/^   #define STBTT_ifloor(/;"	d
STBTT_malloc	src/imgui/imgui_draw.cpp	/^#define STBTT_malloc(/;"	d	file:
STBTT_malloc	src/imgui/imstb_truetype.h	/^   #define STBTT_malloc(/;"	d
STBTT_max	src/imgui/imstb_truetype.h	/^#define STBTT_max(/;"	d
STBTT_memcpy	src/imgui/imstb_truetype.h	/^   #define STBTT_memcpy /;"	d
STBTT_memset	src/imgui/imstb_truetype.h	/^   #define STBTT_memset /;"	d
STBTT_min	src/imgui/imstb_truetype.h	/^#define STBTT_min(/;"	d
STBTT_pow	src/imgui/imgui_draw.cpp	/^#define STBTT_pow(/;"	d	file:
STBTT_pow	src/imgui/imstb_truetype.h	/^   #define STBTT_pow(/;"	d
STBTT_sqrt	src/imgui/imgui_draw.cpp	/^#define STBTT_sqrt(/;"	d	file:
STBTT_sqrt	src/imgui/imstb_truetype.h	/^   #define STBTT_sqrt(/;"	d
STBTT_strlen	src/imgui/imstb_truetype.h	/^   #define STBTT_strlen(/;"	d
STBTT_vcubic	src/imgui/imstb_truetype.h	/^      STBTT_vcubic$/;"	e	enum:__anon80c56a9c0603
STBTT_vcurve	src/imgui/imstb_truetype.h	/^      STBTT_vcurve,$/;"	e	enum:__anon80c56a9c0603
STBTT_vline	src/imgui/imstb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anon80c56a9c0603
STBTT_vmove	src/imgui/imstb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anon80c56a9c0603
STB_IMAGE_IMPLEMENTATION	src/display.cpp	/^#define STB_IMAGE_IMPLEMENTATION$/;"	d	file:
STB_INCLUDE_STB_RECT_PACK_H	src/imgui/imstb_rectpack.h	/^#define STB_INCLUDE_STB_RECT_PACK_H$/;"	d
STB_RECT_PACK_IMPLEMENTATION	src/imgui/imgui_draw.cpp	/^#define STB_RECT_PACK_IMPLEMENTATION$/;"	d	file:
STB_RECT_PACK_VERSION	src/imgui/imstb_rectpack.h	/^#define STB_RECT_PACK_VERSION /;"	d
STB_SPRINTF_IMPLEMENTATION	src/imgui/imgui.cpp	/^#define STB_SPRINTF_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_CHARTYPE	src/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_CHARTYPE /;"	d
STB_TEXTEDIT_CHARTYPE	src/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_CHARTYPE /;"	d
STB_TEXTEDIT_DELETECHARS	src/imgui/imgui_widgets.cpp	/^static void STB_TEXTEDIT_DELETECHARS(ImGuiInputTextState* obj, int pos, int n)$/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_GETCHAR	src/imgui/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_GETCHAR(const ImGuiInputTextState* obj, int idx)                    /;"	f	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_GETWIDTH	src/imgui/imgui_widgets.cpp	/^static float   STB_TEXTEDIT_GETWIDTH(ImGuiInputTextState* obj, int line_start_idx, int char_idx)/;"	f	namespace:ImStb	typeref:typename:float	file:
STB_TEXTEDIT_GETWIDTH_NEWLINE	src/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_GETWIDTH_NEWLINE /;"	d
STB_TEXTEDIT_IMPLEMENTATION	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_INSERTCHARS	src/imgui/imgui_widgets.cpp	/^static bool STB_TEXTEDIT_INSERTCHARS(ImGuiInputTextState* obj, int pos, const ImWchar* new_text,/;"	f	namespace:ImStb	typeref:typename:bool	file:
STB_TEXTEDIT_KEYTOTEXT	src/imgui/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                  /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_KEYTYPE	src/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_KEYTYPE /;"	d
STB_TEXTEDIT_K_BACKSPACE	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_BACKSPACE /;"	d	file:
STB_TEXTEDIT_K_DELETE	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DELETE /;"	d	file:
STB_TEXTEDIT_K_DOWN	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DOWN /;"	d	file:
STB_TEXTEDIT_K_LEFT	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LEFT /;"	d	file:
STB_TEXTEDIT_K_LINEEND	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINEEND /;"	d	file:
STB_TEXTEDIT_K_LINESTART	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINESTART /;"	d	file:
STB_TEXTEDIT_K_PGDOWN	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_PGDOWN /;"	d	file:
STB_TEXTEDIT_K_PGUP	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_PGUP /;"	d	file:
STB_TEXTEDIT_K_REDO	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_REDO /;"	d	file:
STB_TEXTEDIT_K_RIGHT	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_RIGHT /;"	d	file:
STB_TEXTEDIT_K_SHIFT	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_SHIFT /;"	d	file:
STB_TEXTEDIT_K_TEXTEND	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTEND /;"	d	file:
STB_TEXTEDIT_K_TEXTSTART	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTSTART /;"	d	file:
STB_TEXTEDIT_K_UNDO	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UNDO /;"	d	file:
STB_TEXTEDIT_K_UP	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UP /;"	d	file:
STB_TEXTEDIT_K_WORDLEFT	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDLEFT /;"	d	file:
STB_TEXTEDIT_K_WORDRIGHT	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDRIGHT /;"	d	file:
STB_TEXTEDIT_LAYOUTROW	src/imgui/imgui_widgets.cpp	/^static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, ImGuiInputTextState* obj, int line_star/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_MOVEWORDLEFT	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d	file:
STB_TEXTEDIT_MOVEWORDLEFT	src/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d
STB_TEXTEDIT_MOVEWORDLEFT_IMPL	src/imgui/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(ImGuiInputTextState* obj, int idx)   { idx--; while (/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT	src/imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d	file:
STB_TEXTEDIT_MOVEWORDRIGHT	src/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d
STB_TEXTEDIT_MOVEWORDRIGHT_MAC	src/imgui/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_MAC(ImGuiInputTextState* obj, int idx)   { idx++; int len/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT_WIN	src/imgui/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_WIN(ImGuiInputTextState* obj, int idx)   { idx++; int len/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_NEWLINE	src/imgui/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_NEWLINE = '\\n';$/;"	v	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_POSITIONTYPE	src/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_POSITIONTYPE /;"	d
STB_TEXTEDIT_STRING	src/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_STRING /;"	d
STB_TEXTEDIT_STRINGLEN	src/imgui/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_STRINGLEN(const ImGuiInputTextState* obj)                           /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_UNDOCHARCOUNT	src/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_UNDOCHARCOUNT /;"	d
STB_TEXTEDIT_UNDOCHARCOUNT	src/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_UNDOCHARCOUNT /;"	d
STB_TEXTEDIT_UNDOSTATECOUNT	src/imgui/imgui_internal.h	/^#define STB_TEXTEDIT_UNDOSTATECOUNT /;"	d
STB_TEXTEDIT_UNDOSTATECOUNT	src/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_UNDOSTATECOUNT /;"	d
STB_TEXTEDIT_memmove	src/imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_memmove /;"	d
STB_TEXT_HAS_SELECTION	src/imgui/imstb_textedit.h	/^#define STB_TEXT_HAS_SELECTION(/;"	d
STB_TRUETYPE_IMPLEMENTATION	src/imgui/imgui_draw.cpp	/^#define STB_TRUETYPE_IMPLEMENTATION$/;"	d	file:
STB_TexteditState	src/imgui/imstb_textedit.h	/^} STB_TexteditState;$/;"	t	typeref:struct:__anonb965c0a50308
SameLine	src/imgui/imgui.cpp	/^void ImGui::SameLine(float offset_from_start_x, float spacing_w)$/;"	f	class:ImGui	typeref:typename:void
Saturate	src/imgui/imgui_impl_glfw.cpp	/^static inline float Saturate(float v) { return v < 0.0f ? 0.0f : v  > 1.0f ? 1.0f : v; }$/;"	f	typeref:typename:float	file:
SaveFlags	src/imgui/imgui_internal.h	/^    ImGuiTableFlags             SaveFlags;              \/\/ Indicate data we want to save using/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableFlags
SaveIniSettingsToDisk	src/imgui/imgui.cpp	/^void ImGui::SaveIniSettingsToDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
SaveIniSettingsToMemory	src/imgui/imgui.cpp	/^const char* ImGui::SaveIniSettingsToMemory(size_t* out_size)$/;"	f	class:ImGui	typeref:typename:const char *
Saw	src/imgui/imgui_demo.cpp	/^            static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
ScaleAllSizes	src/imgui/imgui.cpp	/^void ImGuiStyle::ScaleAllSizes(float scale_factor)$/;"	f	class:ImGuiStyle	typeref:typename:void
ScaleClipRects	src/imgui/imgui_draw.cpp	/^void ImDrawData::ScaleClipRects(const ImVec2& fb_scale)$/;"	f	class:ImDrawData	typeref:typename:void
ScaleRatioFromValueT	src/imgui/imgui_widgets.cpp	/^float ImGui::ScaleRatioFromValueT(ImGuiDataType data_type, TYPE v, TYPE v_min, TYPE v_max, bool /;"	f	class:ImGui	typeref:typename:float
ScanFmt	src/imgui/imgui_internal.h	/^    const char* ScanFmt;        \/\/ Default scanf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
Scroll	src/imgui/imgui_internal.h	/^    ImVec2                  Scroll;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollMax	src/imgui/imgui_internal.h	/^    ImVec2                  ScrollMax;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTarget	src/imgui/imgui_internal.h	/^    ImVec2                  ScrollTarget;                       \/\/ target scroll position. sto/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetCenterRatio	src/imgui/imgui_internal.h	/^    ImVec2                  ScrollTargetCenterRatio;            \/\/ 0.0f = scroll so that targe/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetEdgeSnapDist	src/imgui/imgui_internal.h	/^    ImVec2                  ScrollTargetEdgeSnapDist;           \/\/ 0.0f = no snapping, >0.0f s/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollToBottom	src/imgui/imgui_demo.cpp	/^    bool                  ScrollToBottom;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
ScrollToBringRectIntoView	src/imgui/imgui_internal.h	/^    inline void             ScrollToBringRectIntoView(ImGuiWindow* window, const ImRect& rect) {/;"	f	namespace:ImGui	typeref:typename:void
ScrollToItem	src/imgui/imgui.cpp	/^void ImGui::ScrollToItem(ImGuiScrollFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ScrollToRect	src/imgui/imgui.cpp	/^void ImGui::ScrollToRect(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ScrollToRectEx	src/imgui/imgui.cpp	/^ImVec2 ImGui::ScrollToRectEx(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flag/;"	f	class:ImGui	typeref:typename:ImVec2
ScrollVal	src/imgui/imgui_internal.h	/^    ImVec2                      ScrollVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ScrollX	src/imgui/imgui_internal.h	/^    float                   ScrollX;                \/\/ horizontal scrolling\/offset$/;"	m	struct:ImGuiInputTextState	typeref:typename:float
Scrollbar	src/imgui/imgui_widgets.cpp	/^void ImGui::Scrollbar(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:void
ScrollbarClickDeltaToGrabCenter	src/imgui/imgui_internal.h	/^    float                   ScrollbarClickDeltaToGrabCenter;    \/\/ Distance between mouse and /;"	m	struct:ImGuiContext	typeref:typename:float
ScrollbarEx	src/imgui/imgui_widgets.cpp	/^bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, I/;"	f	class:ImGui	typeref:typename:bool
ScrollbarSizes	src/imgui/imgui_internal.h	/^    ImVec2                  ScrollbarSizes;                     \/\/ Size taken by each scrollba/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollbarX	src/imgui/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollbarY	src/imgui/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollingAnim	src/imgui/imgui_internal.h	/^    float               ScrollingAnim;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingRectMaxX	src/imgui/imgui_internal.h	/^    float               ScrollingRectMaxX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingRectMinX	src/imgui/imgui_internal.h	/^    float               ScrollingRectMinX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingSpeed	src/imgui/imgui_internal.h	/^    float               ScrollingSpeed;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTarget	src/imgui/imgui_internal.h	/^    float               ScrollingTarget;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTargetDistToVisibility	src/imgui/imgui_internal.h	/^    float               ScrollingTargetDistToVisibility;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SegmentN1	src/imgui/imgui.cpp	/^    ImVec2 SegmentN1, SegmentN2;$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
SegmentN2	src/imgui/imgui.cpp	/^    ImVec2 SegmentN1, SegmentN2;$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
SelectAll	src/imgui/imgui_internal.h	/^    void        SelectAll()                 { Stb.select_start = 0; Stb.cursor = Stb.select_end /;"	f	struct:ImGuiInputTextState	typeref:typename:void
Selectable	src/imgui/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec/;"	f	class:ImGui	typeref:typename:bool
Selectable	src/imgui/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
SelectedAllMouseLock	src/imgui/imgui_internal.h	/^    bool                    SelectedAllMouseLock;   \/\/ after a double-click to select all, we /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
SelectedTabId	src/imgui/imgui_internal.h	/^    ImGuiID             SelectedTabId;          \/\/ Selected tab\/window$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
Separator	src/imgui/imgui_widgets.cpp	/^void ImGui::Separator()$/;"	f	class:ImGui	typeref:typename:void
SeparatorEx	src/imgui/imgui_widgets.cpp	/^void ImGui::SeparatorEx(ImGuiSeparatorFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetActiveID	src/imgui/imgui.cpp	/^void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetActiveIdUsingKey	src/imgui/imgui_internal.h	/^    inline void             SetActiveIdUsingKey(ImGuiKey key)                           { ImGuiC/;"	f	namespace:ImGui	typeref:typename:void
SetActiveIdUsingNavAndKeys	src/imgui/imgui.cpp	/^void ImGui::SetActiveIdUsingNavAndKeys()$/;"	f	class:ImGui	typeref:typename:void
SetAllBits	src/imgui/imgui_internal.h	/^    void            SetAllBits()                { memset(Storage, 255, sizeof(Storage)); }$/;"	f	struct:ImBitArray	typeref:typename:void
SetAllInt	src/imgui/imgui.cpp	/^void ImGuiStorage::SetAllInt(int v)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetAllocatorFunctions	src/imgui/imgui.cpp	/^void ImGui::SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void/;"	f	class:ImGui	typeref:typename:void
SetAppAcceptingEvents	src/imgui/imgui.cpp	/^void ImGuiIO::SetAppAcceptingEvents(bool accepting_events)$/;"	f	class:ImGuiIO	typeref:typename:void
SetArenaBasePtr	src/imgui/imgui_internal.h	/^    inline void  SetArenaBasePtr(void* base_ptr)    { BasePtr = (char*)base_ptr; }$/;"	f	struct:ImSpanAllocator	typeref:typename:void
SetBit	src/imgui/imgui_internal.h	/^    void            SetBit(int n)               { IM_ASSERT(n < (Storage.Size << 5)); ImBitArray/;"	f	struct:ImBitVector	typeref:typename:void
SetBit	src/imgui/imgui_internal.h	/^    void            SetBit(int n)               { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:void
SetBitRange	src/imgui/imgui_internal.h	/^    void            SetBitRange(int n, int n2)  { n += OFFSET; n2 += OFFSET; IM_ASSERT(n >= 0 &&/;"	f	struct:ImBitArray	typeref:typename:void
SetBool	src/imgui/imgui.cpp	/^void ImGuiStorage::SetBool(ImGuiID key, bool val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetCircleTessellationMaxError	src/imgui/imgui_draw.cpp	/^void ImDrawListSharedData::SetCircleTessellationMaxError(float max_error)$/;"	f	class:ImDrawListSharedData	typeref:typename:void
SetClipboardText	src/imgui/imgui.cpp	/^void ImGui::SetClipboardText(const char* text)$/;"	f	class:ImGui	typeref:typename:void
SetClipboardTextFn_DefaultImpl	src/imgui/imgui.cpp	/^static void SetClipboardTextFn_DefaultImpl(void*, const char* text)$/;"	f	typeref:typename:void	file:
SetColorEditOptions	src/imgui/imgui_widgets.cpp	/^void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetColumnOffset	src/imgui/imgui_tables.cpp	/^void ImGui::SetColumnOffset(int column_index, float offset)$/;"	f	class:ImGui	typeref:typename:void
SetColumnWidth	src/imgui/imgui_tables.cpp	/^void ImGui::SetColumnWidth(int column_index, float width)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentChannel	src/imgui/imgui_draw.cpp	/^void ImDrawListSplitter::SetCurrentChannel(ImDrawList* draw_list, int idx)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
SetCurrentContext	src/imgui/imgui.cpp	/^void ImGui::SetCurrentContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentFont	src/imgui/imgui.cpp	/^void ImGui::SetCurrentFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentWindow	src/imgui/imgui.cpp	/^static void SetCurrentWindow(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
SetCursorPos	src/imgui/imgui.cpp	/^void ImGui::SetCursorPos(const ImVec2& local_pos)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosX	src/imgui/imgui.cpp	/^void ImGui::SetCursorPosX(float x)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosY	src/imgui/imgui.cpp	/^void ImGui::SetCursorPosY(float y)$/;"	f	class:ImGui	typeref:typename:void
SetCursorScreenPos	src/imgui/imgui.cpp	/^void ImGui::SetCursorScreenPos(const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:void
SetDragDropPayload	src/imgui/imgui.cpp	/^bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond c/;"	f	class:ImGui	typeref:typename:bool
SetFloat	src/imgui/imgui.cpp	/^void ImGuiStorage::SetFloat(ImGuiID key, float val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetFocusID	src/imgui/imgui.cpp	/^void ImGui::SetFocusID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetGlyphVisible	src/imgui/imgui_draw.cpp	/^void ImFont::SetGlyphVisible(ImWchar c, bool visible)$/;"	f	class:ImFont	typeref:typename:void
SetHoveredID	src/imgui/imgui.cpp	/^void ImGui::SetHoveredID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
SetInt	src/imgui/imgui.cpp	/^void ImGuiStorage::SetInt(ImGuiID key, int val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetItemAllowOverlap	src/imgui/imgui.cpp	/^void ImGui::SetItemAllowOverlap()$/;"	f	class:ImGui	typeref:typename:void
SetItemDefaultFocus	src/imgui/imgui.cpp	/^void ImGui::SetItemDefaultFocus()$/;"	f	class:ImGui	typeref:typename:void
SetItemUsingMouseWheel	src/imgui/imgui.cpp	/^void ImGui::SetItemUsingMouseWheel()$/;"	f	class:ImGui	typeref:typename:void
SetKeyEventNativeData	src/imgui/imgui.cpp	/^void ImGuiIO::SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode, int n/;"	f	class:ImGuiIO	typeref:typename:void
SetKeyboardFocusHere	src/imgui/imgui.cpp	/^void ImGui::SetKeyboardFocusHere(int offset)$/;"	f	class:ImGui	typeref:typename:void
SetLastItemData	src/imgui/imgui.cpp	/^void ImGui::SetLastItemData(ImGuiID item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags item_/;"	f	class:ImGui	typeref:typename:void
SetMouseCursor	src/imgui/imgui.cpp	/^void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)$/;"	f	class:ImGui	typeref:typename:void
SetNavID	src/imgui/imgui.cpp	/^void ImGui::SetNavID(ImGuiID id, ImGuiNavLayer nav_layer, ImGuiID focus_scope_id, const ImRect& /;"	f	class:ImGui	typeref:typename:void
SetNavWindow	src/imgui/imgui.cpp	/^void ImGui::SetNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetNextFrameWantCaptureKeyboard	src/imgui/imgui.cpp	/^void ImGui::SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)$/;"	f	class:ImGui	typeref:typename:void
SetNextFrameWantCaptureMouse	src/imgui/imgui.cpp	/^void ImGui::SetNextFrameWantCaptureMouse(bool want_capture_mouse)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemOpen	src/imgui/imgui_widgets.cpp	/^void ImGui::SetNextItemOpen(bool is_open, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemWidth	src/imgui/imgui.cpp	/^void ImGui::SetNextItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowBgAlpha	src/imgui/imgui.cpp	/^void ImGui::SetNextWindowBgAlpha(float alpha)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowCollapsed	src/imgui/imgui.cpp	/^void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowContentSize	src/imgui/imgui.cpp	/^void ImGui::SetNextWindowContentSize(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowFocus	src/imgui/imgui.cpp	/^void ImGui::SetNextWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowPos	src/imgui/imgui.cpp	/^void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowScroll	src/imgui/imgui.cpp	/^void ImGui::SetNextWindowScroll(const ImVec2& scroll)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSize	src/imgui/imgui.cpp	/^void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSizeConstraints	src/imgui/imgui.cpp	/^void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSi/;"	f	class:ImGui	typeref:typename:void
SetPlatformImeDataFn_DefaultImpl	src/imgui/imgui.cpp	/^static void SetPlatformImeDataFn_DefaultImpl(ImGuiViewport* viewport, ImGuiPlatformImeData* data/;"	f	typeref:typename:void	file:
SetPlatformImeDataFn_DefaultImpl	src/imgui/imgui.cpp	/^static void SetPlatformImeDataFn_DefaultImpl(ImGuiViewport*, ImGuiPlatformImeData*) {}$/;"	f	typeref:typename:void	file:
SetScrollFromPosX	src/imgui/imgui.cpp	/^void ImGui::SetScrollFromPosX(ImGuiWindow* window, float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosX	src/imgui/imgui.cpp	/^void ImGui::SetScrollFromPosX(float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	src/imgui/imgui.cpp	/^void ImGui::SetScrollFromPosY(ImGuiWindow* window, float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	src/imgui/imgui.cpp	/^void ImGui::SetScrollFromPosY(float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereX	src/imgui/imgui.cpp	/^void ImGui::SetScrollHereX(float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereY	src/imgui/imgui.cpp	/^void ImGui::SetScrollHereY(float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	src/imgui/imgui.cpp	/^void ImGui::SetScrollX(ImGuiWindow* window, float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	src/imgui/imgui.cpp	/^void ImGui::SetScrollX(float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	src/imgui/imgui.cpp	/^void ImGui::SetScrollY(ImGuiWindow* window, float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	src/imgui/imgui.cpp	/^void ImGui::SetScrollY(float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetState	src/imgui/imgui_impl_opengl3.cpp	/^    void SetState(GLint index)$/;"	f	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:void	file:
SetStateStorage	src/imgui/imgui.cpp	/^void ImGui::SetStateStorage(ImGuiStorage* tree)$/;"	f	class:ImGui	typeref:typename:void
SetTabItemClosed	src/imgui/imgui_widgets.cpp	/^void    ImGui::SetTabItemClosed(const char* label)$/;"	f	class:ImGui	typeref:typename:void
SetToCurrentState	src/imgui/imgui.cpp	/^void ImGuiStackSizes::SetToCurrentState()$/;"	f	class:ImGuiStackSizes	typeref:typename:void
SetTooltip	src/imgui/imgui.cpp	/^void ImGui::SetTooltip(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
SetTooltipV	src/imgui/imgui.cpp	/^void ImGui::SetTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
SetVoidPtr	src/imgui/imgui.cpp	/^void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetWindowClipRectBeforeSetChannel	src/imgui/imgui_tables.cpp	/^void ImGui::SetWindowClipRectBeforeSetChannel(ImGuiWindow* window, const ImRect& clip_rect)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	src/imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	src/imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	src/imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsedAllowFlags	src/imgui/imgui_internal.h	/^    ImGuiCond               SetWindowCollapsedAllowFlags : 8;   \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowConditionAllowFlags	src/imgui/imgui.cpp	/^static void SetWindowConditionAllowFlags(ImGuiWindow* window, ImGuiCond flags, bool enabled)$/;"	f	typeref:typename:void	file:
SetWindowFocus	src/imgui/imgui.cpp	/^void ImGui::SetWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetWindowFocus	src/imgui/imgui.cpp	/^void ImGui::SetWindowFocus(const char* name)$/;"	f	class:ImGui	typeref:typename:void
SetWindowFontScale	src/imgui/imgui.cpp	/^void ImGui::SetWindowFontScale(float scale)$/;"	f	class:ImGui	typeref:typename:void
SetWindowHitTestHole	src/imgui/imgui.cpp	/^void ImGui::SetWindowHitTestHole(ImGuiWindow* window, const ImVec2& pos, const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	src/imgui/imgui.cpp	/^void ImGui::SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	src/imgui/imgui.cpp	/^void ImGui::SetWindowPos(const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	src/imgui/imgui.cpp	/^void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPosAllowFlags	src/imgui/imgui_internal.h	/^    ImGuiCond               SetWindowPosAllowFlags : 8;         \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowPosPivot	src/imgui/imgui_internal.h	/^    ImVec2                  SetWindowPosPivot;                  \/\/ store window pivot for posi/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowPosVal	src/imgui/imgui_internal.h	/^    ImVec2                  SetWindowPosVal;                    \/\/ store window position when /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowSize	src/imgui/imgui.cpp	/^void ImGui::SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	src/imgui/imgui.cpp	/^void ImGui::SetWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	src/imgui/imgui.cpp	/^void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSizeAllowFlags	src/imgui/imgui_internal.h	/^    ImGuiCond               SetWindowSizeAllowFlags : 8;        \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowViewport	src/imgui/imgui.cpp	/^void ImGui::SetWindowViewport(ImGuiWindow* window, ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void
SettingsDirtyTimer	src/imgui/imgui_internal.h	/^    float                   SettingsDirtyTimer;                 \/\/ Save .ini Settings to memor/;"	m	struct:ImGuiContext	typeref:typename:float
SettingsHandlers	src/imgui/imgui_internal.h	/^    ImVector<ImGuiSettingsHandler>      SettingsHandlers;       \/\/ List of .ini settings handl/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiSettingsHandler>
SettingsIniData	src/imgui/imgui_internal.h	/^    ImGuiTextBuffer         SettingsIniData;                    \/\/ In memory .ini settings$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
SettingsLoaded	src/imgui/imgui_internal.h	/^    bool                    SettingsLoaded;$/;"	m	struct:ImGuiContext	typeref:typename:bool
SettingsLoadedFlags	src/imgui/imgui_internal.h	/^    ImGuiTableFlags             SettingsLoadedFlags;        \/\/ Which data were loaded from the/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableFlags
SettingsOffset	src/imgui/imgui_internal.h	/^    int                         SettingsOffset;             \/\/ Offset in g.SettingsTables$/;"	m	struct:ImGuiTable	typeref:typename:int
SettingsOffset	src/imgui/imgui_internal.h	/^    int                     SettingsOffset;                     \/\/ Offset into SettingsWindows/;"	m	struct:ImGuiWindow	typeref:typename:int
SettingsTables	src/imgui/imgui_internal.h	/^    ImChunkStream<ImGuiTableSettings>   SettingsTables;         \/\/ ImGuiTable .ini settings en/;"	m	struct:ImGuiContext	typeref:typename:ImChunkStream<ImGuiTableSettings>
SettingsWindows	src/imgui/imgui_internal.h	/^    ImChunkStream<ImGuiWindowSettings>  SettingsWindows;        \/\/ ImGuiWindow .ini settings e/;"	m	struct:ImGuiContext	typeref:typename:ImChunkStream<ImGuiWindowSettings>
SetupViewportDrawData	src/imgui/imgui.cpp	/^static void SetupViewportDrawData(ImGuiViewportP* viewport, ImVector<ImDrawList*>* draw_lists)$/;"	f	typeref:typename:void	file:
ShadeVertsLinearColorGradientKeepAlpha	src/imgui/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, in/;"	f	class:ImGui	typeref:typename:void
ShadeVertsLinearUV	src/imgui/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, cons/;"	f	class:ImGui	typeref:typename:void
ShaderHandle	src/imgui/imgui_impl_opengl3.cpp	/^    GLuint          ShaderHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
ShowAboutWindow	src/imgui/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowAboutWindow	src/imgui/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDebugLog	src/imgui/imgui_internal.h	/^    bool        ShowDebugLog;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDebugLogWindow	src/imgui/imgui.cpp	/^void ImGui::ShowDebugLogWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowDebugLogWindow	src/imgui/imgui.cpp	/^void ImGui::ShowDebugLogWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	src/imgui/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	src/imgui/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindowColumns	src/imgui/imgui_demo.cpp	/^static void ShowDemoWindowColumns()$/;"	f	typeref:typename:void	file:
ShowDemoWindowLayout	src/imgui/imgui_demo.cpp	/^static void ShowDemoWindowLayout()$/;"	f	typeref:typename:void	file:
ShowDemoWindowMisc	src/imgui/imgui_demo.cpp	/^static void ShowDemoWindowMisc()$/;"	f	typeref:typename:void	file:
ShowDemoWindowPopups	src/imgui/imgui_demo.cpp	/^static void ShowDemoWindowPopups()$/;"	f	typeref:typename:void	file:
ShowDemoWindowTables	src/imgui/imgui_demo.cpp	/^static void ShowDemoWindowTables()$/;"	f	typeref:typename:void	file:
ShowDemoWindowWidgets	src/imgui/imgui_demo.cpp	/^static void ShowDemoWindowWidgets()$/;"	f	typeref:typename:void	file:
ShowDrawCmdBoundingBoxes	src/imgui/imgui_internal.h	/^    bool        ShowDrawCmdBoundingBoxes;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDrawCmdMesh	src/imgui/imgui_internal.h	/^    bool        ShowDrawCmdMesh;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowExampleAppAutoResize	src/imgui/imgui_demo.cpp	/^static void ShowExampleAppAutoResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConsole	src/imgui/imgui_demo.cpp	/^static void ShowExampleAppConsole(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConstrainedResize	src/imgui/imgui_demo.cpp	/^static void ShowExampleAppConstrainedResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppCustomRendering	src/imgui/imgui_demo.cpp	/^static void ShowExampleAppCustomRendering(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppDocuments	src/imgui/imgui_demo.cpp	/^void ShowExampleAppDocuments(bool* p_open)$/;"	f	typeref:typename:void
ShowExampleAppFullscreen	src/imgui/imgui_demo.cpp	/^static void ShowExampleAppFullscreen(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLayout	src/imgui/imgui_demo.cpp	/^static void ShowExampleAppLayout(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLog	src/imgui/imgui_demo.cpp	/^static void ShowExampleAppLog(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLongText	src/imgui/imgui_demo.cpp	/^static void ShowExampleAppLongText(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppMainMenuBar	src/imgui/imgui_demo.cpp	/^static void ShowExampleAppMainMenuBar()$/;"	f	typeref:typename:void	file:
ShowExampleAppPropertyEditor	src/imgui/imgui_demo.cpp	/^static void ShowExampleAppPropertyEditor(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppSimpleOverlay	src/imgui/imgui_demo.cpp	/^static void ShowExampleAppSimpleOverlay(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppWindowTitles	src/imgui/imgui_demo.cpp	/^static void ShowExampleAppWindowTitles(bool*)$/;"	f	typeref:typename:void	file:
ShowExampleMenuFile	src/imgui/imgui_demo.cpp	/^static void ShowExampleMenuFile()$/;"	f	typeref:typename:void	file:
ShowFontAtlas	src/imgui/imgui.cpp	/^void ImGui::ShowFontAtlas(ImFontAtlas* atlas)$/;"	f	class:ImGui	typeref:typename:void
ShowFontAtlas	src/imgui/imgui.cpp	/^void ImGui::ShowFontAtlas(ImFontAtlas*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowFontSelector	src/imgui/imgui_demo.cpp	/^void ImGui::ShowFontSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	src/imgui/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	src/imgui/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowPlaceholderObject	src/imgui/imgui_demo.cpp	/^static void ShowPlaceholderObject(const char* prefix, int uid)$/;"	f	typeref:typename:void	file:
ShowStackTool	src/imgui/imgui_internal.h	/^    bool        ShowStackTool;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowStackToolWindow	src/imgui/imgui.cpp	/^void ImGui::ShowStackToolWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowStackToolWindow	src/imgui/imgui.cpp	/^void ImGui::ShowStackToolWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowStyleEditor	src/imgui/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle* ref)$/;"	f	class:ImGui	typeref:typename:void
ShowStyleEditor	src/imgui/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowStyleSelector	src/imgui/imgui_demo.cpp	/^bool ImGui::ShowStyleSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
ShowTableColumnsStatusFlags	src/imgui/imgui_demo.cpp	/^static void ShowTableColumnsStatusFlags(ImGuiTableColumnFlags flags)$/;"	f	typeref:typename:void	file:
ShowTablesRects	src/imgui/imgui_internal.h	/^    bool        ShowTablesRects;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowTablesRectsType	src/imgui/imgui_internal.h	/^    int         ShowTablesRectsType;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
ShowUserGuide	src/imgui/imgui_demo.cpp	/^void ImGui::ShowUserGuide() {}$/;"	f	class:ImGui	typeref:typename:void
ShowUserGuide	src/imgui/imgui_demo.cpp	/^void ImGui::ShowUserGuide()$/;"	f	class:ImGui	typeref:typename:void
ShowWindowsBeginOrder	src/imgui/imgui_internal.h	/^    bool        ShowWindowsBeginOrder;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowWindowsRects	src/imgui/imgui_internal.h	/^    bool        ShowWindowsRects;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowWindowsRectsType	src/imgui/imgui_internal.h	/^    int         ShowWindowsRectsType;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
ShrinkWidthBuffer	src/imgui/imgui_internal.h	/^    ImVector<ImGuiShrinkWidthItem>  ShrinkWidthBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiShrinkWidthItem>
ShrinkWidthItemComparer	src/imgui/imgui_widgets.cpp	/^static int IMGUI_CDECL ShrinkWidthItemComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ShrinkWidths	src/imgui/imgui_widgets.cpp	/^void ImGui::ShrinkWidths(ImGuiShrinkWidthItem* items, int count, float width_excess)$/;"	f	class:ImGui	typeref:typename:void
Shutdown	src/imgui/imgui.cpp	/^void ImGui::Shutdown()$/;"	f	class:ImGui	typeref:typename:void
Sin	src/imgui/imgui_demo.cpp	/^            static float Sin(void*, int i) { return sinf(i * 0.1f); }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
Size	src/imgui/imgui_demo.cpp	/^                int             Size;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
Size	src/imgui/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Size	src/imgui/imgui_internal.h	/^    ImVec2                  Size;                               \/\/ Current size (==SizeFull or/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Size	src/imgui/imgui_internal.h	/^    ImVec2ih    Size;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
Size	src/imgui/imgui_internal.h	/^    size_t      Size;           \/\/ Size in bytes$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:size_t
SizeCallback	src/imgui/imgui_internal.h	/^    ImGuiSizeCallback           SizeCallback;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiSizeCallback
SizeCallbackUserData	src/imgui/imgui_internal.h	/^    void*                       SizeCallbackUserData;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:void *
SizeCond	src/imgui/imgui_internal.h	/^    ImGuiCond                   SizeCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
SizeConstraintRect	src/imgui/imgui_internal.h	/^    ImRect                      SizeConstraintRect;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImRect
SizeFull	src/imgui/imgui_internal.h	/^    ImVec2                  SizeFull;                           \/\/ Size when non collapsed$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SizeOfBeginPopupStack	src/imgui/imgui_internal.h	/^    short   SizeOfBeginPopupStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfColorStack	src/imgui/imgui_internal.h	/^    short   SizeOfColorStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfDisabledStack	src/imgui/imgui_internal.h	/^    short   SizeOfDisabledStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfFocusScopeStack	src/imgui/imgui_internal.h	/^    short   SizeOfFocusScopeStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfFontStack	src/imgui/imgui_internal.h	/^    short   SizeOfFontStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfGroupStack	src/imgui/imgui_internal.h	/^    short   SizeOfGroupStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfIDStack	src/imgui/imgui_internal.h	/^    short   SizeOfIDStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfItemFlagsStack	src/imgui/imgui_internal.h	/^    short   SizeOfItemFlagsStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfStyleVarStack	src/imgui/imgui_internal.h	/^    short   SizeOfStyleVarStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeVal	src/imgui/imgui_internal.h	/^    ImVec2                      SizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
Sizes	src/imgui/imgui_internal.h	/^    int     Sizes[CHUNKS];$/;"	m	struct:ImSpanAllocator	typeref:typename:int[]
SkipItems	src/imgui/imgui_internal.h	/^    bool                    SkipItems;                          \/\/ Set when items can safely b/;"	m	struct:ImGuiWindow	typeref:typename:bool
SliderAngle	src/imgui/imgui_widgets.cpp	/^bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_ma/;"	f	class:ImGui	typeref:typename:bool
SliderBehavior	src/imgui/imgui_widgets.cpp	/^bool ImGui::SliderBehavior(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, void* p_v, con/;"	f	class:ImGui	typeref:typename:bool
SliderBehaviorT	src/imgui/imgui_widgets.cpp	/^bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, cons/;"	f	class:ImGui	typeref:typename:bool
SliderCurrentAccum	src/imgui/imgui_internal.h	/^    float                   SliderCurrentAccum;                 \/\/ Accumulated slider delta wh/;"	m	struct:ImGuiContext	typeref:typename:float
SliderCurrentAccumDirty	src/imgui/imgui_internal.h	/^    bool                    SliderCurrentAccumDirty;            \/\/ Has the accumulated slider /;"	m	struct:ImGuiContext	typeref:typename:bool
SliderFloat	src/imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* forma/;"	f	class:ImGui	typeref:typename:bool
SliderFloat2	src/imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat3	src/imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat4	src/imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderGrabClickOffset	src/imgui/imgui_internal.h	/^    float                   SliderGrabClickOffset;$/;"	m	struct:ImGuiContext	typeref:typename:float
SliderInt	src/imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format, ImGui/;"	f	class:ImGui	typeref:typename:bool
SliderInt2	src/imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderInt3	src/imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderInt4	src/imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderScalar	src/imgui/imgui_widgets.cpp	/^bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p/;"	f	class:ImGui	typeref:typename:bool
SliderScalarN	src/imgui/imgui_widgets.cpp	/^bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, c/;"	f	class:ImGui	typeref:typename:bool
SmallButton	src/imgui/imgui_widgets.cpp	/^bool ImGui::SmallButton(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
SortDirection	src/imgui/imgui_internal.h	/^    ImU8                    SortDirection : 2;              \/\/ ImGuiSortDirection_Ascending or/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:2
SortDirection	src/imgui/imgui_internal.h	/^    ImU8                    SortDirection : 2;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:2
SortDirectionsAvailCount	src/imgui/imgui_internal.h	/^    ImU8                    SortDirectionsAvailCount : 2;   \/\/ Number of available sort direct/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:2
SortDirectionsAvailList	src/imgui/imgui_internal.h	/^    ImU8                    SortDirectionsAvailList;        \/\/ Ordered of available sort direc/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
SortDirectionsAvailMask	src/imgui/imgui_internal.h	/^    ImU8                    SortDirectionsAvailMask : 4;    \/\/ Mask of available sort directio/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:4
SortOrder	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     SortOrder;                      \/\/ Index of this column within sor/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
SortOrder	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx     SortOrder;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
SortSpecs	src/imgui/imgui_internal.h	/^    ImGuiTableSortSpecs         SortSpecs;                  \/\/ Public facing sorts specs, this/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableSortSpecs
SortSpecsCount	src/imgui/imgui_internal.h	/^    ImGuiTableColumnIdx         SortSpecsCount;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
SortSpecsMulti	src/imgui/imgui_internal.h	/^    ImVector<ImGuiTableColumnSortSpecs> SortSpecsMulti;     \/\/ FIXME-OPT: Using a small-vector/;"	m	struct:ImGuiTable	typeref:typename:ImVector<ImGuiTableColumnSortSpecs>
SortSpecsSingle	src/imgui/imgui_internal.h	/^    ImGuiTableColumnSortSpecs   SortSpecsSingle;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnSortSpecs
Source	src/imgui/imgui_internal.h	/^    ImGuiInputSource                Source;$/;"	m	struct:ImGuiInputEvent	typeref:typename:ImGuiInputSource
SourceWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*        SourceWindow;   \/\/ Set on OpenPopup() copy of NavWindow at the time of/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
Spacing	src/imgui/imgui_internal.h	/^    ImU16       Spacing;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
Spacing	src/imgui/imgui_widgets.cpp	/^    float               Spacing;                \/\/ Horizontal spacing at the end of the sectio/;"	m	struct:ImGuiTabBarSection	typeref:typename:float	file:
Spacing	src/imgui/imgui_widgets.cpp	/^void ImGui::Spacing()$/;"	f	class:ImGui	typeref:typename:void
Split	src/imgui/imgui_draw.cpp	/^void ImDrawListSplitter::Split(ImDrawList* draw_list, int channels_count)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
Splitter	src/imgui/imgui_internal.h	/^    ImDrawListSplitter  Splitter;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImDrawListSplitter
SplitterBehavior	src/imgui/imgui_widgets.cpp	/^bool ImGui::SplitterBehavior(const ImRect& bb, ImGuiID id, ImGuiAxis axis, float* size1, float* /;"	f	class:ImGui	typeref:typename:bool
Square	src/imgui/imgui_demo.cpp	/^        static void Square(ImGuiSizeCallbackData* data) { data->DesiredSize.x = data->DesiredSiz/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
SrcCount	src/imgui/imgui_draw.cpp	/^    int                 SrcCount;           \/\/ Number of source fonts targeting this destinati/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
SrcRanges	src/imgui/imgui_draw.cpp	/^    const ImWchar*      SrcRanges;          \/\/ Ranges as requested by user (user is allowed to/;"	m	struct:ImFontBuildSrcData	typeref:typename:const ImWchar *	file:
StackLevel	src/imgui/imgui_internal.h	/^    int                     StackLevel;                 \/\/ -1: query stack and resize Results,/;"	m	struct:ImGuiStackTool	typeref:typename:int
StackSizesOnBegin	src/imgui/imgui_internal.h	/^    ImGuiStackSizes         StackSizesOnBegin;      \/\/ Store size of various stacks for assert/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiStackSizes
StackToolFormatLevelInfo	src/imgui/imgui.cpp	/^static int StackToolFormatLevelInfo(ImGuiStackTool* tool, int n, bool format_for_ui, char* buf, /;"	f	typeref:typename:int	file:
StartLockWheelingWindow	src/imgui/imgui.cpp	/^static void StartLockWheelingWindow(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
StartMouseMovingWindow	src/imgui/imgui.cpp	/^void ImGui::StartMouseMovingWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
StateStorage	src/imgui/imgui_internal.h	/^    ImGuiStorage            StateStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiStorage
StateStorage	src/imgui/imgui_internal.h	/^    ImGuiStorage*           StateStorage;           \/\/ Current persistent per-window storage (/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiStorage *
StaticFunc	src/imgui/imgui.cpp	/^    struct StaticFunc$/;"	s	function:ImGuiStorage::BuildSortByKey	file:
StatusFlags	src/imgui/imgui_internal.h	/^    ImGuiItemStatusFlags    StatusFlags;        \/\/ See ImGuiItemStatusFlags_$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiItemStatusFlags
Stb	src/imgui/imgui_internal.h	/^    ImStb::STB_TexteditState Stb;                   \/\/ state for stb_textedit.h$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImStb::STB_TexteditState
StbFindState	src/imgui/imstb_textedit.h	/^} StbFindState;$/;"	t	typeref:struct:__anonb965c0a50508
StbTexteditRow	src/imgui/imstb_textedit.h	/^} StbTexteditRow;$/;"	t	typeref:struct:__anonb965c0a50408
StbUndoRecord	src/imgui/imstb_textedit.h	/^} StbUndoRecord;$/;"	t	typeref:struct:__anonb965c0a50108
StbUndoState	src/imgui/imstb_textedit.h	/^} StbUndoState;$/;"	t	typeref:struct:__anonb965c0a50208
Step	src/imgui/imgui.cpp	/^bool ImGuiListClipper::Step()$/;"	f	class:ImGuiListClipper	typeref:typename:bool
Step	src/imgui/imgui_demo.cpp	/^        static void Step(ImGuiSizeCallbackData* data)   { float step = (float)(int)(intptr_t)dat/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
StepNo	src/imgui/imgui_internal.h	/^    int                             StepNo;$/;"	m	struct:ImGuiListClipperData	typeref:typename:int
Storage	src/imgui/imgui_internal.h	/^    ImU32           Storage[(BITCOUNT + 31) >> 5];$/;"	m	struct:ImBitArray	typeref:typename:ImU32[]
Storage	src/imgui/imgui_internal.h	/^    ImVector<ImU32> Storage;$/;"	m	struct:ImBitVector	typeref:typename:ImVector<ImU32>
Strdup	src/imgui/imgui_demo.cpp	/^    static char* Strdup(const char* s)                           { IM_ASSERT(s); size_t len = st/;"	f	struct:ExampleAppConsole	typeref:typename:char *	file:
StretchWeight	src/imgui/imgui_internal.h	/^    float                   StretchWeight;                  \/\/ Master width weight when (Flags/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Stricmp	src/imgui/imgui_demo.cpp	/^    static int   Stricmp(const char* s1, const char* s2)         { int d; while ((d = toupper(*s/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Stride	src/imgui/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Stride	src/imgui/imgui_widgets.cpp	/^    int Stride;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:int	file:
Strnicmp	src/imgui/imgui_demo.cpp	/^    static int   Strnicmp(const char* s1, const char* s2, int n) { int d = 0; while (n > 0 && (d/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Strtrim	src/imgui/imgui_demo.cpp	/^    static void  Strtrim(char* s)                                { char* str_end = s + strlen(s)/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Style	src/imgui/imgui_internal.h	/^    ImGuiStyle              Style;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStyle
StyleColorsClassic	src/imgui/imgui_draw.cpp	/^void ImGui::StyleColorsClassic(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsDark	src/imgui/imgui_draw.cpp	/^void ImGui::StyleColorsDark(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsLight	src/imgui/imgui_draw.cpp	/^void ImGui::StyleColorsLight(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleVarStack	src/imgui/imgui_internal.h	/^    ImVector<ImGuiStyleMod> StyleVarStack;                      \/\/ Stack for PushStyleVar()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiStyleMod>
TABLE_BORDER_SIZE	src/imgui/imgui_tables.cpp	/^static const float TABLE_BORDER_SIZE                     = 1.0f;    \/\/ FIXME-TABLE: Currently /;"	v	typeref:typename:const float	file:
TABLE_DRAW_CHANNEL_BG0	src/imgui/imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_BG0 = 0;$/;"	v	typeref:typename:const int	file:
TABLE_DRAW_CHANNEL_BG2_FROZEN	src/imgui/imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_BG2_FROZEN = 1;$/;"	v	typeref:typename:const int	file:
TABLE_DRAW_CHANNEL_NOCLIP	src/imgui/imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_NOCLIP = 2;                     \/\/ When using ImGuiTableFl/;"	v	typeref:typename:const int	file:
TABLE_RESIZE_SEPARATOR_FEEDBACK_TIMER	src/imgui/imgui_tables.cpp	/^static const float TABLE_RESIZE_SEPARATOR_FEEDBACK_TIMER = 0.06f;   \/\/ Delay\/timer before mak/;"	v	typeref:typename:const float	file:
TABLE_RESIZE_SEPARATOR_HALF_THICKNESS	src/imgui/imgui_tables.cpp	/^static const float TABLE_RESIZE_SEPARATOR_HALF_THICKNESS = 4.0f;    \/\/ Extend outside inner bo/;"	v	typeref:typename:const float	file:
TIMER1_CTRL	src/memory.h	/^    const u16 TIMER1_CTRL        = 0x1600; \/\/ 1 Byte$/;"	v	namespace:Layout	typeref:typename:const u16
TIMER1_DATA	src/memory.h	/^    const u16 TIMER1_DATA        = 0x1601; \/\/ 2 Bytes$/;"	v	namespace:Layout	typeref:typename:const u16
TIMER2_CTRL	src/memory.h	/^    const u16 TIMER2_CTRL        = 0x1603; \/\/ 1 Byte$/;"	v	namespace:Layout	typeref:typename:const u16
TIMER2_DATA	src/memory.h	/^    const u16 TIMER2_DATA        = 0x1604; \/\/ 2 Bytes$/;"	v	namespace:Layout	typeref:typename:const u16
TIMER_H	src/timer.h	/^#define TIMER_H$/;"	d
TRT_BackgroundClipRect	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20203	file:
TRT_ColumnsClipRect	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20203	file:
TRT_ColumnsContentFrozen	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20203	file:
TRT_ColumnsContentHeadersIdeal	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20203	file:
TRT_ColumnsContentHeadersUsed	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20203	file:
TRT_ColumnsContentUnfrozen	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20203	file:
TRT_ColumnsRect	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20203	file:
TRT_ColumnsWorkRect	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20203	file:
TRT_Count	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20203	file:
TRT_HostClipRect	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20203	file:
TRT_InnerClipRect	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20203	file:
TRT_InnerRect	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20203	file:
TRT_OuterRect	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20203	file:
TRT_WorkRect	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20203	file:
TTInstruction	src/m6502.h	/^enum TTInstruction $/;"	g
TYPEDEFS_H	src/typedefs.h	/^#define TYPEDEFS_H$/;"	d
TabBarCalcMaxTabWidth	src/imgui/imgui_widgets.cpp	/^static float ImGui::TabBarCalcMaxTabWidth()$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarCalcTabID	src/imgui/imgui_widgets.cpp	/^static ImU32   ImGui::TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label)$/;"	f	class:ImGui	typeref:typename:ImU32	file:
TabBarCloseTab	src/imgui/imgui_widgets.cpp	/^void ImGui::TabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void
TabBarFindTabByID	src/imgui/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByID(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarLayout	src/imgui/imgui_widgets.cpp	/^static void ImGui::TabBarLayout(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:void	file:
TabBarProcessReorder	src/imgui/imgui_widgets.cpp	/^bool ImGui::TabBarProcessReorder(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:bool
TabBarQueueReorder	src/imgui/imgui_widgets.cpp	/^void ImGui::TabBarQueueReorder(ImGuiTabBar* tab_bar, const ImGuiTabItem* tab, int offset)$/;"	f	class:ImGui	typeref:typename:void
TabBarQueueReorderFromMousePos	src/imgui/imgui_widgets.cpp	/^void ImGui::TabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar, const ImGuiTabItem* src_tab, Im/;"	f	class:ImGui	typeref:typename:void
TabBarRemoveTab	src/imgui/imgui_widgets.cpp	/^void ImGui::TabBarRemoveTab(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:void
TabBarScrollClamp	src/imgui/imgui_widgets.cpp	/^static float ImGui::TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling)$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarScrollToTab	src/imgui/imgui_widgets.cpp	/^static void ImGui::TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiID tab_id, ImGuiTabBarSection* s/;"	f	class:ImGui	typeref:typename:void	file:
TabBarScrollingButtons	src/imgui/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarScrollingButtons(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBarTabListPopupButton	src/imgui/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarTabListPopupButton(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBars	src/imgui/imgui_internal.h	/^    ImPool<ImGuiTabBar>             TabBars;$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTabBar>
TabCount	src/imgui/imgui_widgets.cpp	/^    int                 TabCount;               \/\/ Number of tabs in this section.$/;"	m	struct:ImGuiTabBarSection	typeref:typename:int	file:
TabItemBackground	src/imgui/imgui_widgets.cpp	/^void ImGui::TabItemBackground(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, /;"	f	class:ImGui	typeref:typename:void
TabItemButton	src/imgui/imgui_widgets.cpp	/^bool    ImGui::TabItemButton(const char* label, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TabItemCalcSize	src/imgui/imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(const char* label, bool has_close_button)$/;"	f	class:ImGui	typeref:typename:ImVec2
TabItemComparerByBeginOrder	src/imgui/imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerByBeginOrder(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemComparerBySection	src/imgui/imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerBySection(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemEx	src/imgui/imgui_widgets.cpp	/^bool    ImGui::TabItemEx(ImGuiTabBar* tab_bar, const char* label, bool* p_open, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:bool
TabItemGetSectionIdx	src/imgui/imgui_widgets.cpp	/^static inline int TabItemGetSectionIdx(const ImGuiTabItem* tab)$/;"	f	typeref:typename:int	file:
TabItemLabelAndCloseButton	src/imgui/imgui_widgets.cpp	/^void ImGui::TabItemLabelAndCloseButton(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:void
TableBeginApplyRequests	src/imgui/imgui_tables.cpp	/^void ImGui::TableBeginApplyRequests(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableBeginCell	src/imgui/imgui_tables.cpp	/^void ImGui::TableBeginCell(ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableBeginInitMemory	src/imgui/imgui_tables.cpp	/^void ImGui::TableBeginInitMemory(ImGuiTable* table, int columns_count)$/;"	f	class:ImGui	typeref:typename:void
TableBeginRow	src/imgui/imgui_tables.cpp	/^void ImGui::TableBeginRow(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableDrawBorders	src/imgui/imgui_tables.cpp	/^void ImGui::TableDrawBorders(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableDrawContextMenu	src/imgui/imgui_tables.cpp	/^void ImGui::TableDrawContextMenu(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableEndCell	src/imgui/imgui_tables.cpp	/^void ImGui::TableEndCell(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableEndRow	src/imgui/imgui_tables.cpp	/^void ImGui::TableEndRow(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableFindByID	src/imgui/imgui_tables.cpp	/^ImGuiTable* ImGui::TableFindByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiTable *
TableFixColumnSortDirection	src/imgui/imgui_tables.cpp	/^void ImGui::TableFixColumnSortDirection(ImGuiTable* table, ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:void
TableFixFlags	src/imgui/imgui_tables.cpp	/^inline ImGuiTableFlags TableFixFlags(ImGuiTableFlags flags, ImGuiWindow* outer_window)$/;"	f	typeref:typename:ImGuiTableFlags
TableGcCompactSettings	src/imgui/imgui_tables.cpp	/^void ImGui::TableGcCompactSettings()$/;"	f	class:ImGui	typeref:typename:void
TableGcCompactTransientBuffers	src/imgui/imgui_tables.cpp	/^void ImGui::TableGcCompactTransientBuffers(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableGcCompactTransientBuffers	src/imgui/imgui_tables.cpp	/^void ImGui::TableGcCompactTransientBuffers(ImGuiTableTempData* temp_data)$/;"	f	class:ImGui	typeref:typename:void
TableGetBoundSettings	src/imgui/imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableGetBoundSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableGetCellBgRect	src/imgui/imgui_tables.cpp	/^ImRect ImGui::TableGetCellBgRect(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:ImRect
TableGetColumnAvailSortDirection	src/imgui/imgui_tables.cpp	/^static inline ImGuiSortDirection TableGetColumnAvailSortDirection(ImGuiTableColumn* column, int /;"	f	typeref:typename:ImGuiSortDirection	file:
TableGetColumnCount	src/imgui/imgui_tables.cpp	/^int ImGui::TableGetColumnCount()$/;"	f	class:ImGui	typeref:typename:int
TableGetColumnFlags	src/imgui/imgui_tables.cpp	/^ImGuiTableColumnFlags ImGui::TableGetColumnFlags(int column_n)$/;"	f	class:ImGui	typeref:typename:ImGuiTableColumnFlags
TableGetColumnIndex	src/imgui/imgui_tables.cpp	/^int ImGui::TableGetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
TableGetColumnName	src/imgui/imgui_tables.cpp	/^const char* ImGui::TableGetColumnName(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:const char *
TableGetColumnName	src/imgui/imgui_tables.cpp	/^const char* ImGui::TableGetColumnName(int column_n)$/;"	f	class:ImGui	typeref:typename:const char *
TableGetColumnNextSortDirection	src/imgui/imgui_tables.cpp	/^ImGuiSortDirection ImGui::TableGetColumnNextSortDirection(ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:ImGuiSortDirection
TableGetColumnResizeID	src/imgui/imgui_tables.cpp	/^ImGuiID ImGui::TableGetColumnResizeID(const ImGuiTable* table, int column_n, int instance_no)$/;"	f	class:ImGui	typeref:typename:ImGuiID
TableGetColumnWidthAuto	src/imgui/imgui_tables.cpp	/^float ImGui::TableGetColumnWidthAuto(ImGuiTable* table, ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:float
TableGetHeaderRowHeight	src/imgui/imgui_tables.cpp	/^float ImGui::TableGetHeaderRowHeight()$/;"	f	class:ImGui	typeref:typename:float
TableGetHoveredColumn	src/imgui/imgui_tables.cpp	/^int ImGui::TableGetHoveredColumn()$/;"	f	class:ImGui	typeref:typename:int
TableGetInstanceData	src/imgui/imgui_internal.h	/^    inline ImGuiTableInstanceData*   TableGetInstanceData(ImGuiTable* table, int instance_no) { /;"	f	namespace:ImGui	typeref:typename:ImGuiTableInstanceData *
TableGetMaxColumnWidth	src/imgui/imgui_tables.cpp	/^float ImGui::TableGetMaxColumnWidth(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:float
TableGetRowIndex	src/imgui/imgui_tables.cpp	/^int ImGui::TableGetRowIndex()$/;"	f	class:ImGui	typeref:typename:int
TableGetSortSpecs	src/imgui/imgui_tables.cpp	/^ImGuiTableSortSpecs* ImGui::TableGetSortSpecs()$/;"	f	class:ImGui	typeref:typename:ImGuiTableSortSpecs *
TableHeader	src/imgui/imgui_tables.cpp	/^void ImGui::TableHeader(const char* label)$/;"	f	class:ImGui	typeref:typename:void
TableHeadersRow	src/imgui/imgui_tables.cpp	/^void ImGui::TableHeadersRow()$/;"	f	class:ImGui	typeref:typename:void
TableIndex	src/imgui/imgui_internal.h	/^    int                         TableIndex;                 \/\/ Index in g.Tables.Buf[] pool$/;"	m	struct:ImGuiTableTempData	typeref:typename:int
TableLoadSettings	src/imgui/imgui_tables.cpp	/^void ImGui::TableLoadSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableMergeDrawChannels	src/imgui/imgui_tables.cpp	/^void ImGui::TableMergeDrawChannels(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableNextColumn	src/imgui/imgui_tables.cpp	/^bool ImGui::TableNextColumn()$/;"	f	class:ImGui	typeref:typename:bool
TableNextRow	src/imgui/imgui_tables.cpp	/^void ImGui::TableNextRow(ImGuiTableRowFlags row_flags, float row_min_height)$/;"	f	class:ImGui	typeref:typename:void
TableOpenContextMenu	src/imgui/imgui_tables.cpp	/^void ImGui::TableOpenContextMenu(int column_n)$/;"	f	class:ImGui	typeref:typename:void
TablePopBackgroundChannel	src/imgui/imgui_tables.cpp	/^void ImGui::TablePopBackgroundChannel()$/;"	f	class:ImGui	typeref:typename:void
TablePushBackgroundChannel	src/imgui/imgui_tables.cpp	/^void ImGui::TablePushBackgroundChannel()$/;"	f	class:ImGui	typeref:typename:void
TableRemove	src/imgui/imgui_tables.cpp	/^void ImGui::TableRemove(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableResetSettings	src/imgui/imgui_tables.cpp	/^void ImGui::TableResetSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSaveSettings	src/imgui/imgui_tables.cpp	/^void ImGui::TableSaveSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetBgColor	src/imgui/imgui_tables.cpp	/^void ImGui::TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnEnabled	src/imgui/imgui_tables.cpp	/^void ImGui::TableSetColumnEnabled(int column_n, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnIndex	src/imgui/imgui_tables.cpp	/^bool ImGui::TableSetColumnIndex(int column_n)$/;"	f	class:ImGui	typeref:typename:bool
TableSetColumnSortDirection	src/imgui/imgui_tables.cpp	/^void ImGui::TableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, bool ap/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidth	src/imgui/imgui_tables.cpp	/^void ImGui::TableSetColumnWidth(int column_n, float width)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidthAutoAll	src/imgui/imgui_tables.cpp	/^void ImGui::TableSetColumnWidthAutoAll(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidthAutoSingle	src/imgui/imgui_tables.cpp	/^void ImGui::TableSetColumnWidthAutoSingle(ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableSettingsAddSettingsHandler	src/imgui/imgui_tables.cpp	/^void ImGui::TableSettingsAddSettingsHandler()$/;"	f	class:ImGui	typeref:typename:void
TableSettingsCalcChunkSize	src/imgui/imgui_tables.cpp	/^static size_t TableSettingsCalcChunkSize(int columns_count)$/;"	f	typeref:typename:size_t	file:
TableSettingsCreate	src/imgui/imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableSettingsCreate(ImGuiID id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableSettingsFindByID	src/imgui/imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableSettingsFindByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableSettingsHandler_ApplyAll	src/imgui/imgui_tables.cpp	/^static void TableSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
TableSettingsHandler_ClearAll	src/imgui/imgui_tables.cpp	/^static void TableSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
TableSettingsHandler_ReadLine	src/imgui/imgui_tables.cpp	/^static void TableSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, con/;"	f	typeref:typename:void	file:
TableSettingsHandler_ReadOpen	src/imgui/imgui_tables.cpp	/^static void* TableSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* nam/;"	f	typeref:typename:void *	file:
TableSettingsHandler_WriteAll	src/imgui/imgui_tables.cpp	/^static void TableSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGu/;"	f	typeref:typename:void	file:
TableSettingsInit	src/imgui/imgui_tables.cpp	/^static void TableSettingsInit(ImGuiTableSettings* settings, ImGuiID id, int columns_count, int c/;"	f	typeref:typename:void	file:
TableSetupColumn	src/imgui/imgui_tables.cpp	/^void ImGui::TableSetupColumn(const char* label, ImGuiTableColumnFlags flags, float init_width_or/;"	f	class:ImGui	typeref:typename:void
TableSetupColumnFlags	src/imgui/imgui_tables.cpp	/^static void TableSetupColumnFlags(ImGuiTable* table, ImGuiTableColumn* column, ImGuiTableColumnF/;"	f	typeref:typename:void	file:
TableSetupDrawChannels	src/imgui/imgui_tables.cpp	/^void ImGui::TableSetupDrawChannels(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetupScrollFreeze	src/imgui/imgui_tables.cpp	/^void ImGui::TableSetupScrollFreeze(int columns, int rows)$/;"	f	class:ImGui	typeref:typename:void
TableSortSpecsBuild	src/imgui/imgui_tables.cpp	/^void ImGui::TableSortSpecsBuild(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSortSpecsSanitize	src/imgui/imgui_tables.cpp	/^void ImGui::TableSortSpecsSanitize(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateBorders	src/imgui/imgui_tables.cpp	/^void ImGui::TableUpdateBorders(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateColumnsWeightFromWidth	src/imgui/imgui_tables.cpp	/^void ImGui::TableUpdateColumnsWeightFromWidth(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateLayout	src/imgui/imgui_tables.cpp	/^void ImGui::TableUpdateLayout(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
Tables	src/imgui/imgui_internal.h	/^    ImPool<ImGuiTable>              Tables;                     \/\/ Persistent table data$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTable>
TablesLastTimeActive	src/imgui/imgui_internal.h	/^    ImVector<float>                 TablesLastTimeActive;       \/\/ Last used timestamp of each/;"	m	struct:ImGuiContext	typeref:typename:ImVector<float>
TablesTempData	src/imgui/imgui_internal.h	/^    ImVector<ImGuiTableTempData>    TablesTempData;             \/\/ Temporary table data (buffe/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiTableTempData>
TablesTempDataStacked	src/imgui/imgui_internal.h	/^    int                             TablesTempDataStacked;      \/\/ Temporary table data size (/;"	m	struct:ImGuiContext	typeref:typename:int
Tabs	src/imgui/imgui_internal.h	/^    ImVector<ImGuiTabItem> Tabs;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVector<ImGuiTabItem>
TabsActiveCount	src/imgui/imgui_internal.h	/^    ImS16               TabsActiveCount;        \/\/ Number of tabs submitted this frame.$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
TabsAddedNew	src/imgui/imgui_internal.h	/^    bool                TabsAddedNew;           \/\/ Set to true when a new tab item or button h/;"	m	struct:ImGuiTabBar	typeref:typename:bool
TabsNames	src/imgui/imgui_internal.h	/^    ImGuiTextBuffer     TabsNames;              \/\/ For non-docking tab bar we re-append names /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTextBuffer
TempBuffer	src/imgui/imgui_internal.h	/^    ImVector<char>          TempBuffer;                         \/\/ Temporary text buffer$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
TempData	src/imgui/imgui_internal.h	/^    ImGuiTableTempData*         TempData;                   \/\/ Transient data while table is a/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableTempData *
TempInputId	src/imgui/imgui_internal.h	/^    ImGuiID                 TempInputId;                        \/\/ Temporary text input when C/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
TempInputIsActive	src/imgui/imgui_internal.h	/^    inline bool             TempInputIsActive(ImGuiID id)       { ImGuiContext& g = *GImGui; ret/;"	f	namespace:ImGui	typeref:typename:bool
TempInputScalar	src/imgui/imgui_widgets.cpp	/^bool ImGui::TempInputScalar(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType data_/;"	f	class:ImGui	typeref:typename:bool
TempInputText	src/imgui/imgui_widgets.cpp	/^bool ImGui::TempInputText(const ImRect& bb, ImGuiID id, const char* label, char* buf, int buf_si/;"	f	class:ImGui	typeref:typename:bool
TestBit	src/imgui/imgui_internal.h	/^    bool            TestBit(int n) const        { IM_ASSERT(n < (Storage.Size << 5)); return ImB/;"	f	struct:ImBitVector	typeref:typename:bool
TestBit	src/imgui/imgui_internal.h	/^    bool            TestBit(int n) const        { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:bool
TestEngine	src/imgui/imgui_internal.h	/^    void*                   TestEngine;                         \/\/ Test engine user data$/;"	m	struct:ImGuiContext	typeref:typename:void *
TestEngineHookItems	src/imgui/imgui_internal.h	/^    bool                    TestEngineHookItems;                \/\/ Will call test engine hooks/;"	m	struct:ImGuiContext	typeref:typename:bool
TexUvLines	src/imgui/imgui_internal.h	/^    const ImVec4*   TexUvLines;                 \/\/ UV of anti-aliased lines in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:const ImVec4 *
TexUvWhitePixel	src/imgui/imgui_internal.h	/^    ImVec2          TexUvWhitePixel;            \/\/ UV of white pixel in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2
Text	src/imgui/imgui_internal.h	/^        ImGuiInputEventText         Text;           \/\/ if Type == ImGuiInputEventType_Text$/;"	m	union:ImGuiInputEvent::__anon6fa7fe33020a	typeref:typename:ImGuiInputEventText
Text	src/imgui/imgui_widgets.cpp	/^void ImGui::Text(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextA	src/imgui/imgui_internal.h	/^    ImVector<char>          TextA;                  \/\/ temporary UTF8 buffer for callbacks and/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
TextAIsValid	src/imgui/imgui_internal.h	/^    bool                    TextAIsValid;           \/\/ temporary UTF8 buffer is not initially /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
TextColored	src/imgui/imgui_widgets.cpp	/^void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextColoredV	src/imgui/imgui_widgets.cpp	/^void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextDisabled	src/imgui/imgui_widgets.cpp	/^void ImGui::TextDisabled(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextDisabledV	src/imgui/imgui_widgets.cpp	/^void ImGui::TextDisabledV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextEditCallback	src/imgui/imgui_demo.cpp	/^    int     TextEditCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEditCallbackStub	src/imgui/imgui_demo.cpp	/^    static int TextEditCallbackStub(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEx	src/imgui/imgui_widgets.cpp	/^void ImGui::TextEx(const char* text, const char* text_end, ImGuiTextFlags flags)$/;"	f	class:ImGui	typeref:typename:void
TextFilters	src/imgui/imgui_demo.cpp	/^            struct TextFilters$/;"	s	function:ShowDemoWindowWidgets	file:
TextUnformatted	src/imgui/imgui_widgets.cpp	/^void ImGui::TextUnformatted(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
TextV	src/imgui/imgui_widgets.cpp	/^void ImGui::TextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextW	src/imgui/imgui_internal.h	/^    ImVector<ImWchar>       TextW;                  \/\/ edit buffer, we need to persist but can/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<ImWchar>
TextWrapPos	src/imgui/imgui_internal.h	/^    float                   TextWrapPos;            \/\/ Current text wrap pos.$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
TextWrapPosStack	src/imgui/imgui_internal.h	/^    ImVector<float>         TextWrapPosStack;       \/\/ Store text wrap pos to restore (attenti/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
TextWrapped	src/imgui/imgui_widgets.cpp	/^void ImGui::TextWrapped(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextWrappedV	src/imgui/imgui_widgets.cpp	/^void ImGui::TextWrappedV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
Time	src/imgui/imgui_impl_glfw.cpp	/^    double                  Time;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:double	file:
Time	src/imgui/imgui_internal.h	/^    double                  Time;$/;"	m	struct:ImGuiContext	typeref:typename:double
Timer	src/timer.cpp	/^Timer::Timer(Cpu &cpu, const Memory &mem, u16 ctrl_address, u16 data_address) :$/;"	f	class:Timer
Timer	src/timer.h	/^struct Timer $/;"	s
TitleBarHeight	src/imgui/imgui_internal.h	/^    float       TitleBarHeight() const  { ImGuiContext& g = *GImGui; return (Flags & ImGuiWindow/;"	f	struct:ImGuiWindow	typeref:typename:float
TitleBarRect	src/imgui/imgui_internal.h	/^    ImRect      TitleBarRect() const    { return ImRect(Pos, ImVec2(Pos.x + SizeFull.x, Pos.y + /;"	f	struct:ImGuiWindow	typeref:typename:ImRect
ToVec4	src/imgui/imgui_internal.h	/^    ImVec4      ToVec4() const                      { return ImVec4(Min.x, Min.y, Max.x, Max.y);/;"	f	struct:ImRect	typeref:typename:ImVec4
Tooltip	src/imgui/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:const char *	file:
TooltipOverrideCount	src/imgui/imgui_internal.h	/^    short                   TooltipOverrideCount;$/;"	m	struct:ImGuiContext	typeref:typename:short
TooltipSlowDelay	src/imgui/imgui_internal.h	/^    float                   TooltipSlowDelay;                   \/\/ Time before slow tooltips a/;"	m	struct:ImGuiContext	typeref:typename:float
TotalWidth	src/imgui/imgui_internal.h	/^    ImU32       TotalWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU32
Translate	src/imgui/imgui_internal.h	/^    void        Translate(const ImVec2& d)          { Min.x += d.x; Min.y += d.y; Max.x += d.x; /;"	f	struct:ImRect	typeref:typename:void
TranslateX	src/imgui/imgui_internal.h	/^    void        TranslateX(float dx)                { Min.x += dx; Max.x += dx; }$/;"	f	struct:ImRect	typeref:typename:void
TranslateY	src/imgui/imgui_internal.h	/^    void        TranslateY(float dy)                { Min.y += dy; Max.y += dy; }$/;"	f	struct:ImRect	typeref:typename:void
TreeDepth	src/imgui/imgui_internal.h	/^    int                     TreeDepth;              \/\/ Current tree depth.$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
TreeJumpToParentOnPopMask	src/imgui/imgui_internal.h	/^    ImU32                   TreeJumpToParentOnPopMask; \/\/ Store a copy of !g.NavIdIsAlive for /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImU32
TreeNode	src/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	src/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	src/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehavior	src/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehaviorIsOpen	src/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	src/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	src/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	src/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	src/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	src/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	src/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	src/imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreePop	src/imgui/imgui_widgets.cpp	/^void ImGui::TreePop()$/;"	f	class:ImGui	typeref:typename:void
TreePush	src/imgui/imgui_widgets.cpp	/^void ImGui::TreePush(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
TreePush	src/imgui/imgui_widgets.cpp	/^void ImGui::TreePush(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
TreePushOverrideID	src/imgui/imgui_widgets.cpp	/^void ImGui::TreePushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
TryGetMapData	src/imgui/imgui_internal.h	/^    T*          TryGetMapData(ImPoolIdx n)          { int idx = Map.Data[n].val_i; if (idx == -1/;"	f	struct:ImPool	typeref:typename:T *
Type	src/imgui/imgui.cpp	/^    ImGuiDataType   Type;$/;"	m	struct:ImGuiStyleVarInfo	typeref:typename:ImGuiDataType	file:
Type	src/imgui/imgui_demo.cpp	/^                const char*     Type;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:const char *	file:
Type	src/imgui/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Type	src/imgui/imgui_internal.h	/^    ImGuiContextHookType        Type;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiContextHookType
Type	src/imgui/imgui_internal.h	/^    ImGuiInputEventType             Type;$/;"	m	struct:ImGuiInputEvent	typeref:typename:ImGuiInputEventType
TypeHash	src/imgui/imgui_internal.h	/^    ImGuiID     TypeHash;       \/\/ == ImHashStr(TypeName)$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:ImGuiID
TypeName	src/imgui/imgui_internal.h	/^    const char* TypeName;       \/\/ Short description stored in .ini file. Disallowed character/;"	m	struct:ImGuiSettingsHandler	typeref:typename:const char *
UTIL_H	src/util.h	/^#define UTIL_H$/;"	d
Unindent	src/imgui/imgui.cpp	/^void ImGui::Unindent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
UnpackAccumulativeOffsetsIntoRanges	src/imgui/imgui_draw.cpp	/^static void UnpackAccumulativeOffsetsIntoRanges(int base_codepoint, const short* accumulative_of/;"	f	typeref:typename:void	file:
UnpackBitVectorToFlatIndexList	src/imgui/imgui_draw.cpp	/^static void UnpackBitVectorToFlatIndexList(const ImBitVector* in, ImVector<int>* out)$/;"	f	typeref:typename:void	file:
Update	src/imgui/imgui_widgets.cpp	/^void ImGuiMenuColumns::Update(float spacing, bool window_reappearing)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
UpdateDebugToolItemPicker	src/imgui/imgui.cpp	/^void ImGui::UpdateDebugToolItemPicker() {}$/;"	f	class:ImGui	typeref:typename:void
UpdateDebugToolItemPicker	src/imgui/imgui.cpp	/^void ImGui::UpdateDebugToolItemPicker()$/;"	f	class:ImGui	typeref:typename:void
UpdateDebugToolStackQueries	src/imgui/imgui.cpp	/^void ImGui::UpdateDebugToolStackQueries() {}$/;"	f	class:ImGui	typeref:typename:void
UpdateDebugToolStackQueries	src/imgui/imgui.cpp	/^void ImGui::UpdateDebugToolStackQueries()$/;"	f	class:ImGui	typeref:typename:void
UpdateHoveredWindowAndCaptureFlags	src/imgui/imgui.cpp	/^void ImGui::UpdateHoveredWindowAndCaptureFlags()$/;"	f	class:ImGui	typeref:typename:void
UpdateInputEvents	src/imgui/imgui.cpp	/^void ImGui::UpdateInputEvents(bool trickle_fast_inputs)$/;"	f	class:ImGui	typeref:typename:void
UpdateKeyboardInputs	src/imgui/imgui.cpp	/^static void ImGui::UpdateKeyboardInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateMouseInputs	src/imgui/imgui.cpp	/^static void ImGui::UpdateMouseInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateMouseMovingWindowEndFrame	src/imgui/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowEndFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseMovingWindowNewFrame	src/imgui/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowNewFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseWheel	src/imgui/imgui.cpp	/^void ImGui::UpdateMouseWheel()$/;"	f	class:ImGui	typeref:typename:void
UpdateSettings	src/imgui/imgui.cpp	/^void ImGui::UpdateSettings()$/;"	f	class:ImGui	typeref:typename:void
UpdateViewportsNewFrame	src/imgui/imgui.cpp	/^static void ImGui::UpdateViewportsNewFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateWindowInFocusOrderList	src/imgui/imgui.cpp	/^static void UpdateWindowInFocusOrderList(ImGuiWindow* window, bool just_created, ImGuiWindowFlag/;"	f	typeref:typename:void	file:
UpdateWindowManualResize	src/imgui/imgui.cpp	/^static bool ImGui::UpdateWindowManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, in/;"	f	class:ImGui	typeref:typename:bool	file:
UpdateWindowParentAndRootLinks	src/imgui/imgui.cpp	/^void ImGui::UpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWin/;"	f	class:ImGui	typeref:typename:void
UpdateWorkRect	src/imgui/imgui_internal.h	/^    void    UpdateWorkRect()            { WorkPos = CalcWorkRectPos(WorkOffsetMin); WorkSize = C/;"	f	struct:ImGuiViewportP	typeref:typename:void
UseBufferSubData	src/imgui/imgui_impl_opengl3.cpp	/^    bool            UseBufferSubData;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
UserData	src/imgui/imgui_internal.h	/^    void*                       UserData;$/;"	m	struct:ImGuiContextHook	typeref:typename:void *
UserData	src/imgui/imgui_internal.h	/^    void*       UserData;$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void *
UserID	src/imgui/imgui_internal.h	/^    ImGuiID                 UserID;                         \/\/ Optional, value passed to Table/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiID
UserID	src/imgui/imgui_internal.h	/^    ImGuiID                 UserID;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiID
UserOuterSize	src/imgui/imgui_internal.h	/^    ImVec2                      UserOuterSize;              \/\/ outer_size.x passed to BeginTab/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
VAO	src/display.h	/^    unsigned int VAO;$/;"	m	class:Display	typeref:typename:unsigned int
VGA_CHAR_BUF_HIGH	src/memory.h	/^    const u16 VGA_CHAR_BUF_HIGH  = 0x15FF;$/;"	v	namespace:Layout	typeref:typename:const u16
VGA_CHAR_BUF_LOW	src/memory.h	/^    const u16 VGA_CHAR_BUF_LOW   = 0x1200;$/;"	v	namespace:Layout	typeref:typename:const u16
VGA_CHAR_BUF_SIZE	src/memory.h	/^    const u16 VGA_CHAR_BUF_SIZE = VGA_CHAR_BUF_HIGH - VGA_CHAR_BUF_LOW + 1;$/;"	v	namespace:Layout	typeref:typename:const u16
VGA_CHAR_SIZE	src/display.h	/^    const unsigned int VGA_CHAR_SIZE    =  8;$/;"	m	class:Display	typeref:typename:const unsigned int
VGA_N_CHARS	src/display.h	/^    const unsigned int VGA_N_CHARS      = Layout::VGA_CHAR_BUF_SIZE \/ VGA_CHAR_SIZE;$/;"	m	class:Display	typeref:typename:const unsigned int
VGA_TEXT_BUF_HIGH	src/memory.h	/^    const u16 VGA_TEXT_BUF_HIGH  = 0x11FF; \/\/ last 96 bytes are unused but reserved$/;"	v	namespace:Layout	typeref:typename:const u16
VGA_TEXT_BUF_LOW	src/memory.h	/^    const u16 VGA_TEXT_BUF_LOW   = 0x0200;$/;"	v	namespace:Layout	typeref:typename:const u16
VGA_TEXT_BUF_SIZE	src/memory.h	/^    const u16 VGA_TEXT_BUF_SIZE = VGA_TEXT_BUF_HIGH - VGA_TEXT_BUF_LOW + 1;$/;"	v	namespace:Layout	typeref:typename:const u16
VGA_TEXT_COLUMNS	src/display.h	/^    const unsigned int VGA_TEXT_COLUMNS = 80;$/;"	m	class:Display	typeref:typename:const unsigned int
VGA_TEXT_ROWS	src/display.h	/^    const unsigned int VGA_TEXT_ROWS    = 25;$/;"	m	class:Display	typeref:typename:const unsigned int
VSliderFloat	src/imgui/imgui_widgets.cpp	/^bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_m/;"	f	class:ImGui	typeref:typename:bool
VSliderInt	src/imgui/imgui_widgets.cpp	/^bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, cons/;"	f	class:ImGui	typeref:typename:bool
VSliderScalar	src/imgui/imgui_widgets.cpp	/^bool ImGui::VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* /;"	f	class:ImGui	typeref:typename:bool
Value	src/imgui/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:ImGuiTableFlags	file:
Value	src/imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, bool b)$/;"	f	class:ImGui	typeref:typename:void
Value	src/imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, float v, const char* float_format)$/;"	f	class:ImGui	typeref:typename:void
Value	src/imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, int v)$/;"	f	class:ImGui	typeref:typename:void
Value	src/imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, unsigned int v)$/;"	f	class:ImGui	typeref:typename:void
Values	src/imgui/imgui_widgets.cpp	/^    const float* Values;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:const float *	file:
VarIdx	src/imgui/imgui_internal.h	/^    ImGuiStyleVar   VarIdx;$/;"	m	struct:ImGuiStyleMod	typeref:typename:ImGuiStyleVar
VboHandle	src/imgui/imgui_impl_opengl3.cpp	/^    unsigned int    VboHandle, ElementsHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:unsigned int	file:
Vertex	src/display.h	/^struct Vertex$/;"	s
VertexBufferSize	src/imgui/imgui_impl_opengl3.cpp	/^    GLsizeiptr      VertexBufferSize;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLsizeiptr	file:
Viewport	src/imgui/imgui_internal.h	/^    ImGuiViewportP*         Viewport;                           \/\/ Always set in Begin(). Inac/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiViewportP *
Viewports	src/imgui/imgui_internal.h	/^    ImVector<ImGuiViewportP*> Viewports;                        \/\/ Active viewports (Size==1 i/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiViewportP * >
VisibleMaskByIndex	src/imgui/imgui_internal.h	/^    ImU64                       VisibleMaskByIndex;         \/\/ Column Index -> IsVisibleX|IsVi/;"	m	struct:ImGuiTable	typeref:typename:ImU64
VisibleTabId	src/imgui/imgui_internal.h	/^    ImGuiID             VisibleTabId;           \/\/ Can occasionally be != SelectedTabId (e.g. /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
VisibleTabWasSubmitted	src/imgui/imgui_internal.h	/^    bool                VisibleTabWasSubmitted;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
WIN32_LEAN_AND_MEAN	src/imgui/imgui.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WINDOWS_HOVER_PADDING	src/imgui/imgui.cpp	/^static const float WINDOWS_HOVER_PADDING                    = 4.0f;     \/\/ Extend outside wind/;"	v	typeref:typename:const float	file:
WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER	src/imgui/imgui.cpp	/^static const float WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER    = 2.00f;    \/\/ Lock scrolled windo/;"	v	typeref:typename:const float	file:
WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER	src/imgui/imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER = 0.04f;    \/\/ Reduce visual noise/;"	v	typeref:typename:const float	file:
WRT_Content	src/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20103	file:
WRT_ContentIdeal	src/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20103	file:
WRT_ContentRegionRect	src/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20103	file:
WRT_Count	src/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20103	file:
WRT_InnerClipRect	src/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20103	file:
WRT_InnerRect	src/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20103	file:
WRT_OuterRect	src/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20103	file:
WRT_OuterRectClipped	src/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20103	file:
WRT_WorkRect	src/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon15d25ef20103	file:
WantApply	src/imgui/imgui_internal.h	/^    bool                        WantApply;              \/\/ Set when loaded from .ini data (to /;"	m	struct:ImGuiTableSettings	typeref:typename:bool
WantApply	src/imgui/imgui_internal.h	/^    bool        WantApply;      \/\/ Set when loaded from .ini data (to enable merging\/loading /;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
WantCaptureKeyboardNextFrame	src/imgui/imgui_internal.h	/^    int                     WantCaptureKeyboardNextFrame;       \/\/ "$/;"	m	struct:ImGuiContext	typeref:typename:int
WantCaptureMouseNextFrame	src/imgui/imgui_internal.h	/^    int                     WantCaptureMouseNextFrame;          \/\/ Explicit capture override v/;"	m	struct:ImGuiContext	typeref:typename:int
WantClose	src/imgui/imgui_demo.cpp	/^    bool        WantClose;  \/\/ Set when the document$/;"	m	struct:MyDocument	typeref:typename:bool	file:
WantClose	src/imgui/imgui_internal.h	/^    bool                WantClose;              \/\/ Marked as closed by SetTabItemClosed()$/;"	m	struct:ImGuiTabItem	typeref:typename:bool
WantCollapseToggle	src/imgui/imgui_internal.h	/^    bool                    WantCollapseToggle;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WantLayout	src/imgui/imgui_internal.h	/^    bool                WantLayout;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
WantTextInputNextFrame	src/imgui/imgui_internal.h	/^    int                     WantTextInputNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WasActive	src/imgui/imgui_internal.h	/^    bool                    WasActive;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WheelX	src/imgui/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:float
WheelY	src/imgui/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:float
WheelingWindow	src/imgui/imgui_internal.h	/^    ImGuiWindow*            WheelingWindow;                     \/\/ Track the window we started/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
WheelingWindowRefMousePos	src/imgui/imgui_internal.h	/^    ImVec2                  WheelingWindowRefMousePos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WheelingWindowTimer	src/imgui/imgui_internal.h	/^    float                   WheelingWindowTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
Width	src/imgui/imgui_internal.h	/^    float                       Width;          \/\/ Set by SetNextItemWidth()$/;"	m	struct:ImGuiNextItemData	typeref:typename:float
Width	src/imgui/imgui_internal.h	/^    float               Width;                  \/\/ Width currently displayed$/;"	m	struct:ImGuiTabItem	typeref:typename:float
Width	src/imgui/imgui_internal.h	/^    float       Width;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
Width	src/imgui/imgui_widgets.cpp	/^    float               Width;                  \/\/ Sum of width of tabs in this section (after/;"	m	struct:ImGuiTabBarSection	typeref:typename:float	file:
WidthAllTabs	src/imgui/imgui_internal.h	/^    float               WidthAllTabs;           \/\/ Actual width of all tabs (locked during lay/;"	m	struct:ImGuiTabBar	typeref:typename:float
WidthAllTabsIdeal	src/imgui/imgui_internal.h	/^    float               WidthAllTabsIdeal;      \/\/ Ideal width if all tabs were visible and no/;"	m	struct:ImGuiTabBar	typeref:typename:float
WidthAuto	src/imgui/imgui_internal.h	/^    float                   WidthAuto;                      \/\/ Automatic width$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WidthGiven	src/imgui/imgui_internal.h	/^    float                   WidthGiven;                     \/\/ Final\/actual width visible == /;"	m	struct:ImGuiTableColumn	typeref:typename:float
WidthOrWeight	src/imgui/imgui_internal.h	/^    float                   WidthOrWeight;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:float
WidthRequest	src/imgui/imgui_internal.h	/^    float                   WidthRequest;                   \/\/ Master width absolute value whe/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Widths	src/imgui/imgui_internal.h	/^    ImU16       Widths[4];          \/\/ Width of:   Icon, Label, Shortcut, Mark  (accumulators /;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16[4]
Window	src/imgui/imgui_impl_glfw.cpp	/^    GLFWwindow*             Window;$/;"	m	struct:ImGui_ImplGlfw_Data	typeref:typename:GLFWwindow *	file:
Window	src/imgui/imgui_internal.h	/^    ImGuiWindow*            Window;$/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiWindow *
Window	src/imgui/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Init,Move    \/\/ Best candidate window (result->It/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiWindow *
Window	src/imgui/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Resolved on BeginPopup() - may stay unresolved if u/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
WindowBorderSize	src/imgui/imgui_internal.h	/^    float                   WindowBorderSize;                   \/\/ Window border size at the t/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowComparerByBeginOrder	src/imgui/imgui.cpp	/^            struct Func { static int IMGUI_CDECL WindowComparerByBeginOrder(const void* lhs, con/;"	f	struct:ImGui::ShowMetricsWindow::Func	typeref:typename:int IMGUI_CDECL	file:
WindowID	src/imgui/imgui_internal.h	/^    ImGuiID     WindowID;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
WindowPadding	src/imgui/imgui_internal.h	/^    ImVec2                  WindowPadding;                      \/\/ Window padding at the time /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
WindowRectAbsToRel	src/imgui/imgui_internal.h	/^    inline ImRect           WindowRectAbsToRel(ImGuiWindow* window, const ImRect& r) { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImRect
WindowRectRelToAbs	src/imgui/imgui_internal.h	/^    inline ImRect           WindowRectRelToAbs(ImGuiWindow* window, const ImRect& r) { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImRect
WindowRounding	src/imgui/imgui_internal.h	/^    float                   WindowRounding;                     \/\/ Window rounding at the time/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowSettingsHandler_ApplyAll	src/imgui/imgui.cpp	/^static void WindowSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ClearAll	src/imgui/imgui.cpp	/^static void WindowSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadLine	src/imgui/imgui.cpp	/^static void WindowSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, co/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadOpen	src/imgui/imgui.cpp	/^static void* WindowSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* na/;"	f	typeref:typename:void *	file:
WindowSettingsHandler_WriteAll	src/imgui/imgui.cpp	/^static void WindowSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImG/;"	f	typeref:typename:void	file:
Windows	src/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  Windows;                            \/\/ Windows, sorted in display /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsActiveCount	src/imgui/imgui_internal.h	/^    int                     WindowsActiveCount;                 \/\/ Number of unique windows su/;"	m	struct:ImGuiContext	typeref:typename:int
WindowsById	src/imgui/imgui_internal.h	/^    ImGuiStorage            WindowsById;                        \/\/ Map window's ImGuiID to ImG/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStorage
WindowsFocusOrder	src/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsFocusOrder;                  \/\/ Root windows, sorted in foc/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsHoverPadding	src/imgui/imgui_internal.h	/^    ImVec2                  WindowsHoverPadding;                \/\/ Padding around resizable wi/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WindowsTempSortBuffer	src/imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsTempSortBuffer;              \/\/ Temporary buffer used in En/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WithinEndChild	src/imgui/imgui_internal.h	/^    bool                    WithinEndChild;                     \/\/ Set within EndChild()$/;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScope	src/imgui/imgui_internal.h	/^    bool                    WithinFrameScope;                   \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScopeWithImplicitWindow	src/imgui/imgui_internal.h	/^    bool                    WithinFrameScopeWithImplicitWindow; \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WorkMaxX	src/imgui/imgui_internal.h	/^    float                   WorkMaxX;                       \/\/ Contents region max ~(MaxX - Ce/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WorkMinX	src/imgui/imgui_internal.h	/^    float                   WorkMinX;                       \/\/ Contents region min ~(MinX + Ce/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WorkOffsetMax	src/imgui/imgui_internal.h	/^    ImVec2              WorkOffsetMax;          \/\/ Work Area: Offset from Pos+Size to bottom-r/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
WorkOffsetMin	src/imgui/imgui_internal.h	/^    ImVec2              WorkOffsetMin;          \/\/ Work Area: Offset from Pos to top-left corn/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
WorkRect	src/imgui/imgui_internal.h	/^    ImRect                      WorkRect;$/;"	m	struct:ImGuiTable	typeref:typename:ImRect
WorkRect	src/imgui/imgui_internal.h	/^    ImRect                  WorkRect;                           \/\/ Initially covers the whole /;"	m	struct:ImGuiWindow	typeref:typename:ImRect
WriteAccessed	src/imgui/imgui_internal.h	/^    bool                    WriteAccessed;                      \/\/ Set to true when any widget/;"	m	struct:ImGuiWindow	typeref:typename:bool
WriteAllFn	src/imgui/imgui_internal.h	/^    void        (*WriteAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer*/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,ImGuiTextBuffer * out_buf)
X	src/m6502.h	/^    u8 ACC = 0x00, X = 0x00, Y = 0x00;$/;"	m	struct:Cpu	typeref:typename:u8
Y	src/m6502.h	/^    u8 ACC = 0x00, X = 0x00, Y = 0x00;$/;"	m	struct:Cpu	typeref:typename:u8
ZERO_PAGE_HIGH	src/memory.h	/^    const u16 ZERO_PAGE_HIGH     = 0x00FF;$/;"	v	namespace:Layout	typeref:typename:const u16
ZERO_PAGE_LOW	src/memory.h	/^    const u16 ZERO_PAGE_LOW      = 0x0000;$/;"	v	namespace:Layout	typeref:typename:const u16
_CRT_SECURE_NO_WARNINGS	src/imgui/imgui.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	src/imgui/imgui_demo.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	src/imgui/imgui_draw.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	src/imgui/imgui_impl_opengl3.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	src/imgui/imgui_tables.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	src/imgui/imgui_widgets.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CalcCircleAutoSegmentCount	src/imgui/imgui_draw.cpp	/^int ImDrawList::_CalcCircleAutoSegmentCount(float radius) const$/;"	f	class:ImDrawList	typeref:typename:int
_ClearFreeMemory	src/imgui/imgui_draw.cpp	/^void ImDrawList::_ClearFreeMemory()$/;"	f	class:ImDrawList	typeref:typename:void
_GLAD_IS_SOME_NEW_VERSION	src/glad.cpp	/^#define _GLAD_IS_SOME_NEW_VERSION /;"	d	file:
_OnChangedClipRect	src/imgui/imgui_draw.cpp	/^void ImDrawList::_OnChangedClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
_OnChangedTextureID	src/imgui/imgui_draw.cpp	/^void ImDrawList::_OnChangedTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
_OnChangedVtxOffset	src/imgui/imgui_draw.cpp	/^void ImDrawList::_OnChangedVtxOffset()$/;"	f	class:ImDrawList	typeref:typename:void
_PathArcToFastEx	src/imgui/imgui_draw.cpp	/^void ImDrawList::_PathArcToFastEx(const ImVec2& center, float radius, int a_min_sample, int a_ma/;"	f	class:ImDrawList	typeref:typename:void
_PathArcToN	src/imgui/imgui_draw.cpp	/^void ImDrawList::_PathArcToN(const ImVec2& center, float radius, float a_min, float a_max, int n/;"	f	class:ImDrawList	typeref:typename:void
_PopUnusedDrawCmd	src/imgui/imgui_draw.cpp	/^void ImDrawList::_PopUnusedDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
_ResetForNewFrame	src/imgui/imgui_draw.cpp	/^void ImDrawList::_ResetForNewFrame()$/;"	f	class:ImDrawList	typeref:typename:void
_TryMergeDrawCmds	src/imgui/imgui_draw.cpp	/^void ImDrawList::_TryMergeDrawCmds()$/;"	f	class:ImDrawList	typeref:typename:void
__STB_INCLUDE_STB_TRUETYPE_H__	src/imgui/imstb_truetype.h	/^#define __STB_INCLUDE_STB_TRUETYPE_H__$/;"	d
__anon15d25ef20103	src/imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	g	function:ImGui::ShowMetricsWindow	file:
__anon15d25ef20203	src/imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	g	function:ImGui::ShowMetricsWindow	file:
__anon69592cc70103	src/imgui/imstb_rectpack.h	/^{$/;"	g
__anon69592cc70203	src/imgui/imstb_rectpack.h	/^{$/;"	g
__anon69592cc70308	src/imgui/imstb_rectpack.h	/^{$/;"	s
__anon6fa7fe33010a	src/imgui/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	u	struct:ImGuiStyleMod
__anon6fa7fe33020a	src/imgui/imgui_internal.h	/^    {$/;"	u	struct:ImGuiInputEvent
__anon80c56a9c0108	src/imgui/imstb_truetype.h	/^{$/;"	s
__anon80c56a9c0208	src/imgui/imstb_truetype.h	/^{$/;"	s
__anon80c56a9c0308	src/imgui/imstb_truetype.h	/^{$/;"	s
__anon80c56a9c0408	src/imgui/imstb_truetype.h	/^{$/;"	s
__anon80c56a9c0508	src/imgui/imstb_truetype.h	/^{$/;"	s
__anon80c56a9c0603	src/imgui/imstb_truetype.h	/^   enum {$/;"	g
__anon80c56a9c0708	src/imgui/imstb_truetype.h	/^   {$/;"	s
__anon80c56a9c0808	src/imgui/imstb_truetype.h	/^{$/;"	s
__anon80c56a9c0903	src/imgui/imstb_truetype.h	/^enum { \/\/ platformID$/;"	g
__anon80c56a9c0a03	src/imgui/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_UNICODE$/;"	g
__anon80c56a9c0b03	src/imgui/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MICROSOFT$/;"	g
__anon80c56a9c0c03	src/imgui/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MAC; same as Script Manager codes$/;"	g
__anon80c56a9c0d03	src/imgui/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MICROSOFT; same as LCID...$/;"	g
__anon80c56a9c0e03	src/imgui/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MAC$/;"	g
__anon80c56a9c0f08	src/imgui/imstb_truetype.h	/^{$/;"	s
__anon80c56a9c1008	src/imgui/imstb_truetype.h	/^{$/;"	s
__anon80c56a9c1108	src/imgui/imstb_truetype.h	/^{$/;"	s
__anon80c56a9c1208	src/imgui/imstb_truetype.h	/^{$/;"	s
__anonb965c0a50108	src/imgui/imstb_textedit.h	/^{$/;"	s
__anonb965c0a50208	src/imgui/imstb_textedit.h	/^{$/;"	s
__anonb965c0a50308	src/imgui/imstb_textedit.h	/^{$/;"	s
__anonb965c0a50408	src/imgui/imstb_textedit.h	/^{$/;"	s
__anonb965c0a50508	src/imgui/imstb_textedit.h	/^{$/;"	s
__anond902be230102	src/display.cpp	/^    return std::thread([this](){$/;"	f	function:Display::start	file:
__anonecc473760111	src/imgui/imgui_demo.cpp	/^{$/;"	n	file:
active_head	src/imgui/imstb_rectpack.h	/^   stbrp_node *active_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
additional_cycles	src/m6502.h	/^    u8  additional_cycles;$/;"	m	struct:AddrModeRet	typeref:typename:u8
addr_abs	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_abs(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_abs_X	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_abs_X(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_abs_Y	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_abs_Y(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_acc	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_acc(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_imm	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_imm(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_ind	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_ind(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_ind_X	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_ind_X(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_ind_Y	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_ind_Y(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_mode	src/m6502.h	/^    AddrModeRet (*addr_mode)(Cpu *cpu); \/\/ addressing mode.$/;"	m	struct:Instruction	typeref:typename:AddrModeRet (*)(Cpu * cpu)
addr_rel	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_rel(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_zpg	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_zpg(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_zpg_X	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_zpg_X(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
addr_zpg_Y	src/m6502_addressing_modes.cpp	/^AddrModeRet addr_zpg_Y(Cpu *cpu)$/;"	f	typeref:typename:AddrModeRet
address	src/m6502.h	/^    u16 address;$/;"	m	struct:AddrModeRet	typeref:typename:u16
advance	src/imgui/imstb_truetype.h	/^   int advance;$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
align	src/imgui/imstb_rectpack.h	/^   int align;$/;"	m	struct:stbrp_context	typeref:typename:int
alloc_chunk	src/imgui/imgui_internal.h	/^    T*      alloc_chunk(size_t sz)      { size_t HDR_SZ = 4; sz = IM_MEMALIGN(HDR_SZ + sz, 4u); /;"	f	struct:ImChunkStream	typeref:typename:T *
alloca	src/imgui/imgui_draw.cpp	/^#define alloca /;"	d	file:
append	src/imgui/imgui.cpp	/^void ImGuiTextBuffer::append(const char* str, const char* str_end)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
appendf	src/imgui/imgui.cpp	/^void ImGuiTextBuffer::appendf(const char* fmt, ...)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
appendfv	src/imgui/imgui.cpp	/^void ImGuiTextBuffer::appendfv(const char* fmt, va_list args)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
array_of_unicode_codepoints	src/imgui/imstb_truetype.h	/^   int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode co/;"	m	struct:__anon80c56a9c0508	typeref:typename:int *
attach_imgui_layer	src/display.cpp	/^void Display::attach_imgui_layer(ImguiLayer *imgui_layer)$/;"	f	class:Display	typeref:typename:void
baseline_y_delta	src/imgui/imstb_textedit.h	/^   float baseline_y_delta;  \/\/ position of baseline relative to previous row's baseline$/;"	m	struct:__anonb965c0a50408	typeref:typename:float
begin	src/imgui/imgui_internal.h	/^    T*      begin()                     { size_t HDR_SZ = 4; if (!Buf.Data) return NULL; return /;"	f	struct:ImChunkStream	typeref:typename:T *
begin	src/imgui/imgui_internal.h	/^    inline T*           begin()                     { return Data; }$/;"	f	struct:ImSpan	typeref:typename:T *
begin	src/imgui/imgui_internal.h	/^    inline const T*     begin() const               { return Data; }$/;"	f	struct:ImSpan	typeref:typename:const T *
bottom_y	src/imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon80c56a9c1108	typeref:typename:int
bounds	src/imgui/imstb_truetype.h	/^   int bounds;$/;"	m	struct:__anon80c56a9c0f08	typeref:typename:int
cff	src/imgui/imstb_truetype.h	/^   stbtt__buf cff;                    \/\/ cff font data$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
char_storage	src/imgui/imstb_textedit.h	/^   int                        char_storage;$/;"	m	struct:__anonb965c0a50108	typeref:typename:int
chardata_for_range	src/imgui/imstb_truetype.h	/^   stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anon80c56a9c0508	typeref:typename:stbtt_packedchar *
charstrings	src/imgui/imstb_truetype.h	/^   stbtt__buf charstrings;            \/\/ the charstring index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
chunk_size	src/imgui/imgui_internal.h	/^    int     chunk_size(const T* p)      { return ((const int*)p)[-1]; }$/;"	f	struct:ImChunkStream	typeref:typename:int
clear	src/imgui/imgui_internal.h	/^    void    clear()                     { Buf.clear(); }$/;"	f	struct:ImChunkStream	typeref:typename:void
close_gl	src/glad.cpp	/^void close_gl(void) {$/;"	f	typeref:typename:void	file:
count	src/timer.h	/^    u16 count;               \/\/ the active count value$/;"	m	struct:Timer	typeref:typename:u16
cpu	src/imgui_layer.h	/^    const Cpu &cpu;$/;"	m	class:ImguiLayer	typeref:typename:const Cpu &
cpu	src/timer.h	/^    Cpu &cpu;$/;"	m	struct:Timer	typeref:typename:Cpu &
ctrl_address	src/timer.h	/^    u16 ctrl_address;        \/\/ The control register works like this:$/;"	m	struct:Timer	typeref:typename:u16
cursor	src/imgui/imstb_textedit.h	/^   int cursor;$/;"	m	struct:__anonb965c0a50308	typeref:typename:int
cursor	src/imgui/imstb_truetype.h	/^   int cursor;$/;"	m	struct:__anon80c56a9c0108	typeref:typename:int
cursor_at_end_of_line	src/imgui/imstb_textedit.h	/^   unsigned char cursor_at_end_of_line; \/\/ not implemented yet$/;"	m	struct:__anonb965c0a50308	typeref:typename:unsigned char
cx	src/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon80c56a9c0708	typeref:typename:stbtt_vertex_type
cx1	src/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon80c56a9c0708	typeref:typename:stbtt_vertex_type
cy	src/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon80c56a9c0708	typeref:typename:stbtt_vertex_type
cy1	src/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon80c56a9c0708	typeref:typename:stbtt_vertex_type
data	src/imgui/imstb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo	typeref:typename:unsigned char *
data	src/imgui/imstb_truetype.h	/^   unsigned char *data;$/;"	m	struct:__anon80c56a9c0108	typeref:typename:unsigned char *
data	src/memory.h	/^    u8 *data;$/;"	m	struct:Memory	typeref:typename:u8 *
data_address	src/timer.h	/^    u16 data_address;        \/\/ The data register sets the upper limit$/;"	m	struct:Timer	typeref:typename:u16
data_ptr	src/m6502.h	/^    u8 *data_ptr;$/;"	m	struct:AddrModeRet	typeref:typename:u8 *
delete_length	src/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  delete_length;$/;"	m	struct:__anonb965c0a50108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
direction	src/imgui/imstb_truetype.h	/^   float direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
direction	src/imgui/imstb_truetype.h	/^   int direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
display_height	src/display.cpp	/^unsigned int display_height = 1080;$/;"	v	typeref:typename:unsigned int
display_width	src/display.cpp	/^unsigned int display_width  = 1920;$/;"	v	typeref:typename:unsigned int
diva_error_check	src/util.h	/^#define diva_error_check(/;"	d
draw	src/imgui_layer.cpp	/^void ImguiLayer::draw() const$/;"	f	class:ImguiLayer	typeref:typename:void
dx	src/imgui/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
empty	src/imgui/imgui_internal.h	/^    bool    empty() const               { return Buf.Size == 0; }$/;"	f	struct:ImChunkStream	typeref:typename:bool
end	src/imgui/imgui_internal.h	/^    T*      end()                       { return (T*)(void*)(Buf.Data + Buf.Size); }$/;"	f	struct:ImChunkStream	typeref:typename:T *
end	src/imgui/imgui_internal.h	/^    inline T*           end()                       { return DataEnd; }$/;"	f	struct:ImSpan	typeref:typename:T *
end	src/imgui/imgui_internal.h	/^    inline const T*     end() const                 { return DataEnd; }$/;"	f	struct:ImSpan	typeref:typename:const T *
equal	src/imgui/imstb_truetype.h	/^static int equal(float *a, float *b)$/;"	f	typeref:typename:int
execute	src/m6502.h	/^    u8 execute(Cpu *cpu) $/;"	f	struct:Instruction	typeref:typename:u8
extra	src/imgui/imstb_rectpack.h	/^   stbrp_node extra[2]; \/\/ we allocate two extra nodes so optimal user-node-count is 'width' n/;"	m	struct:stbrp_context	typeref:typename:stbrp_node[2]
exts	src/glad.cpp	/^static const char *exts = NULL;$/;"	v	typeref:typename:const char *	file:
exts_i	src/glad.cpp	/^static char **exts_i = NULL;$/;"	v	typeref:typename:char **	file:
ey	src/imgui/imstb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
f32	src/typedefs.h	/^typedef float    f32;$/;"	t	typeref:typename:float
f64	src/typedefs.h	/^typedef double   f64;$/;"	t	typeref:typename:double
fdselect	src/imgui/imstb_truetype.h	/^   stbtt__buf fdselect;               \/\/ map from glyph to fontdict$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fdx	src/imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fdy	src/imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fetch_execute_next	src/m6502.cpp	/^u8 Cpu::fetch_execute_next() $/;"	f	class:Cpu	typeref:typename:u8
find_coreGL	src/glad.cpp	/^static void find_coreGL(void) {$/;"	f	typeref:typename:void	file:
find_extensionsGL	src/glad.cpp	/^static int find_extensionsGL(void) {$/;"	f	typeref:typename:int	file:
first_char	src/imgui/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anonb965c0a50508	typeref:typename:int
first_free	src/imgui/imstb_truetype.h	/^   void   *first_free;$/;"	m	struct:stbtt__hheap	typeref:typename:void *
first_unicode_codepoint_in_range	src/imgui/imstb_truetype.h	/^   int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and t/;"	m	struct:__anon80c56a9c0508	typeref:typename:int
first_x	src/imgui/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon80c56a9c0f08	typeref:typename:float
first_y	src/imgui/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon80c56a9c0f08	typeref:typename:float
font_size	src/imgui/imstb_truetype.h	/^   float font_size;$/;"	m	struct:__anon80c56a9c0508	typeref:typename:float
fontdicts	src/imgui/imstb_truetype.h	/^   stbtt__buf fontdicts;              \/\/ array of font dicts$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fontstart	src/imgui/imstb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
framebuffer_gen_frag_shader_source	src/display.h	/^    const char *framebuffer_gen_frag_shader_source =$/;"	m	class:Display	typeref:typename:const char *
framebuffer_gen_program	src/display.h	/^    unsigned int framebuffer_gen_program;$/;"	m	class:Display	typeref:typename:unsigned int
framebuffer_size_callback	src/display.cpp	/^void framebuffer_size_callback(GLFWwindow* window, int width, int height)$/;"	f	typeref:typename:void
framebuffer_tex_native	src/display.h	/^    unsigned int framebuffer_tex_native;$/;"	m	class:Display	typeref:typename:unsigned int
framebuffer_tex_ntsc_active	src/display.h	/^    unsigned int framebuffer_tex_ntsc_active;$/;"	m	class:Display	typeref:typename:unsigned int
framebuffer_tex_ntsc_swap	src/display.h	/^    unsigned int framebuffer_tex_ntsc_swap;$/;"	m	class:Display	typeref:typename:unsigned int
free_exts	src/glad.cpp	/^static void free_exts(void) {$/;"	f	typeref:typename:void	file:
free_head	src/imgui/imstb_rectpack.h	/^   stbrp_node *free_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
full_screen_tri_vbo	src/display.h	/^    unsigned int full_screen_tri_vbo; $/;"	m	class:Display	typeref:typename:unsigned int
funcs	src/imgui/imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	s	function:ShowDemoWindowMisc	file:
fx	src/imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
generic_branch	src/m6502_instructions.cpp	/^u8 generic_branch(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu), u8 bit, bool value)$/;"	f	typeref:typename:u8
generic_compare	src/m6502_instructions.cpp	/^u8 generic_compare(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu), u8 register_value)$/;"	f	typeref:typename:u8
get_exts	src/glad.cpp	/^static int get_exts(void) {$/;"	f	typeref:typename:int	file:
get_proc	src/glad.cpp	/^void* get_proc(const char *namez) {$/;"	f	typeref:typename:void *	file:
get_status_bit	src/m6502_instructions.cpp	/^u8 get_status_bit(Cpu *cpu, u8 bit_pos) $/;"	f	typeref:typename:u8
glBindVertexArray	src/imgui/imgui_impl_opengl3.cpp	/^#define glBindVertexArray /;"	d	file:
glCheckError	src/util.h	/^#define glCheckError(/;"	d
glCheckError_	src/util.h	/^GLenum glCheckError_(const char *file, int line)$/;"	f	typeref:typename:GLenum
glDeleteVertexArrays	src/imgui/imgui_impl_opengl3.cpp	/^#define glDeleteVertexArrays /;"	d	file:
glGenVertexArrays	src/imgui/imgui_impl_opengl3.cpp	/^#define glGenVertexArrays /;"	d	file:
gladGetProcAddressPtr	src/glad.cpp	/^static PFNGLXGETPROCADDRESSPROC_PRIVATE gladGetProcAddressPtr;$/;"	v	typeref:typename:PFNGLXGETPROCADDRESSPROC_PRIVATE	file:
gladGetProcAddressPtr	src/glad.cpp	/^static PFNWGLGETPROCADDRESSPROC_PRIVATE gladGetProcAddressPtr;$/;"	v	typeref:typename:PFNWGLGETPROCADDRESSPROC_PRIVATE	file:
gladLoadGL	src/glad.cpp	/^int gladLoadGL(void) {$/;"	f	typeref:typename:int
gladLoadGLLoader	src/glad.cpp	/^int gladLoadGLLoader(GLADloadproc load) {$/;"	f	typeref:typename:int
glad_glActiveShaderProgram	src/glad.cpp	/^PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram = NULL;$/;"	v	typeref:typename:PFNGLACTIVESHADERPROGRAMPROC
glad_glActiveTexture	src/glad.cpp	/^PFNGLACTIVETEXTUREPROC glad_glActiveTexture = NULL;$/;"	v	typeref:typename:PFNGLACTIVETEXTUREPROC
glad_glAttachShader	src/glad.cpp	/^PFNGLATTACHSHADERPROC glad_glAttachShader = NULL;$/;"	v	typeref:typename:PFNGLATTACHSHADERPROC
glad_glBeginConditionalRender	src/glad.cpp	/^PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender = NULL;$/;"	v	typeref:typename:PFNGLBEGINCONDITIONALRENDERPROC
glad_glBeginQuery	src/glad.cpp	/^PFNGLBEGINQUERYPROC glad_glBeginQuery = NULL;$/;"	v	typeref:typename:PFNGLBEGINQUERYPROC
glad_glBeginQueryIndexed	src/glad.cpp	/^PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed = NULL;$/;"	v	typeref:typename:PFNGLBEGINQUERYINDEXEDPROC
glad_glBeginTransformFeedback	src/glad.cpp	/^PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback = NULL;$/;"	v	typeref:typename:PFNGLBEGINTRANSFORMFEEDBACKPROC
glad_glBindAttribLocation	src/glad.cpp	/^PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation = NULL;$/;"	v	typeref:typename:PFNGLBINDATTRIBLOCATIONPROC
glad_glBindBuffer	src/glad.cpp	/^PFNGLBINDBUFFERPROC glad_glBindBuffer = NULL;$/;"	v	typeref:typename:PFNGLBINDBUFFERPROC
glad_glBindBufferBase	src/glad.cpp	/^PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase = NULL;$/;"	v	typeref:typename:PFNGLBINDBUFFERBASEPROC
glad_glBindBufferRange	src/glad.cpp	/^PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange = NULL;$/;"	v	typeref:typename:PFNGLBINDBUFFERRANGEPROC
glad_glBindBuffersBase	src/glad.cpp	/^PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase = NULL;$/;"	v	typeref:typename:PFNGLBINDBUFFERSBASEPROC
glad_glBindBuffersRange	src/glad.cpp	/^PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange = NULL;$/;"	v	typeref:typename:PFNGLBINDBUFFERSRANGEPROC
glad_glBindFragDataLocation	src/glad.cpp	/^PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation = NULL;$/;"	v	typeref:typename:PFNGLBINDFRAGDATALOCATIONPROC
glad_glBindFragDataLocationIndexed	src/glad.cpp	/^PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed = NULL;$/;"	v	typeref:typename:PFNGLBINDFRAGDATALOCATIONINDEXEDPROC
glad_glBindFramebuffer	src/glad.cpp	/^PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer = NULL;$/;"	v	typeref:typename:PFNGLBINDFRAMEBUFFERPROC
glad_glBindImageTexture	src/glad.cpp	/^PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture = NULL;$/;"	v	typeref:typename:PFNGLBINDIMAGETEXTUREPROC
glad_glBindImageTextures	src/glad.cpp	/^PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures = NULL;$/;"	v	typeref:typename:PFNGLBINDIMAGETEXTURESPROC
glad_glBindProgramPipeline	src/glad.cpp	/^PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline = NULL;$/;"	v	typeref:typename:PFNGLBINDPROGRAMPIPELINEPROC
glad_glBindRenderbuffer	src/glad.cpp	/^PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer = NULL;$/;"	v	typeref:typename:PFNGLBINDRENDERBUFFERPROC
glad_glBindSampler	src/glad.cpp	/^PFNGLBINDSAMPLERPROC glad_glBindSampler = NULL;$/;"	v	typeref:typename:PFNGLBINDSAMPLERPROC
glad_glBindSamplers	src/glad.cpp	/^PFNGLBINDSAMPLERSPROC glad_glBindSamplers = NULL;$/;"	v	typeref:typename:PFNGLBINDSAMPLERSPROC
glad_glBindTexture	src/glad.cpp	/^PFNGLBINDTEXTUREPROC glad_glBindTexture = NULL;$/;"	v	typeref:typename:PFNGLBINDTEXTUREPROC
glad_glBindTextureUnit	src/glad.cpp	/^PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit = NULL;$/;"	v	typeref:typename:PFNGLBINDTEXTUREUNITPROC
glad_glBindTextures	src/glad.cpp	/^PFNGLBINDTEXTURESPROC glad_glBindTextures = NULL;$/;"	v	typeref:typename:PFNGLBINDTEXTURESPROC
glad_glBindTransformFeedback	src/glad.cpp	/^PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback = NULL;$/;"	v	typeref:typename:PFNGLBINDTRANSFORMFEEDBACKPROC
glad_glBindVertexArray	src/glad.cpp	/^PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray = NULL;$/;"	v	typeref:typename:PFNGLBINDVERTEXARRAYPROC
glad_glBindVertexBuffer	src/glad.cpp	/^PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer = NULL;$/;"	v	typeref:typename:PFNGLBINDVERTEXBUFFERPROC
glad_glBindVertexBuffers	src/glad.cpp	/^PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers = NULL;$/;"	v	typeref:typename:PFNGLBINDVERTEXBUFFERSPROC
glad_glBlendColor	src/glad.cpp	/^PFNGLBLENDCOLORPROC glad_glBlendColor = NULL;$/;"	v	typeref:typename:PFNGLBLENDCOLORPROC
glad_glBlendEquation	src/glad.cpp	/^PFNGLBLENDEQUATIONPROC glad_glBlendEquation = NULL;$/;"	v	typeref:typename:PFNGLBLENDEQUATIONPROC
glad_glBlendEquationSeparate	src/glad.cpp	/^PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate = NULL;$/;"	v	typeref:typename:PFNGLBLENDEQUATIONSEPARATEPROC
glad_glBlendEquationSeparatei	src/glad.cpp	/^PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei = NULL;$/;"	v	typeref:typename:PFNGLBLENDEQUATIONSEPARATEIPROC
glad_glBlendEquationi	src/glad.cpp	/^PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi = NULL;$/;"	v	typeref:typename:PFNGLBLENDEQUATIONIPROC
glad_glBlendFunc	src/glad.cpp	/^PFNGLBLENDFUNCPROC glad_glBlendFunc = NULL;$/;"	v	typeref:typename:PFNGLBLENDFUNCPROC
glad_glBlendFuncSeparate	src/glad.cpp	/^PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate = NULL;$/;"	v	typeref:typename:PFNGLBLENDFUNCSEPARATEPROC
glad_glBlendFuncSeparatei	src/glad.cpp	/^PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei = NULL;$/;"	v	typeref:typename:PFNGLBLENDFUNCSEPARATEIPROC
glad_glBlendFunci	src/glad.cpp	/^PFNGLBLENDFUNCIPROC glad_glBlendFunci = NULL;$/;"	v	typeref:typename:PFNGLBLENDFUNCIPROC
glad_glBlitFramebuffer	src/glad.cpp	/^PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer = NULL;$/;"	v	typeref:typename:PFNGLBLITFRAMEBUFFERPROC
glad_glBlitNamedFramebuffer	src/glad.cpp	/^PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer = NULL;$/;"	v	typeref:typename:PFNGLBLITNAMEDFRAMEBUFFERPROC
glad_glBufferData	src/glad.cpp	/^PFNGLBUFFERDATAPROC glad_glBufferData = NULL;$/;"	v	typeref:typename:PFNGLBUFFERDATAPROC
glad_glBufferStorage	src/glad.cpp	/^PFNGLBUFFERSTORAGEPROC glad_glBufferStorage = NULL;$/;"	v	typeref:typename:PFNGLBUFFERSTORAGEPROC
glad_glBufferSubData	src/glad.cpp	/^PFNGLBUFFERSUBDATAPROC glad_glBufferSubData = NULL;$/;"	v	typeref:typename:PFNGLBUFFERSUBDATAPROC
glad_glCheckFramebufferStatus	src/glad.cpp	/^PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus = NULL;$/;"	v	typeref:typename:PFNGLCHECKFRAMEBUFFERSTATUSPROC
glad_glCheckNamedFramebufferStatus	src/glad.cpp	/^PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus = NULL;$/;"	v	typeref:typename:PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC
glad_glClampColor	src/glad.cpp	/^PFNGLCLAMPCOLORPROC glad_glClampColor = NULL;$/;"	v	typeref:typename:PFNGLCLAMPCOLORPROC
glad_glClear	src/glad.cpp	/^PFNGLCLEARPROC glad_glClear = NULL;$/;"	v	typeref:typename:PFNGLCLEARPROC
glad_glClearBufferData	src/glad.cpp	/^PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData = NULL;$/;"	v	typeref:typename:PFNGLCLEARBUFFERDATAPROC
glad_glClearBufferSubData	src/glad.cpp	/^PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData = NULL;$/;"	v	typeref:typename:PFNGLCLEARBUFFERSUBDATAPROC
glad_glClearBufferfi	src/glad.cpp	/^PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi = NULL;$/;"	v	typeref:typename:PFNGLCLEARBUFFERFIPROC
glad_glClearBufferfv	src/glad.cpp	/^PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv = NULL;$/;"	v	typeref:typename:PFNGLCLEARBUFFERFVPROC
glad_glClearBufferiv	src/glad.cpp	/^PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv = NULL;$/;"	v	typeref:typename:PFNGLCLEARBUFFERIVPROC
glad_glClearBufferuiv	src/glad.cpp	/^PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv = NULL;$/;"	v	typeref:typename:PFNGLCLEARBUFFERUIVPROC
glad_glClearColor	src/glad.cpp	/^PFNGLCLEARCOLORPROC glad_glClearColor = NULL;$/;"	v	typeref:typename:PFNGLCLEARCOLORPROC
glad_glClearDepth	src/glad.cpp	/^PFNGLCLEARDEPTHPROC glad_glClearDepth = NULL;$/;"	v	typeref:typename:PFNGLCLEARDEPTHPROC
glad_glClearDepthf	src/glad.cpp	/^PFNGLCLEARDEPTHFPROC glad_glClearDepthf = NULL;$/;"	v	typeref:typename:PFNGLCLEARDEPTHFPROC
glad_glClearNamedBufferData	src/glad.cpp	/^PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData = NULL;$/;"	v	typeref:typename:PFNGLCLEARNAMEDBUFFERDATAPROC
glad_glClearNamedBufferSubData	src/glad.cpp	/^PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData = NULL;$/;"	v	typeref:typename:PFNGLCLEARNAMEDBUFFERSUBDATAPROC
glad_glClearNamedFramebufferfi	src/glad.cpp	/^PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi = NULL;$/;"	v	typeref:typename:PFNGLCLEARNAMEDFRAMEBUFFERFIPROC
glad_glClearNamedFramebufferfv	src/glad.cpp	/^PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv = NULL;$/;"	v	typeref:typename:PFNGLCLEARNAMEDFRAMEBUFFERFVPROC
glad_glClearNamedFramebufferiv	src/glad.cpp	/^PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv = NULL;$/;"	v	typeref:typename:PFNGLCLEARNAMEDFRAMEBUFFERIVPROC
glad_glClearNamedFramebufferuiv	src/glad.cpp	/^PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv = NULL;$/;"	v	typeref:typename:PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC
glad_glClearStencil	src/glad.cpp	/^PFNGLCLEARSTENCILPROC glad_glClearStencil = NULL;$/;"	v	typeref:typename:PFNGLCLEARSTENCILPROC
glad_glClearTexImage	src/glad.cpp	/^PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage = NULL;$/;"	v	typeref:typename:PFNGLCLEARTEXIMAGEPROC
glad_glClearTexSubImage	src/glad.cpp	/^PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage = NULL;$/;"	v	typeref:typename:PFNGLCLEARTEXSUBIMAGEPROC
glad_glClientWaitSync	src/glad.cpp	/^PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync = NULL;$/;"	v	typeref:typename:PFNGLCLIENTWAITSYNCPROC
glad_glClipControl	src/glad.cpp	/^PFNGLCLIPCONTROLPROC glad_glClipControl = NULL;$/;"	v	typeref:typename:PFNGLCLIPCONTROLPROC
glad_glColorMask	src/glad.cpp	/^PFNGLCOLORMASKPROC glad_glColorMask = NULL;$/;"	v	typeref:typename:PFNGLCOLORMASKPROC
glad_glColorMaski	src/glad.cpp	/^PFNGLCOLORMASKIPROC glad_glColorMaski = NULL;$/;"	v	typeref:typename:PFNGLCOLORMASKIPROC
glad_glColorP3ui	src/glad.cpp	/^PFNGLCOLORP3UIPROC glad_glColorP3ui = NULL;$/;"	v	typeref:typename:PFNGLCOLORP3UIPROC
glad_glColorP3uiv	src/glad.cpp	/^PFNGLCOLORP3UIVPROC glad_glColorP3uiv = NULL;$/;"	v	typeref:typename:PFNGLCOLORP3UIVPROC
glad_glColorP4ui	src/glad.cpp	/^PFNGLCOLORP4UIPROC glad_glColorP4ui = NULL;$/;"	v	typeref:typename:PFNGLCOLORP4UIPROC
glad_glColorP4uiv	src/glad.cpp	/^PFNGLCOLORP4UIVPROC glad_glColorP4uiv = NULL;$/;"	v	typeref:typename:PFNGLCOLORP4UIVPROC
glad_glCompileShader	src/glad.cpp	/^PFNGLCOMPILESHADERPROC glad_glCompileShader = NULL;$/;"	v	typeref:typename:PFNGLCOMPILESHADERPROC
glad_glCompressedTexImage1D	src/glad.cpp	/^PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXIMAGE1DPROC
glad_glCompressedTexImage2D	src/glad.cpp	/^PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXIMAGE2DPROC
glad_glCompressedTexImage3D	src/glad.cpp	/^PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXIMAGE3DPROC
glad_glCompressedTexSubImage1D	src/glad.cpp	/^PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
glad_glCompressedTexSubImage2D	src/glad.cpp	/^PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
glad_glCompressedTexSubImage3D	src/glad.cpp	/^PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
glad_glCompressedTextureSubImage1D	src/glad.cpp	/^PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC
glad_glCompressedTextureSubImage2D	src/glad.cpp	/^PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC
glad_glCompressedTextureSubImage3D	src/glad.cpp	/^PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D = NULL;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC
glad_glCopyBufferSubData	src/glad.cpp	/^PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData = NULL;$/;"	v	typeref:typename:PFNGLCOPYBUFFERSUBDATAPROC
glad_glCopyImageSubData	src/glad.cpp	/^PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData = NULL;$/;"	v	typeref:typename:PFNGLCOPYIMAGESUBDATAPROC
glad_glCopyNamedBufferSubData	src/glad.cpp	/^PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData = NULL;$/;"	v	typeref:typename:PFNGLCOPYNAMEDBUFFERSUBDATAPROC
glad_glCopyTexImage1D	src/glad.cpp	/^PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D = NULL;$/;"	v	typeref:typename:PFNGLCOPYTEXIMAGE1DPROC
glad_glCopyTexImage2D	src/glad.cpp	/^PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D = NULL;$/;"	v	typeref:typename:PFNGLCOPYTEXIMAGE2DPROC
glad_glCopyTexSubImage1D	src/glad.cpp	/^PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D = NULL;$/;"	v	typeref:typename:PFNGLCOPYTEXSUBIMAGE1DPROC
glad_glCopyTexSubImage2D	src/glad.cpp	/^PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D = NULL;$/;"	v	typeref:typename:PFNGLCOPYTEXSUBIMAGE2DPROC
glad_glCopyTexSubImage3D	src/glad.cpp	/^PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D = NULL;$/;"	v	typeref:typename:PFNGLCOPYTEXSUBIMAGE3DPROC
glad_glCopyTextureSubImage1D	src/glad.cpp	/^PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D = NULL;$/;"	v	typeref:typename:PFNGLCOPYTEXTURESUBIMAGE1DPROC
glad_glCopyTextureSubImage2D	src/glad.cpp	/^PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_glCopyTextureSubImage2D = NULL;$/;"	v	typeref:typename:PFNGLCOPYTEXTURESUBIMAGE2DPROC
glad_glCopyTextureSubImage3D	src/glad.cpp	/^PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_glCopyTextureSubImage3D = NULL;$/;"	v	typeref:typename:PFNGLCOPYTEXTURESUBIMAGE3DPROC
glad_glCreateBuffers	src/glad.cpp	/^PFNGLCREATEBUFFERSPROC glad_glCreateBuffers = NULL;$/;"	v	typeref:typename:PFNGLCREATEBUFFERSPROC
glad_glCreateFramebuffers	src/glad.cpp	/^PFNGLCREATEFRAMEBUFFERSPROC glad_glCreateFramebuffers = NULL;$/;"	v	typeref:typename:PFNGLCREATEFRAMEBUFFERSPROC
glad_glCreateProgram	src/glad.cpp	/^PFNGLCREATEPROGRAMPROC glad_glCreateProgram = NULL;$/;"	v	typeref:typename:PFNGLCREATEPROGRAMPROC
glad_glCreateProgramPipelines	src/glad.cpp	/^PFNGLCREATEPROGRAMPIPELINESPROC glad_glCreateProgramPipelines = NULL;$/;"	v	typeref:typename:PFNGLCREATEPROGRAMPIPELINESPROC
glad_glCreateQueries	src/glad.cpp	/^PFNGLCREATEQUERIESPROC glad_glCreateQueries = NULL;$/;"	v	typeref:typename:PFNGLCREATEQUERIESPROC
glad_glCreateRenderbuffers	src/glad.cpp	/^PFNGLCREATERENDERBUFFERSPROC glad_glCreateRenderbuffers = NULL;$/;"	v	typeref:typename:PFNGLCREATERENDERBUFFERSPROC
glad_glCreateSamplers	src/glad.cpp	/^PFNGLCREATESAMPLERSPROC glad_glCreateSamplers = NULL;$/;"	v	typeref:typename:PFNGLCREATESAMPLERSPROC
glad_glCreateShader	src/glad.cpp	/^PFNGLCREATESHADERPROC glad_glCreateShader = NULL;$/;"	v	typeref:typename:PFNGLCREATESHADERPROC
glad_glCreateShaderProgramv	src/glad.cpp	/^PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv = NULL;$/;"	v	typeref:typename:PFNGLCREATESHADERPROGRAMVPROC
glad_glCreateTextures	src/glad.cpp	/^PFNGLCREATETEXTURESPROC glad_glCreateTextures = NULL;$/;"	v	typeref:typename:PFNGLCREATETEXTURESPROC
glad_glCreateTransformFeedbacks	src/glad.cpp	/^PFNGLCREATETRANSFORMFEEDBACKSPROC glad_glCreateTransformFeedbacks = NULL;$/;"	v	typeref:typename:PFNGLCREATETRANSFORMFEEDBACKSPROC
glad_glCreateVertexArrays	src/glad.cpp	/^PFNGLCREATEVERTEXARRAYSPROC glad_glCreateVertexArrays = NULL;$/;"	v	typeref:typename:PFNGLCREATEVERTEXARRAYSPROC
glad_glCullFace	src/glad.cpp	/^PFNGLCULLFACEPROC glad_glCullFace = NULL;$/;"	v	typeref:typename:PFNGLCULLFACEPROC
glad_glDebugMessageCallback	src/glad.cpp	/^PFNGLDEBUGMESSAGECALLBACKPROC glad_glDebugMessageCallback = NULL;$/;"	v	typeref:typename:PFNGLDEBUGMESSAGECALLBACKPROC
glad_glDebugMessageControl	src/glad.cpp	/^PFNGLDEBUGMESSAGECONTROLPROC glad_glDebugMessageControl = NULL;$/;"	v	typeref:typename:PFNGLDEBUGMESSAGECONTROLPROC
glad_glDebugMessageInsert	src/glad.cpp	/^PFNGLDEBUGMESSAGEINSERTPROC glad_glDebugMessageInsert = NULL;$/;"	v	typeref:typename:PFNGLDEBUGMESSAGEINSERTPROC
glad_glDeleteBuffers	src/glad.cpp	/^PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers = NULL;$/;"	v	typeref:typename:PFNGLDELETEBUFFERSPROC
glad_glDeleteFramebuffers	src/glad.cpp	/^PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers = NULL;$/;"	v	typeref:typename:PFNGLDELETEFRAMEBUFFERSPROC
glad_glDeleteProgram	src/glad.cpp	/^PFNGLDELETEPROGRAMPROC glad_glDeleteProgram = NULL;$/;"	v	typeref:typename:PFNGLDELETEPROGRAMPROC
glad_glDeleteProgramPipelines	src/glad.cpp	/^PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines = NULL;$/;"	v	typeref:typename:PFNGLDELETEPROGRAMPIPELINESPROC
glad_glDeleteQueries	src/glad.cpp	/^PFNGLDELETEQUERIESPROC glad_glDeleteQueries = NULL;$/;"	v	typeref:typename:PFNGLDELETEQUERIESPROC
glad_glDeleteRenderbuffers	src/glad.cpp	/^PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers = NULL;$/;"	v	typeref:typename:PFNGLDELETERENDERBUFFERSPROC
glad_glDeleteSamplers	src/glad.cpp	/^PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers = NULL;$/;"	v	typeref:typename:PFNGLDELETESAMPLERSPROC
glad_glDeleteShader	src/glad.cpp	/^PFNGLDELETESHADERPROC glad_glDeleteShader = NULL;$/;"	v	typeref:typename:PFNGLDELETESHADERPROC
glad_glDeleteSync	src/glad.cpp	/^PFNGLDELETESYNCPROC glad_glDeleteSync = NULL;$/;"	v	typeref:typename:PFNGLDELETESYNCPROC
glad_glDeleteTextures	src/glad.cpp	/^PFNGLDELETETEXTURESPROC glad_glDeleteTextures = NULL;$/;"	v	typeref:typename:PFNGLDELETETEXTURESPROC
glad_glDeleteTransformFeedbacks	src/glad.cpp	/^PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks = NULL;$/;"	v	typeref:typename:PFNGLDELETETRANSFORMFEEDBACKSPROC
glad_glDeleteVertexArrays	src/glad.cpp	/^PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays = NULL;$/;"	v	typeref:typename:PFNGLDELETEVERTEXARRAYSPROC
glad_glDepthFunc	src/glad.cpp	/^PFNGLDEPTHFUNCPROC glad_glDepthFunc = NULL;$/;"	v	typeref:typename:PFNGLDEPTHFUNCPROC
glad_glDepthMask	src/glad.cpp	/^PFNGLDEPTHMASKPROC glad_glDepthMask = NULL;$/;"	v	typeref:typename:PFNGLDEPTHMASKPROC
glad_glDepthRange	src/glad.cpp	/^PFNGLDEPTHRANGEPROC glad_glDepthRange = NULL;$/;"	v	typeref:typename:PFNGLDEPTHRANGEPROC
glad_glDepthRangeArrayv	src/glad.cpp	/^PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv = NULL;$/;"	v	typeref:typename:PFNGLDEPTHRANGEARRAYVPROC
glad_glDepthRangeIndexed	src/glad.cpp	/^PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed = NULL;$/;"	v	typeref:typename:PFNGLDEPTHRANGEINDEXEDPROC
glad_glDepthRangef	src/glad.cpp	/^PFNGLDEPTHRANGEFPROC glad_glDepthRangef = NULL;$/;"	v	typeref:typename:PFNGLDEPTHRANGEFPROC
glad_glDetachShader	src/glad.cpp	/^PFNGLDETACHSHADERPROC glad_glDetachShader = NULL;$/;"	v	typeref:typename:PFNGLDETACHSHADERPROC
glad_glDisable	src/glad.cpp	/^PFNGLDISABLEPROC glad_glDisable = NULL;$/;"	v	typeref:typename:PFNGLDISABLEPROC
glad_glDisableVertexArrayAttrib	src/glad.cpp	/^PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_glDisableVertexArrayAttrib = NULL;$/;"	v	typeref:typename:PFNGLDISABLEVERTEXARRAYATTRIBPROC
glad_glDisableVertexAttribArray	src/glad.cpp	/^PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray = NULL;$/;"	v	typeref:typename:PFNGLDISABLEVERTEXATTRIBARRAYPROC
glad_glDisablei	src/glad.cpp	/^PFNGLDISABLEIPROC glad_glDisablei = NULL;$/;"	v	typeref:typename:PFNGLDISABLEIPROC
glad_glDispatchCompute	src/glad.cpp	/^PFNGLDISPATCHCOMPUTEPROC glad_glDispatchCompute = NULL;$/;"	v	typeref:typename:PFNGLDISPATCHCOMPUTEPROC
glad_glDispatchComputeIndirect	src/glad.cpp	/^PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_glDispatchComputeIndirect = NULL;$/;"	v	typeref:typename:PFNGLDISPATCHCOMPUTEINDIRECTPROC
glad_glDrawArrays	src/glad.cpp	/^PFNGLDRAWARRAYSPROC glad_glDrawArrays = NULL;$/;"	v	typeref:typename:PFNGLDRAWARRAYSPROC
glad_glDrawArraysIndirect	src/glad.cpp	/^PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect = NULL;$/;"	v	typeref:typename:PFNGLDRAWARRAYSINDIRECTPROC
glad_glDrawArraysInstanced	src/glad.cpp	/^PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced = NULL;$/;"	v	typeref:typename:PFNGLDRAWARRAYSINSTANCEDPROC
glad_glDrawArraysInstancedBaseInstance	src/glad.cpp	/^PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_glDrawArraysInstancedBaseInstance = NULL;$/;"	v	typeref:typename:PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
glad_glDrawBuffer	src/glad.cpp	/^PFNGLDRAWBUFFERPROC glad_glDrawBuffer = NULL;$/;"	v	typeref:typename:PFNGLDRAWBUFFERPROC
glad_glDrawBuffers	src/glad.cpp	/^PFNGLDRAWBUFFERSPROC glad_glDrawBuffers = NULL;$/;"	v	typeref:typename:PFNGLDRAWBUFFERSPROC
glad_glDrawElements	src/glad.cpp	/^PFNGLDRAWELEMENTSPROC glad_glDrawElements = NULL;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSPROC
glad_glDrawElementsBaseVertex	src/glad.cpp	/^PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex = NULL;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSBASEVERTEXPROC
glad_glDrawElementsIndirect	src/glad.cpp	/^PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect = NULL;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSINDIRECTPROC
glad_glDrawElementsInstanced	src/glad.cpp	/^PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced = NULL;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSINSTANCEDPROC
glad_glDrawElementsInstancedBaseInstance	src/glad.cpp	/^PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_glDrawElementsInstancedBaseInstance = NULL;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
glad_glDrawElementsInstancedBaseVertex	src/glad.cpp	/^PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex = NULL;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
glad_glDrawElementsInstancedBaseVertexBaseInstance	src/glad.cpp	/^PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_glDrawElementsInstancedBaseVertexBaseI/;"	v	typeref:typename:PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
glad_glDrawRangeElements	src/glad.cpp	/^PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements = NULL;$/;"	v	typeref:typename:PFNGLDRAWRANGEELEMENTSPROC
glad_glDrawRangeElementsBaseVertex	src/glad.cpp	/^PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex = NULL;$/;"	v	typeref:typename:PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
glad_glDrawTransformFeedback	src/glad.cpp	/^PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback = NULL;$/;"	v	typeref:typename:PFNGLDRAWTRANSFORMFEEDBACKPROC
glad_glDrawTransformFeedbackInstanced	src/glad.cpp	/^PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_glDrawTransformFeedbackInstanced = NULL;$/;"	v	typeref:typename:PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
glad_glDrawTransformFeedbackStream	src/glad.cpp	/^PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream = NULL;$/;"	v	typeref:typename:PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
glad_glDrawTransformFeedbackStreamInstanced	src/glad.cpp	/^PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_glDrawTransformFeedbackStreamInstanced = NULL/;"	v	typeref:typename:PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
glad_glEnable	src/glad.cpp	/^PFNGLENABLEPROC glad_glEnable = NULL;$/;"	v	typeref:typename:PFNGLENABLEPROC
glad_glEnableVertexArrayAttrib	src/glad.cpp	/^PFNGLENABLEVERTEXARRAYATTRIBPROC glad_glEnableVertexArrayAttrib = NULL;$/;"	v	typeref:typename:PFNGLENABLEVERTEXARRAYATTRIBPROC
glad_glEnableVertexAttribArray	src/glad.cpp	/^PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray = NULL;$/;"	v	typeref:typename:PFNGLENABLEVERTEXATTRIBARRAYPROC
glad_glEnablei	src/glad.cpp	/^PFNGLENABLEIPROC glad_glEnablei = NULL;$/;"	v	typeref:typename:PFNGLENABLEIPROC
glad_glEndConditionalRender	src/glad.cpp	/^PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender = NULL;$/;"	v	typeref:typename:PFNGLENDCONDITIONALRENDERPROC
glad_glEndQuery	src/glad.cpp	/^PFNGLENDQUERYPROC glad_glEndQuery = NULL;$/;"	v	typeref:typename:PFNGLENDQUERYPROC
glad_glEndQueryIndexed	src/glad.cpp	/^PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed = NULL;$/;"	v	typeref:typename:PFNGLENDQUERYINDEXEDPROC
glad_glEndTransformFeedback	src/glad.cpp	/^PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback = NULL;$/;"	v	typeref:typename:PFNGLENDTRANSFORMFEEDBACKPROC
glad_glFenceSync	src/glad.cpp	/^PFNGLFENCESYNCPROC glad_glFenceSync = NULL;$/;"	v	typeref:typename:PFNGLFENCESYNCPROC
glad_glFinish	src/glad.cpp	/^PFNGLFINISHPROC glad_glFinish = NULL;$/;"	v	typeref:typename:PFNGLFINISHPROC
glad_glFlush	src/glad.cpp	/^PFNGLFLUSHPROC glad_glFlush = NULL;$/;"	v	typeref:typename:PFNGLFLUSHPROC
glad_glFlushMappedBufferRange	src/glad.cpp	/^PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange = NULL;$/;"	v	typeref:typename:PFNGLFLUSHMAPPEDBUFFERRANGEPROC
glad_glFlushMappedNamedBufferRange	src/glad.cpp	/^PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_glFlushMappedNamedBufferRange = NULL;$/;"	v	typeref:typename:PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC
glad_glFramebufferParameteri	src/glad.cpp	/^PFNGLFRAMEBUFFERPARAMETERIPROC glad_glFramebufferParameteri = NULL;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERPARAMETERIPROC
glad_glFramebufferRenderbuffer	src/glad.cpp	/^PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer = NULL;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERRENDERBUFFERPROC
glad_glFramebufferTexture	src/glad.cpp	/^PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture = NULL;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTUREPROC
glad_glFramebufferTexture1D	src/glad.cpp	/^PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D = NULL;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTURE1DPROC
glad_glFramebufferTexture2D	src/glad.cpp	/^PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D = NULL;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTURE2DPROC
glad_glFramebufferTexture3D	src/glad.cpp	/^PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D = NULL;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTURE3DPROC
glad_glFramebufferTextureLayer	src/glad.cpp	/^PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer = NULL;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTURELAYERPROC
glad_glFrontFace	src/glad.cpp	/^PFNGLFRONTFACEPROC glad_glFrontFace = NULL;$/;"	v	typeref:typename:PFNGLFRONTFACEPROC
glad_glGenBuffers	src/glad.cpp	/^PFNGLGENBUFFERSPROC glad_glGenBuffers = NULL;$/;"	v	typeref:typename:PFNGLGENBUFFERSPROC
glad_glGenFramebuffers	src/glad.cpp	/^PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers = NULL;$/;"	v	typeref:typename:PFNGLGENFRAMEBUFFERSPROC
glad_glGenProgramPipelines	src/glad.cpp	/^PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines = NULL;$/;"	v	typeref:typename:PFNGLGENPROGRAMPIPELINESPROC
glad_glGenQueries	src/glad.cpp	/^PFNGLGENQUERIESPROC glad_glGenQueries = NULL;$/;"	v	typeref:typename:PFNGLGENQUERIESPROC
glad_glGenRenderbuffers	src/glad.cpp	/^PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers = NULL;$/;"	v	typeref:typename:PFNGLGENRENDERBUFFERSPROC
glad_glGenSamplers	src/glad.cpp	/^PFNGLGENSAMPLERSPROC glad_glGenSamplers = NULL;$/;"	v	typeref:typename:PFNGLGENSAMPLERSPROC
glad_glGenTextures	src/glad.cpp	/^PFNGLGENTEXTURESPROC glad_glGenTextures = NULL;$/;"	v	typeref:typename:PFNGLGENTEXTURESPROC
glad_glGenTransformFeedbacks	src/glad.cpp	/^PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks = NULL;$/;"	v	typeref:typename:PFNGLGENTRANSFORMFEEDBACKSPROC
glad_glGenVertexArrays	src/glad.cpp	/^PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays = NULL;$/;"	v	typeref:typename:PFNGLGENVERTEXARRAYSPROC
glad_glGenerateMipmap	src/glad.cpp	/^PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap = NULL;$/;"	v	typeref:typename:PFNGLGENERATEMIPMAPPROC
glad_glGenerateTextureMipmap	src/glad.cpp	/^PFNGLGENERATETEXTUREMIPMAPPROC glad_glGenerateTextureMipmap = NULL;$/;"	v	typeref:typename:PFNGLGENERATETEXTUREMIPMAPPROC
glad_glGetActiveAtomicCounterBufferiv	src/glad.cpp	/^PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_glGetActiveAtomicCounterBufferiv = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
glad_glGetActiveAttrib	src/glad.cpp	/^PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVEATTRIBPROC
glad_glGetActiveSubroutineName	src/glad.cpp	/^PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVESUBROUTINENAMEPROC
glad_glGetActiveSubroutineUniformName	src/glad.cpp	/^PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
glad_glGetActiveSubroutineUniformiv	src/glad.cpp	/^PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
glad_glGetActiveUniform	src/glad.cpp	/^PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMPROC
glad_glGetActiveUniformBlockName	src/glad.cpp	/^PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
glad_glGetActiveUniformBlockiv	src/glad.cpp	/^PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMBLOCKIVPROC
glad_glGetActiveUniformName	src/glad.cpp	/^PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMNAMEPROC
glad_glGetActiveUniformsiv	src/glad.cpp	/^PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv = NULL;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMSIVPROC
glad_glGetAttachedShaders	src/glad.cpp	/^PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders = NULL;$/;"	v	typeref:typename:PFNGLGETATTACHEDSHADERSPROC
glad_glGetAttribLocation	src/glad.cpp	/^PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation = NULL;$/;"	v	typeref:typename:PFNGLGETATTRIBLOCATIONPROC
glad_glGetBooleani_v	src/glad.cpp	/^PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v = NULL;$/;"	v	typeref:typename:PFNGLGETBOOLEANI_VPROC
glad_glGetBooleanv	src/glad.cpp	/^PFNGLGETBOOLEANVPROC glad_glGetBooleanv = NULL;$/;"	v	typeref:typename:PFNGLGETBOOLEANVPROC
glad_glGetBufferParameteri64v	src/glad.cpp	/^PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v = NULL;$/;"	v	typeref:typename:PFNGLGETBUFFERPARAMETERI64VPROC
glad_glGetBufferParameteriv	src/glad.cpp	/^PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETBUFFERPARAMETERIVPROC
glad_glGetBufferPointerv	src/glad.cpp	/^PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv = NULL;$/;"	v	typeref:typename:PFNGLGETBUFFERPOINTERVPROC
glad_glGetBufferSubData	src/glad.cpp	/^PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData = NULL;$/;"	v	typeref:typename:PFNGLGETBUFFERSUBDATAPROC
glad_glGetCompressedTexImage	src/glad.cpp	/^PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage = NULL;$/;"	v	typeref:typename:PFNGLGETCOMPRESSEDTEXIMAGEPROC
glad_glGetCompressedTextureImage	src/glad.cpp	/^PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_glGetCompressedTextureImage = NULL;$/;"	v	typeref:typename:PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC
glad_glGetCompressedTextureSubImage	src/glad.cpp	/^PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_glGetCompressedTextureSubImage = NULL;$/;"	v	typeref:typename:PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC
glad_glGetDebugMessageLog	src/glad.cpp	/^PFNGLGETDEBUGMESSAGELOGPROC glad_glGetDebugMessageLog = NULL;$/;"	v	typeref:typename:PFNGLGETDEBUGMESSAGELOGPROC
glad_glGetDoublei_v	src/glad.cpp	/^PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v = NULL;$/;"	v	typeref:typename:PFNGLGETDOUBLEI_VPROC
glad_glGetDoublev	src/glad.cpp	/^PFNGLGETDOUBLEVPROC glad_glGetDoublev = NULL;$/;"	v	typeref:typename:PFNGLGETDOUBLEVPROC
glad_glGetError	src/glad.cpp	/^PFNGLGETERRORPROC glad_glGetError = NULL;$/;"	v	typeref:typename:PFNGLGETERRORPROC
glad_glGetFloati_v	src/glad.cpp	/^PFNGLGETFLOATI_VPROC glad_glGetFloati_v = NULL;$/;"	v	typeref:typename:PFNGLGETFLOATI_VPROC
glad_glGetFloatv	src/glad.cpp	/^PFNGLGETFLOATVPROC glad_glGetFloatv = NULL;$/;"	v	typeref:typename:PFNGLGETFLOATVPROC
glad_glGetFragDataIndex	src/glad.cpp	/^PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex = NULL;$/;"	v	typeref:typename:PFNGLGETFRAGDATAINDEXPROC
glad_glGetFragDataLocation	src/glad.cpp	/^PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation = NULL;$/;"	v	typeref:typename:PFNGLGETFRAGDATALOCATIONPROC
glad_glGetFramebufferAttachmentParameteriv	src/glad.cpp	/^PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
glad_glGetFramebufferParameteriv	src/glad.cpp	/^PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_glGetFramebufferParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETFRAMEBUFFERPARAMETERIVPROC
glad_glGetGraphicsResetStatus	src/glad.cpp	/^PFNGLGETGRAPHICSRESETSTATUSPROC glad_glGetGraphicsResetStatus = NULL;$/;"	v	typeref:typename:PFNGLGETGRAPHICSRESETSTATUSPROC
glad_glGetInteger64i_v	src/glad.cpp	/^PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v = NULL;$/;"	v	typeref:typename:PFNGLGETINTEGER64I_VPROC
glad_glGetInteger64v	src/glad.cpp	/^PFNGLGETINTEGER64VPROC glad_glGetInteger64v = NULL;$/;"	v	typeref:typename:PFNGLGETINTEGER64VPROC
glad_glGetIntegeri_v	src/glad.cpp	/^PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v = NULL;$/;"	v	typeref:typename:PFNGLGETINTEGERI_VPROC
glad_glGetIntegerv	src/glad.cpp	/^PFNGLGETINTEGERVPROC glad_glGetIntegerv = NULL;$/;"	v	typeref:typename:PFNGLGETINTEGERVPROC
glad_glGetInternalformati64v	src/glad.cpp	/^PFNGLGETINTERNALFORMATI64VPROC glad_glGetInternalformati64v = NULL;$/;"	v	typeref:typename:PFNGLGETINTERNALFORMATI64VPROC
glad_glGetInternalformativ	src/glad.cpp	/^PFNGLGETINTERNALFORMATIVPROC glad_glGetInternalformativ = NULL;$/;"	v	typeref:typename:PFNGLGETINTERNALFORMATIVPROC
glad_glGetMultisamplefv	src/glad.cpp	/^PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv = NULL;$/;"	v	typeref:typename:PFNGLGETMULTISAMPLEFVPROC
glad_glGetNamedBufferParameteri64v	src/glad.cpp	/^PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_glGetNamedBufferParameteri64v = NULL;$/;"	v	typeref:typename:PFNGLGETNAMEDBUFFERPARAMETERI64VPROC
glad_glGetNamedBufferParameteriv	src/glad.cpp	/^PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_glGetNamedBufferParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETNAMEDBUFFERPARAMETERIVPROC
glad_glGetNamedBufferPointerv	src/glad.cpp	/^PFNGLGETNAMEDBUFFERPOINTERVPROC glad_glGetNamedBufferPointerv = NULL;$/;"	v	typeref:typename:PFNGLGETNAMEDBUFFERPOINTERVPROC
glad_glGetNamedBufferSubData	src/glad.cpp	/^PFNGLGETNAMEDBUFFERSUBDATAPROC glad_glGetNamedBufferSubData = NULL;$/;"	v	typeref:typename:PFNGLGETNAMEDBUFFERSUBDATAPROC
glad_glGetNamedFramebufferAttachmentParameteriv	src/glad.cpp	/^PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetNamedFramebufferAttachmentParameteri/;"	v	typeref:typename:PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC
glad_glGetNamedFramebufferParameteriv	src/glad.cpp	/^PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_glGetNamedFramebufferParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC
glad_glGetNamedRenderbufferParameteriv	src/glad.cpp	/^PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_glGetNamedRenderbufferParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC
glad_glGetObjectLabel	src/glad.cpp	/^PFNGLGETOBJECTLABELPROC glad_glGetObjectLabel = NULL;$/;"	v	typeref:typename:PFNGLGETOBJECTLABELPROC
glad_glGetObjectPtrLabel	src/glad.cpp	/^PFNGLGETOBJECTPTRLABELPROC glad_glGetObjectPtrLabel = NULL;$/;"	v	typeref:typename:PFNGLGETOBJECTPTRLABELPROC
glad_glGetPointerv	src/glad.cpp	/^PFNGLGETPOINTERVPROC glad_glGetPointerv = NULL;$/;"	v	typeref:typename:PFNGLGETPOINTERVPROC
glad_glGetProgramBinary	src/glad.cpp	/^PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary = NULL;$/;"	v	typeref:typename:PFNGLGETPROGRAMBINARYPROC
glad_glGetProgramInfoLog	src/glad.cpp	/^PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog = NULL;$/;"	v	typeref:typename:PFNGLGETPROGRAMINFOLOGPROC
glad_glGetProgramInterfaceiv	src/glad.cpp	/^PFNGLGETPROGRAMINTERFACEIVPROC glad_glGetProgramInterfaceiv = NULL;$/;"	v	typeref:typename:PFNGLGETPROGRAMINTERFACEIVPROC
glad_glGetProgramPipelineInfoLog	src/glad.cpp	/^PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog = NULL;$/;"	v	typeref:typename:PFNGLGETPROGRAMPIPELINEINFOLOGPROC
glad_glGetProgramPipelineiv	src/glad.cpp	/^PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv = NULL;$/;"	v	typeref:typename:PFNGLGETPROGRAMPIPELINEIVPROC
glad_glGetProgramResourceIndex	src/glad.cpp	/^PFNGLGETPROGRAMRESOURCEINDEXPROC glad_glGetProgramResourceIndex = NULL;$/;"	v	typeref:typename:PFNGLGETPROGRAMRESOURCEINDEXPROC
glad_glGetProgramResourceLocation	src/glad.cpp	/^PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_glGetProgramResourceLocation = NULL;$/;"	v	typeref:typename:PFNGLGETPROGRAMRESOURCELOCATIONPROC
glad_glGetProgramResourceLocationIndex	src/glad.cpp	/^PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_glGetProgramResourceLocationIndex = NULL;$/;"	v	typeref:typename:PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
glad_glGetProgramResourceName	src/glad.cpp	/^PFNGLGETPROGRAMRESOURCENAMEPROC glad_glGetProgramResourceName = NULL;$/;"	v	typeref:typename:PFNGLGETPROGRAMRESOURCENAMEPROC
glad_glGetProgramResourceiv	src/glad.cpp	/^PFNGLGETPROGRAMRESOURCEIVPROC glad_glGetProgramResourceiv = NULL;$/;"	v	typeref:typename:PFNGLGETPROGRAMRESOURCEIVPROC
glad_glGetProgramStageiv	src/glad.cpp	/^PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv = NULL;$/;"	v	typeref:typename:PFNGLGETPROGRAMSTAGEIVPROC
glad_glGetProgramiv	src/glad.cpp	/^PFNGLGETPROGRAMIVPROC glad_glGetProgramiv = NULL;$/;"	v	typeref:typename:PFNGLGETPROGRAMIVPROC
glad_glGetQueryBufferObjecti64v	src/glad.cpp	/^PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_glGetQueryBufferObjecti64v = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYBUFFEROBJECTI64VPROC
glad_glGetQueryBufferObjectiv	src/glad.cpp	/^PFNGLGETQUERYBUFFEROBJECTIVPROC glad_glGetQueryBufferObjectiv = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYBUFFEROBJECTIVPROC
glad_glGetQueryBufferObjectui64v	src/glad.cpp	/^PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_glGetQueryBufferObjectui64v = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYBUFFEROBJECTUI64VPROC
glad_glGetQueryBufferObjectuiv	src/glad.cpp	/^PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_glGetQueryBufferObjectuiv = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYBUFFEROBJECTUIVPROC
glad_glGetQueryIndexediv	src/glad.cpp	/^PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYINDEXEDIVPROC
glad_glGetQueryObjecti64v	src/glad.cpp	/^PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYOBJECTI64VPROC
glad_glGetQueryObjectiv	src/glad.cpp	/^PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYOBJECTIVPROC
glad_glGetQueryObjectui64v	src/glad.cpp	/^PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYOBJECTUI64VPROC
glad_glGetQueryObjectuiv	src/glad.cpp	/^PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYOBJECTUIVPROC
glad_glGetQueryiv	src/glad.cpp	/^PFNGLGETQUERYIVPROC glad_glGetQueryiv = NULL;$/;"	v	typeref:typename:PFNGLGETQUERYIVPROC
glad_glGetRenderbufferParameteriv	src/glad.cpp	/^PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETRENDERBUFFERPARAMETERIVPROC
glad_glGetSamplerParameterIiv	src/glad.cpp	/^PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv = NULL;$/;"	v	typeref:typename:PFNGLGETSAMPLERPARAMETERIIVPROC
glad_glGetSamplerParameterIuiv	src/glad.cpp	/^PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv = NULL;$/;"	v	typeref:typename:PFNGLGETSAMPLERPARAMETERIUIVPROC
glad_glGetSamplerParameterfv	src/glad.cpp	/^PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv = NULL;$/;"	v	typeref:typename:PFNGLGETSAMPLERPARAMETERFVPROC
glad_glGetSamplerParameteriv	src/glad.cpp	/^PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETSAMPLERPARAMETERIVPROC
glad_glGetShaderInfoLog	src/glad.cpp	/^PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog = NULL;$/;"	v	typeref:typename:PFNGLGETSHADERINFOLOGPROC
glad_glGetShaderPrecisionFormat	src/glad.cpp	/^PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat = NULL;$/;"	v	typeref:typename:PFNGLGETSHADERPRECISIONFORMATPROC
glad_glGetShaderSource	src/glad.cpp	/^PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource = NULL;$/;"	v	typeref:typename:PFNGLGETSHADERSOURCEPROC
glad_glGetShaderiv	src/glad.cpp	/^PFNGLGETSHADERIVPROC glad_glGetShaderiv = NULL;$/;"	v	typeref:typename:PFNGLGETSHADERIVPROC
glad_glGetString	src/glad.cpp	/^PFNGLGETSTRINGPROC glad_glGetString = NULL;$/;"	v	typeref:typename:PFNGLGETSTRINGPROC
glad_glGetStringi	src/glad.cpp	/^PFNGLGETSTRINGIPROC glad_glGetStringi = NULL;$/;"	v	typeref:typename:PFNGLGETSTRINGIPROC
glad_glGetSubroutineIndex	src/glad.cpp	/^PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex = NULL;$/;"	v	typeref:typename:PFNGLGETSUBROUTINEINDEXPROC
glad_glGetSubroutineUniformLocation	src/glad.cpp	/^PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation = NULL;$/;"	v	typeref:typename:PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
glad_glGetSynciv	src/glad.cpp	/^PFNGLGETSYNCIVPROC glad_glGetSynciv = NULL;$/;"	v	typeref:typename:PFNGLGETSYNCIVPROC
glad_glGetTexImage	src/glad.cpp	/^PFNGLGETTEXIMAGEPROC glad_glGetTexImage = NULL;$/;"	v	typeref:typename:PFNGLGETTEXIMAGEPROC
glad_glGetTexLevelParameterfv	src/glad.cpp	/^PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXLEVELPARAMETERFVPROC
glad_glGetTexLevelParameteriv	src/glad.cpp	/^PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXLEVELPARAMETERIVPROC
glad_glGetTexParameterIiv	src/glad.cpp	/^PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXPARAMETERIIVPROC
glad_glGetTexParameterIuiv	src/glad.cpp	/^PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXPARAMETERIUIVPROC
glad_glGetTexParameterfv	src/glad.cpp	/^PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXPARAMETERFVPROC
glad_glGetTexParameteriv	src/glad.cpp	/^PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXPARAMETERIVPROC
glad_glGetTextureImage	src/glad.cpp	/^PFNGLGETTEXTUREIMAGEPROC glad_glGetTextureImage = NULL;$/;"	v	typeref:typename:PFNGLGETTEXTUREIMAGEPROC
glad_glGetTextureLevelParameterfv	src/glad.cpp	/^PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_glGetTextureLevelParameterfv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXTURELEVELPARAMETERFVPROC
glad_glGetTextureLevelParameteriv	src/glad.cpp	/^PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_glGetTextureLevelParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXTURELEVELPARAMETERIVPROC
glad_glGetTextureParameterIiv	src/glad.cpp	/^PFNGLGETTEXTUREPARAMETERIIVPROC glad_glGetTextureParameterIiv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXTUREPARAMETERIIVPROC
glad_glGetTextureParameterIuiv	src/glad.cpp	/^PFNGLGETTEXTUREPARAMETERIUIVPROC glad_glGetTextureParameterIuiv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXTUREPARAMETERIUIVPROC
glad_glGetTextureParameterfv	src/glad.cpp	/^PFNGLGETTEXTUREPARAMETERFVPROC glad_glGetTextureParameterfv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXTUREPARAMETERFVPROC
glad_glGetTextureParameteriv	src/glad.cpp	/^PFNGLGETTEXTUREPARAMETERIVPROC glad_glGetTextureParameteriv = NULL;$/;"	v	typeref:typename:PFNGLGETTEXTUREPARAMETERIVPROC
glad_glGetTextureSubImage	src/glad.cpp	/^PFNGLGETTEXTURESUBIMAGEPROC glad_glGetTextureSubImage = NULL;$/;"	v	typeref:typename:PFNGLGETTEXTURESUBIMAGEPROC
glad_glGetTransformFeedbackVarying	src/glad.cpp	/^PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying = NULL;$/;"	v	typeref:typename:PFNGLGETTRANSFORMFEEDBACKVARYINGPROC
glad_glGetTransformFeedbacki64_v	src/glad.cpp	/^PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_glGetTransformFeedbacki64_v = NULL;$/;"	v	typeref:typename:PFNGLGETTRANSFORMFEEDBACKI64_VPROC
glad_glGetTransformFeedbacki_v	src/glad.cpp	/^PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_glGetTransformFeedbacki_v = NULL;$/;"	v	typeref:typename:PFNGLGETTRANSFORMFEEDBACKI_VPROC
glad_glGetTransformFeedbackiv	src/glad.cpp	/^PFNGLGETTRANSFORMFEEDBACKIVPROC glad_glGetTransformFeedbackiv = NULL;$/;"	v	typeref:typename:PFNGLGETTRANSFORMFEEDBACKIVPROC
glad_glGetUniformBlockIndex	src/glad.cpp	/^PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex = NULL;$/;"	v	typeref:typename:PFNGLGETUNIFORMBLOCKINDEXPROC
glad_glGetUniformIndices	src/glad.cpp	/^PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices = NULL;$/;"	v	typeref:typename:PFNGLGETUNIFORMINDICESPROC
glad_glGetUniformLocation	src/glad.cpp	/^PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation = NULL;$/;"	v	typeref:typename:PFNGLGETUNIFORMLOCATIONPROC
glad_glGetUniformSubroutineuiv	src/glad.cpp	/^PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv = NULL;$/;"	v	typeref:typename:PFNGLGETUNIFORMSUBROUTINEUIVPROC
glad_glGetUniformdv	src/glad.cpp	/^PFNGLGETUNIFORMDVPROC glad_glGetUniformdv = NULL;$/;"	v	typeref:typename:PFNGLGETUNIFORMDVPROC
glad_glGetUniformfv	src/glad.cpp	/^PFNGLGETUNIFORMFVPROC glad_glGetUniformfv = NULL;$/;"	v	typeref:typename:PFNGLGETUNIFORMFVPROC
glad_glGetUniformiv	src/glad.cpp	/^PFNGLGETUNIFORMIVPROC glad_glGetUniformiv = NULL;$/;"	v	typeref:typename:PFNGLGETUNIFORMIVPROC
glad_glGetUniformuiv	src/glad.cpp	/^PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv = NULL;$/;"	v	typeref:typename:PFNGLGETUNIFORMUIVPROC
glad_glGetVertexArrayIndexed64iv	src/glad.cpp	/^PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_glGetVertexArrayIndexed64iv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXARRAYINDEXED64IVPROC
glad_glGetVertexArrayIndexediv	src/glad.cpp	/^PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_glGetVertexArrayIndexediv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXARRAYINDEXEDIVPROC
glad_glGetVertexArrayiv	src/glad.cpp	/^PFNGLGETVERTEXARRAYIVPROC glad_glGetVertexArrayiv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXARRAYIVPROC
glad_glGetVertexAttribIiv	src/glad.cpp	/^PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBIIVPROC
glad_glGetVertexAttribIuiv	src/glad.cpp	/^PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBIUIVPROC
glad_glGetVertexAttribLdv	src/glad.cpp	/^PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBLDVPROC
glad_glGetVertexAttribPointerv	src/glad.cpp	/^PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBPOINTERVPROC
glad_glGetVertexAttribdv	src/glad.cpp	/^PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBDVPROC
glad_glGetVertexAttribfv	src/glad.cpp	/^PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBFVPROC
glad_glGetVertexAttribiv	src/glad.cpp	/^PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv = NULL;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBIVPROC
glad_glGetnColorTable	src/glad.cpp	/^PFNGLGETNCOLORTABLEPROC glad_glGetnColorTable = NULL;$/;"	v	typeref:typename:PFNGLGETNCOLORTABLEPROC
glad_glGetnCompressedTexImage	src/glad.cpp	/^PFNGLGETNCOMPRESSEDTEXIMAGEPROC glad_glGetnCompressedTexImage = NULL;$/;"	v	typeref:typename:PFNGLGETNCOMPRESSEDTEXIMAGEPROC
glad_glGetnConvolutionFilter	src/glad.cpp	/^PFNGLGETNCONVOLUTIONFILTERPROC glad_glGetnConvolutionFilter = NULL;$/;"	v	typeref:typename:PFNGLGETNCONVOLUTIONFILTERPROC
glad_glGetnHistogram	src/glad.cpp	/^PFNGLGETNHISTOGRAMPROC glad_glGetnHistogram = NULL;$/;"	v	typeref:typename:PFNGLGETNHISTOGRAMPROC
glad_glGetnMapdv	src/glad.cpp	/^PFNGLGETNMAPDVPROC glad_glGetnMapdv = NULL;$/;"	v	typeref:typename:PFNGLGETNMAPDVPROC
glad_glGetnMapfv	src/glad.cpp	/^PFNGLGETNMAPFVPROC glad_glGetnMapfv = NULL;$/;"	v	typeref:typename:PFNGLGETNMAPFVPROC
glad_glGetnMapiv	src/glad.cpp	/^PFNGLGETNMAPIVPROC glad_glGetnMapiv = NULL;$/;"	v	typeref:typename:PFNGLGETNMAPIVPROC
glad_glGetnMinmax	src/glad.cpp	/^PFNGLGETNMINMAXPROC glad_glGetnMinmax = NULL;$/;"	v	typeref:typename:PFNGLGETNMINMAXPROC
glad_glGetnPixelMapfv	src/glad.cpp	/^PFNGLGETNPIXELMAPFVPROC glad_glGetnPixelMapfv = NULL;$/;"	v	typeref:typename:PFNGLGETNPIXELMAPFVPROC
glad_glGetnPixelMapuiv	src/glad.cpp	/^PFNGLGETNPIXELMAPUIVPROC glad_glGetnPixelMapuiv = NULL;$/;"	v	typeref:typename:PFNGLGETNPIXELMAPUIVPROC
glad_glGetnPixelMapusv	src/glad.cpp	/^PFNGLGETNPIXELMAPUSVPROC glad_glGetnPixelMapusv = NULL;$/;"	v	typeref:typename:PFNGLGETNPIXELMAPUSVPROC
glad_glGetnPolygonStipple	src/glad.cpp	/^PFNGLGETNPOLYGONSTIPPLEPROC glad_glGetnPolygonStipple = NULL;$/;"	v	typeref:typename:PFNGLGETNPOLYGONSTIPPLEPROC
glad_glGetnSeparableFilter	src/glad.cpp	/^PFNGLGETNSEPARABLEFILTERPROC glad_glGetnSeparableFilter = NULL;$/;"	v	typeref:typename:PFNGLGETNSEPARABLEFILTERPROC
glad_glGetnTexImage	src/glad.cpp	/^PFNGLGETNTEXIMAGEPROC glad_glGetnTexImage = NULL;$/;"	v	typeref:typename:PFNGLGETNTEXIMAGEPROC
glad_glGetnUniformdv	src/glad.cpp	/^PFNGLGETNUNIFORMDVPROC glad_glGetnUniformdv = NULL;$/;"	v	typeref:typename:PFNGLGETNUNIFORMDVPROC
glad_glGetnUniformfv	src/glad.cpp	/^PFNGLGETNUNIFORMFVPROC glad_glGetnUniformfv = NULL;$/;"	v	typeref:typename:PFNGLGETNUNIFORMFVPROC
glad_glGetnUniformiv	src/glad.cpp	/^PFNGLGETNUNIFORMIVPROC glad_glGetnUniformiv = NULL;$/;"	v	typeref:typename:PFNGLGETNUNIFORMIVPROC
glad_glGetnUniformuiv	src/glad.cpp	/^PFNGLGETNUNIFORMUIVPROC glad_glGetnUniformuiv = NULL;$/;"	v	typeref:typename:PFNGLGETNUNIFORMUIVPROC
glad_glHint	src/glad.cpp	/^PFNGLHINTPROC glad_glHint = NULL;$/;"	v	typeref:typename:PFNGLHINTPROC
glad_glInvalidateBufferData	src/glad.cpp	/^PFNGLINVALIDATEBUFFERDATAPROC glad_glInvalidateBufferData = NULL;$/;"	v	typeref:typename:PFNGLINVALIDATEBUFFERDATAPROC
glad_glInvalidateBufferSubData	src/glad.cpp	/^PFNGLINVALIDATEBUFFERSUBDATAPROC glad_glInvalidateBufferSubData = NULL;$/;"	v	typeref:typename:PFNGLINVALIDATEBUFFERSUBDATAPROC
glad_glInvalidateFramebuffer	src/glad.cpp	/^PFNGLINVALIDATEFRAMEBUFFERPROC glad_glInvalidateFramebuffer = NULL;$/;"	v	typeref:typename:PFNGLINVALIDATEFRAMEBUFFERPROC
glad_glInvalidateNamedFramebufferData	src/glad.cpp	/^PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_glInvalidateNamedFramebufferData = NULL;$/;"	v	typeref:typename:PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC
glad_glInvalidateNamedFramebufferSubData	src/glad.cpp	/^PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_glInvalidateNamedFramebufferSubData = NULL;$/;"	v	typeref:typename:PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC
glad_glInvalidateSubFramebuffer	src/glad.cpp	/^PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_glInvalidateSubFramebuffer = NULL;$/;"	v	typeref:typename:PFNGLINVALIDATESUBFRAMEBUFFERPROC
glad_glInvalidateTexImage	src/glad.cpp	/^PFNGLINVALIDATETEXIMAGEPROC glad_glInvalidateTexImage = NULL;$/;"	v	typeref:typename:PFNGLINVALIDATETEXIMAGEPROC
glad_glInvalidateTexSubImage	src/glad.cpp	/^PFNGLINVALIDATETEXSUBIMAGEPROC glad_glInvalidateTexSubImage = NULL;$/;"	v	typeref:typename:PFNGLINVALIDATETEXSUBIMAGEPROC
glad_glIsBuffer	src/glad.cpp	/^PFNGLISBUFFERPROC glad_glIsBuffer = NULL;$/;"	v	typeref:typename:PFNGLISBUFFERPROC
glad_glIsEnabled	src/glad.cpp	/^PFNGLISENABLEDPROC glad_glIsEnabled = NULL;$/;"	v	typeref:typename:PFNGLISENABLEDPROC
glad_glIsEnabledi	src/glad.cpp	/^PFNGLISENABLEDIPROC glad_glIsEnabledi = NULL;$/;"	v	typeref:typename:PFNGLISENABLEDIPROC
glad_glIsFramebuffer	src/glad.cpp	/^PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer = NULL;$/;"	v	typeref:typename:PFNGLISFRAMEBUFFERPROC
glad_glIsProgram	src/glad.cpp	/^PFNGLISPROGRAMPROC glad_glIsProgram = NULL;$/;"	v	typeref:typename:PFNGLISPROGRAMPROC
glad_glIsProgramPipeline	src/glad.cpp	/^PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline = NULL;$/;"	v	typeref:typename:PFNGLISPROGRAMPIPELINEPROC
glad_glIsQuery	src/glad.cpp	/^PFNGLISQUERYPROC glad_glIsQuery = NULL;$/;"	v	typeref:typename:PFNGLISQUERYPROC
glad_glIsRenderbuffer	src/glad.cpp	/^PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer = NULL;$/;"	v	typeref:typename:PFNGLISRENDERBUFFERPROC
glad_glIsSampler	src/glad.cpp	/^PFNGLISSAMPLERPROC glad_glIsSampler = NULL;$/;"	v	typeref:typename:PFNGLISSAMPLERPROC
glad_glIsShader	src/glad.cpp	/^PFNGLISSHADERPROC glad_glIsShader = NULL;$/;"	v	typeref:typename:PFNGLISSHADERPROC
glad_glIsSync	src/glad.cpp	/^PFNGLISSYNCPROC glad_glIsSync = NULL;$/;"	v	typeref:typename:PFNGLISSYNCPROC
glad_glIsTexture	src/glad.cpp	/^PFNGLISTEXTUREPROC glad_glIsTexture = NULL;$/;"	v	typeref:typename:PFNGLISTEXTUREPROC
glad_glIsTransformFeedback	src/glad.cpp	/^PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback = NULL;$/;"	v	typeref:typename:PFNGLISTRANSFORMFEEDBACKPROC
glad_glIsVertexArray	src/glad.cpp	/^PFNGLISVERTEXARRAYPROC glad_glIsVertexArray = NULL;$/;"	v	typeref:typename:PFNGLISVERTEXARRAYPROC
glad_glLineWidth	src/glad.cpp	/^PFNGLLINEWIDTHPROC glad_glLineWidth = NULL;$/;"	v	typeref:typename:PFNGLLINEWIDTHPROC
glad_glLinkProgram	src/glad.cpp	/^PFNGLLINKPROGRAMPROC glad_glLinkProgram = NULL;$/;"	v	typeref:typename:PFNGLLINKPROGRAMPROC
glad_glLogicOp	src/glad.cpp	/^PFNGLLOGICOPPROC glad_glLogicOp = NULL;$/;"	v	typeref:typename:PFNGLLOGICOPPROC
glad_glMapBuffer	src/glad.cpp	/^PFNGLMAPBUFFERPROC glad_glMapBuffer = NULL;$/;"	v	typeref:typename:PFNGLMAPBUFFERPROC
glad_glMapBufferRange	src/glad.cpp	/^PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange = NULL;$/;"	v	typeref:typename:PFNGLMAPBUFFERRANGEPROC
glad_glMapNamedBuffer	src/glad.cpp	/^PFNGLMAPNAMEDBUFFERPROC glad_glMapNamedBuffer = NULL;$/;"	v	typeref:typename:PFNGLMAPNAMEDBUFFERPROC
glad_glMapNamedBufferRange	src/glad.cpp	/^PFNGLMAPNAMEDBUFFERRANGEPROC glad_glMapNamedBufferRange = NULL;$/;"	v	typeref:typename:PFNGLMAPNAMEDBUFFERRANGEPROC
glad_glMemoryBarrier	src/glad.cpp	/^PFNGLMEMORYBARRIERPROC glad_glMemoryBarrier = NULL;$/;"	v	typeref:typename:PFNGLMEMORYBARRIERPROC
glad_glMemoryBarrierByRegion	src/glad.cpp	/^PFNGLMEMORYBARRIERBYREGIONPROC glad_glMemoryBarrierByRegion = NULL;$/;"	v	typeref:typename:PFNGLMEMORYBARRIERBYREGIONPROC
glad_glMinSampleShading	src/glad.cpp	/^PFNGLMINSAMPLESHADINGPROC glad_glMinSampleShading = NULL;$/;"	v	typeref:typename:PFNGLMINSAMPLESHADINGPROC
glad_glMultiDrawArrays	src/glad.cpp	/^PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays = NULL;$/;"	v	typeref:typename:PFNGLMULTIDRAWARRAYSPROC
glad_glMultiDrawArraysIndirect	src/glad.cpp	/^PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_glMultiDrawArraysIndirect = NULL;$/;"	v	typeref:typename:PFNGLMULTIDRAWARRAYSINDIRECTPROC
glad_glMultiDrawElements	src/glad.cpp	/^PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements = NULL;$/;"	v	typeref:typename:PFNGLMULTIDRAWELEMENTSPROC
glad_glMultiDrawElementsBaseVertex	src/glad.cpp	/^PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex = NULL;$/;"	v	typeref:typename:PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
glad_glMultiDrawElementsIndirect	src/glad.cpp	/^PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_glMultiDrawElementsIndirect = NULL;$/;"	v	typeref:typename:PFNGLMULTIDRAWELEMENTSINDIRECTPROC
glad_glMultiTexCoordP1ui	src/glad.cpp	/^PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP1UIPROC
glad_glMultiTexCoordP1uiv	src/glad.cpp	/^PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP1UIVPROC
glad_glMultiTexCoordP2ui	src/glad.cpp	/^PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP2UIPROC
glad_glMultiTexCoordP2uiv	src/glad.cpp	/^PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP2UIVPROC
glad_glMultiTexCoordP3ui	src/glad.cpp	/^PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP3UIPROC
glad_glMultiTexCoordP3uiv	src/glad.cpp	/^PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP3UIVPROC
glad_glMultiTexCoordP4ui	src/glad.cpp	/^PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP4UIPROC
glad_glMultiTexCoordP4uiv	src/glad.cpp	/^PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv = NULL;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP4UIVPROC
glad_glNamedBufferData	src/glad.cpp	/^PFNGLNAMEDBUFFERDATAPROC glad_glNamedBufferData = NULL;$/;"	v	typeref:typename:PFNGLNAMEDBUFFERDATAPROC
glad_glNamedBufferStorage	src/glad.cpp	/^PFNGLNAMEDBUFFERSTORAGEPROC glad_glNamedBufferStorage = NULL;$/;"	v	typeref:typename:PFNGLNAMEDBUFFERSTORAGEPROC
glad_glNamedBufferSubData	src/glad.cpp	/^PFNGLNAMEDBUFFERSUBDATAPROC glad_glNamedBufferSubData = NULL;$/;"	v	typeref:typename:PFNGLNAMEDBUFFERSUBDATAPROC
glad_glNamedFramebufferDrawBuffer	src/glad.cpp	/^PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_glNamedFramebufferDrawBuffer = NULL;$/;"	v	typeref:typename:PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC
glad_glNamedFramebufferDrawBuffers	src/glad.cpp	/^PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_glNamedFramebufferDrawBuffers = NULL;$/;"	v	typeref:typename:PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC
glad_glNamedFramebufferParameteri	src/glad.cpp	/^PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_glNamedFramebufferParameteri = NULL;$/;"	v	typeref:typename:PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC
glad_glNamedFramebufferReadBuffer	src/glad.cpp	/^PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_glNamedFramebufferReadBuffer = NULL;$/;"	v	typeref:typename:PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC
glad_glNamedFramebufferRenderbuffer	src/glad.cpp	/^PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_glNamedFramebufferRenderbuffer = NULL;$/;"	v	typeref:typename:PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC
glad_glNamedFramebufferTexture	src/glad.cpp	/^PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_glNamedFramebufferTexture = NULL;$/;"	v	typeref:typename:PFNGLNAMEDFRAMEBUFFERTEXTUREPROC
glad_glNamedFramebufferTextureLayer	src/glad.cpp	/^PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_glNamedFramebufferTextureLayer = NULL;$/;"	v	typeref:typename:PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC
glad_glNamedRenderbufferStorage	src/glad.cpp	/^PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_glNamedRenderbufferStorage = NULL;$/;"	v	typeref:typename:PFNGLNAMEDRENDERBUFFERSTORAGEPROC
glad_glNamedRenderbufferStorageMultisample	src/glad.cpp	/^PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glNamedRenderbufferStorageMultisample = NULL;$/;"	v	typeref:typename:PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC
glad_glNormalP3ui	src/glad.cpp	/^PFNGLNORMALP3UIPROC glad_glNormalP3ui = NULL;$/;"	v	typeref:typename:PFNGLNORMALP3UIPROC
glad_glNormalP3uiv	src/glad.cpp	/^PFNGLNORMALP3UIVPROC glad_glNormalP3uiv = NULL;$/;"	v	typeref:typename:PFNGLNORMALP3UIVPROC
glad_glObjectLabel	src/glad.cpp	/^PFNGLOBJECTLABELPROC glad_glObjectLabel = NULL;$/;"	v	typeref:typename:PFNGLOBJECTLABELPROC
glad_glObjectPtrLabel	src/glad.cpp	/^PFNGLOBJECTPTRLABELPROC glad_glObjectPtrLabel = NULL;$/;"	v	typeref:typename:PFNGLOBJECTPTRLABELPROC
glad_glPatchParameterfv	src/glad.cpp	/^PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv = NULL;$/;"	v	typeref:typename:PFNGLPATCHPARAMETERFVPROC
glad_glPatchParameteri	src/glad.cpp	/^PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri = NULL;$/;"	v	typeref:typename:PFNGLPATCHPARAMETERIPROC
glad_glPauseTransformFeedback	src/glad.cpp	/^PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback = NULL;$/;"	v	typeref:typename:PFNGLPAUSETRANSFORMFEEDBACKPROC
glad_glPixelStoref	src/glad.cpp	/^PFNGLPIXELSTOREFPROC glad_glPixelStoref = NULL;$/;"	v	typeref:typename:PFNGLPIXELSTOREFPROC
glad_glPixelStorei	src/glad.cpp	/^PFNGLPIXELSTOREIPROC glad_glPixelStorei = NULL;$/;"	v	typeref:typename:PFNGLPIXELSTOREIPROC
glad_glPointParameterf	src/glad.cpp	/^PFNGLPOINTPARAMETERFPROC glad_glPointParameterf = NULL;$/;"	v	typeref:typename:PFNGLPOINTPARAMETERFPROC
glad_glPointParameterfv	src/glad.cpp	/^PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv = NULL;$/;"	v	typeref:typename:PFNGLPOINTPARAMETERFVPROC
glad_glPointParameteri	src/glad.cpp	/^PFNGLPOINTPARAMETERIPROC glad_glPointParameteri = NULL;$/;"	v	typeref:typename:PFNGLPOINTPARAMETERIPROC
glad_glPointParameteriv	src/glad.cpp	/^PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv = NULL;$/;"	v	typeref:typename:PFNGLPOINTPARAMETERIVPROC
glad_glPointSize	src/glad.cpp	/^PFNGLPOINTSIZEPROC glad_glPointSize = NULL;$/;"	v	typeref:typename:PFNGLPOINTSIZEPROC
glad_glPolygonMode	src/glad.cpp	/^PFNGLPOLYGONMODEPROC glad_glPolygonMode = NULL;$/;"	v	typeref:typename:PFNGLPOLYGONMODEPROC
glad_glPolygonOffset	src/glad.cpp	/^PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset = NULL;$/;"	v	typeref:typename:PFNGLPOLYGONOFFSETPROC
glad_glPopDebugGroup	src/glad.cpp	/^PFNGLPOPDEBUGGROUPPROC glad_glPopDebugGroup = NULL;$/;"	v	typeref:typename:PFNGLPOPDEBUGGROUPPROC
glad_glPrimitiveRestartIndex	src/glad.cpp	/^PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex = NULL;$/;"	v	typeref:typename:PFNGLPRIMITIVERESTARTINDEXPROC
glad_glProgramBinary	src/glad.cpp	/^PFNGLPROGRAMBINARYPROC glad_glProgramBinary = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMBINARYPROC
glad_glProgramParameteri	src/glad.cpp	/^PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMPARAMETERIPROC
glad_glProgramUniform1d	src/glad.cpp	/^PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1DPROC
glad_glProgramUniform1dv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1DVPROC
glad_glProgramUniform1f	src/glad.cpp	/^PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1FPROC
glad_glProgramUniform1fv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1FVPROC
glad_glProgramUniform1i	src/glad.cpp	/^PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1IPROC
glad_glProgramUniform1iv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1IVPROC
glad_glProgramUniform1ui	src/glad.cpp	/^PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1UIPROC
glad_glProgramUniform1uiv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1UIVPROC
glad_glProgramUniform2d	src/glad.cpp	/^PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2DPROC
glad_glProgramUniform2dv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2DVPROC
glad_glProgramUniform2f	src/glad.cpp	/^PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2FPROC
glad_glProgramUniform2fv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2FVPROC
glad_glProgramUniform2i	src/glad.cpp	/^PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2IPROC
glad_glProgramUniform2iv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2IVPROC
glad_glProgramUniform2ui	src/glad.cpp	/^PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2UIPROC
glad_glProgramUniform2uiv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2UIVPROC
glad_glProgramUniform3d	src/glad.cpp	/^PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3DPROC
glad_glProgramUniform3dv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3DVPROC
glad_glProgramUniform3f	src/glad.cpp	/^PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3FPROC
glad_glProgramUniform3fv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3FVPROC
glad_glProgramUniform3i	src/glad.cpp	/^PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3IPROC
glad_glProgramUniform3iv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3IVPROC
glad_glProgramUniform3ui	src/glad.cpp	/^PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3UIPROC
glad_glProgramUniform3uiv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3UIVPROC
glad_glProgramUniform4d	src/glad.cpp	/^PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4DPROC
glad_glProgramUniform4dv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4DVPROC
glad_glProgramUniform4f	src/glad.cpp	/^PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4FPROC
glad_glProgramUniform4fv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4FVPROC
glad_glProgramUniform4i	src/glad.cpp	/^PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4IPROC
glad_glProgramUniform4iv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4IVPROC
glad_glProgramUniform4ui	src/glad.cpp	/^PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4UIPROC
glad_glProgramUniform4uiv	src/glad.cpp	/^PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4UIVPROC
glad_glProgramUniformMatrix2dv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX2DVPROC
glad_glProgramUniformMatrix2fv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX2FVPROC
glad_glProgramUniformMatrix2x3dv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
glad_glProgramUniformMatrix2x3fv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
glad_glProgramUniformMatrix2x4dv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
glad_glProgramUniformMatrix2x4fv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
glad_glProgramUniformMatrix3dv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX3DVPROC
glad_glProgramUniformMatrix3fv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX3FVPROC
glad_glProgramUniformMatrix3x2dv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
glad_glProgramUniformMatrix3x2fv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
glad_glProgramUniformMatrix3x4dv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
glad_glProgramUniformMatrix3x4fv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
glad_glProgramUniformMatrix4dv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX4DVPROC
glad_glProgramUniformMatrix4fv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX4FVPROC
glad_glProgramUniformMatrix4x2dv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
glad_glProgramUniformMatrix4x2fv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
glad_glProgramUniformMatrix4x3dv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
glad_glProgramUniformMatrix4x3fv	src/glad.cpp	/^PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv = NULL;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
glad_glProvokingVertex	src/glad.cpp	/^PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex = NULL;$/;"	v	typeref:typename:PFNGLPROVOKINGVERTEXPROC
glad_glPushDebugGroup	src/glad.cpp	/^PFNGLPUSHDEBUGGROUPPROC glad_glPushDebugGroup = NULL;$/;"	v	typeref:typename:PFNGLPUSHDEBUGGROUPPROC
glad_glQueryCounter	src/glad.cpp	/^PFNGLQUERYCOUNTERPROC glad_glQueryCounter = NULL;$/;"	v	typeref:typename:PFNGLQUERYCOUNTERPROC
glad_glReadBuffer	src/glad.cpp	/^PFNGLREADBUFFERPROC glad_glReadBuffer = NULL;$/;"	v	typeref:typename:PFNGLREADBUFFERPROC
glad_glReadPixels	src/glad.cpp	/^PFNGLREADPIXELSPROC glad_glReadPixels = NULL;$/;"	v	typeref:typename:PFNGLREADPIXELSPROC
glad_glReadnPixels	src/glad.cpp	/^PFNGLREADNPIXELSPROC glad_glReadnPixels = NULL;$/;"	v	typeref:typename:PFNGLREADNPIXELSPROC
glad_glReleaseShaderCompiler	src/glad.cpp	/^PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler = NULL;$/;"	v	typeref:typename:PFNGLRELEASESHADERCOMPILERPROC
glad_glRenderbufferStorage	src/glad.cpp	/^PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage = NULL;$/;"	v	typeref:typename:PFNGLRENDERBUFFERSTORAGEPROC
glad_glRenderbufferStorageMultisample	src/glad.cpp	/^PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample = NULL;$/;"	v	typeref:typename:PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
glad_glResumeTransformFeedback	src/glad.cpp	/^PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback = NULL;$/;"	v	typeref:typename:PFNGLRESUMETRANSFORMFEEDBACKPROC
glad_glSampleCoverage	src/glad.cpp	/^PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage = NULL;$/;"	v	typeref:typename:PFNGLSAMPLECOVERAGEPROC
glad_glSampleMaski	src/glad.cpp	/^PFNGLSAMPLEMASKIPROC glad_glSampleMaski = NULL;$/;"	v	typeref:typename:PFNGLSAMPLEMASKIPROC
glad_glSamplerParameterIiv	src/glad.cpp	/^PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv = NULL;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERIIVPROC
glad_glSamplerParameterIuiv	src/glad.cpp	/^PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv = NULL;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERIUIVPROC
glad_glSamplerParameterf	src/glad.cpp	/^PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf = NULL;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERFPROC
glad_glSamplerParameterfv	src/glad.cpp	/^PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv = NULL;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERFVPROC
glad_glSamplerParameteri	src/glad.cpp	/^PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri = NULL;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERIPROC
glad_glSamplerParameteriv	src/glad.cpp	/^PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv = NULL;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERIVPROC
glad_glScissor	src/glad.cpp	/^PFNGLSCISSORPROC glad_glScissor = NULL;$/;"	v	typeref:typename:PFNGLSCISSORPROC
glad_glScissorArrayv	src/glad.cpp	/^PFNGLSCISSORARRAYVPROC glad_glScissorArrayv = NULL;$/;"	v	typeref:typename:PFNGLSCISSORARRAYVPROC
glad_glScissorIndexed	src/glad.cpp	/^PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed = NULL;$/;"	v	typeref:typename:PFNGLSCISSORINDEXEDPROC
glad_glScissorIndexedv	src/glad.cpp	/^PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv = NULL;$/;"	v	typeref:typename:PFNGLSCISSORINDEXEDVPROC
glad_glSecondaryColorP3ui	src/glad.cpp	/^PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui = NULL;$/;"	v	typeref:typename:PFNGLSECONDARYCOLORP3UIPROC
glad_glSecondaryColorP3uiv	src/glad.cpp	/^PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv = NULL;$/;"	v	typeref:typename:PFNGLSECONDARYCOLORP3UIVPROC
glad_glShaderBinary	src/glad.cpp	/^PFNGLSHADERBINARYPROC glad_glShaderBinary = NULL;$/;"	v	typeref:typename:PFNGLSHADERBINARYPROC
glad_glShaderSource	src/glad.cpp	/^PFNGLSHADERSOURCEPROC glad_glShaderSource = NULL;$/;"	v	typeref:typename:PFNGLSHADERSOURCEPROC
glad_glShaderStorageBlockBinding	src/glad.cpp	/^PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_glShaderStorageBlockBinding = NULL;$/;"	v	typeref:typename:PFNGLSHADERSTORAGEBLOCKBINDINGPROC
glad_glStencilFunc	src/glad.cpp	/^PFNGLSTENCILFUNCPROC glad_glStencilFunc = NULL;$/;"	v	typeref:typename:PFNGLSTENCILFUNCPROC
glad_glStencilFuncSeparate	src/glad.cpp	/^PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate = NULL;$/;"	v	typeref:typename:PFNGLSTENCILFUNCSEPARATEPROC
glad_glStencilMask	src/glad.cpp	/^PFNGLSTENCILMASKPROC glad_glStencilMask = NULL;$/;"	v	typeref:typename:PFNGLSTENCILMASKPROC
glad_glStencilMaskSeparate	src/glad.cpp	/^PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate = NULL;$/;"	v	typeref:typename:PFNGLSTENCILMASKSEPARATEPROC
glad_glStencilOp	src/glad.cpp	/^PFNGLSTENCILOPPROC glad_glStencilOp = NULL;$/;"	v	typeref:typename:PFNGLSTENCILOPPROC
glad_glStencilOpSeparate	src/glad.cpp	/^PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate = NULL;$/;"	v	typeref:typename:PFNGLSTENCILOPSEPARATEPROC
glad_glTexBuffer	src/glad.cpp	/^PFNGLTEXBUFFERPROC glad_glTexBuffer = NULL;$/;"	v	typeref:typename:PFNGLTEXBUFFERPROC
glad_glTexBufferRange	src/glad.cpp	/^PFNGLTEXBUFFERRANGEPROC glad_glTexBufferRange = NULL;$/;"	v	typeref:typename:PFNGLTEXBUFFERRANGEPROC
glad_glTexCoordP1ui	src/glad.cpp	/^PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP1UIPROC
glad_glTexCoordP1uiv	src/glad.cpp	/^PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP1UIVPROC
glad_glTexCoordP2ui	src/glad.cpp	/^PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP2UIPROC
glad_glTexCoordP2uiv	src/glad.cpp	/^PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP2UIVPROC
glad_glTexCoordP3ui	src/glad.cpp	/^PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP3UIPROC
glad_glTexCoordP3uiv	src/glad.cpp	/^PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP3UIVPROC
glad_glTexCoordP4ui	src/glad.cpp	/^PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP4UIPROC
glad_glTexCoordP4uiv	src/glad.cpp	/^PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv = NULL;$/;"	v	typeref:typename:PFNGLTEXCOORDP4UIVPROC
glad_glTexImage1D	src/glad.cpp	/^PFNGLTEXIMAGE1DPROC glad_glTexImage1D = NULL;$/;"	v	typeref:typename:PFNGLTEXIMAGE1DPROC
glad_glTexImage2D	src/glad.cpp	/^PFNGLTEXIMAGE2DPROC glad_glTexImage2D = NULL;$/;"	v	typeref:typename:PFNGLTEXIMAGE2DPROC
glad_glTexImage2DMultisample	src/glad.cpp	/^PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample = NULL;$/;"	v	typeref:typename:PFNGLTEXIMAGE2DMULTISAMPLEPROC
glad_glTexImage3D	src/glad.cpp	/^PFNGLTEXIMAGE3DPROC glad_glTexImage3D = NULL;$/;"	v	typeref:typename:PFNGLTEXIMAGE3DPROC
glad_glTexImage3DMultisample	src/glad.cpp	/^PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample = NULL;$/;"	v	typeref:typename:PFNGLTEXIMAGE3DMULTISAMPLEPROC
glad_glTexParameterIiv	src/glad.cpp	/^PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv = NULL;$/;"	v	typeref:typename:PFNGLTEXPARAMETERIIVPROC
glad_glTexParameterIuiv	src/glad.cpp	/^PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv = NULL;$/;"	v	typeref:typename:PFNGLTEXPARAMETERIUIVPROC
glad_glTexParameterf	src/glad.cpp	/^PFNGLTEXPARAMETERFPROC glad_glTexParameterf = NULL;$/;"	v	typeref:typename:PFNGLTEXPARAMETERFPROC
glad_glTexParameterfv	src/glad.cpp	/^PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv = NULL;$/;"	v	typeref:typename:PFNGLTEXPARAMETERFVPROC
glad_glTexParameteri	src/glad.cpp	/^PFNGLTEXPARAMETERIPROC glad_glTexParameteri = NULL;$/;"	v	typeref:typename:PFNGLTEXPARAMETERIPROC
glad_glTexParameteriv	src/glad.cpp	/^PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv = NULL;$/;"	v	typeref:typename:PFNGLTEXPARAMETERIVPROC
glad_glTexStorage1D	src/glad.cpp	/^PFNGLTEXSTORAGE1DPROC glad_glTexStorage1D = NULL;$/;"	v	typeref:typename:PFNGLTEXSTORAGE1DPROC
glad_glTexStorage2D	src/glad.cpp	/^PFNGLTEXSTORAGE2DPROC glad_glTexStorage2D = NULL;$/;"	v	typeref:typename:PFNGLTEXSTORAGE2DPROC
glad_glTexStorage2DMultisample	src/glad.cpp	/^PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_glTexStorage2DMultisample = NULL;$/;"	v	typeref:typename:PFNGLTEXSTORAGE2DMULTISAMPLEPROC
glad_glTexStorage3D	src/glad.cpp	/^PFNGLTEXSTORAGE3DPROC glad_glTexStorage3D = NULL;$/;"	v	typeref:typename:PFNGLTEXSTORAGE3DPROC
glad_glTexStorage3DMultisample	src/glad.cpp	/^PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_glTexStorage3DMultisample = NULL;$/;"	v	typeref:typename:PFNGLTEXSTORAGE3DMULTISAMPLEPROC
glad_glTexSubImage1D	src/glad.cpp	/^PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D = NULL;$/;"	v	typeref:typename:PFNGLTEXSUBIMAGE1DPROC
glad_glTexSubImage2D	src/glad.cpp	/^PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D = NULL;$/;"	v	typeref:typename:PFNGLTEXSUBIMAGE2DPROC
glad_glTexSubImage3D	src/glad.cpp	/^PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D = NULL;$/;"	v	typeref:typename:PFNGLTEXSUBIMAGE3DPROC
glad_glTextureBarrier	src/glad.cpp	/^PFNGLTEXTUREBARRIERPROC glad_glTextureBarrier = NULL;$/;"	v	typeref:typename:PFNGLTEXTUREBARRIERPROC
glad_glTextureBuffer	src/glad.cpp	/^PFNGLTEXTUREBUFFERPROC glad_glTextureBuffer = NULL;$/;"	v	typeref:typename:PFNGLTEXTUREBUFFERPROC
glad_glTextureBufferRange	src/glad.cpp	/^PFNGLTEXTUREBUFFERRANGEPROC glad_glTextureBufferRange = NULL;$/;"	v	typeref:typename:PFNGLTEXTUREBUFFERRANGEPROC
glad_glTextureParameterIiv	src/glad.cpp	/^PFNGLTEXTUREPARAMETERIIVPROC glad_glTextureParameterIiv = NULL;$/;"	v	typeref:typename:PFNGLTEXTUREPARAMETERIIVPROC
glad_glTextureParameterIuiv	src/glad.cpp	/^PFNGLTEXTUREPARAMETERIUIVPROC glad_glTextureParameterIuiv = NULL;$/;"	v	typeref:typename:PFNGLTEXTUREPARAMETERIUIVPROC
glad_glTextureParameterf	src/glad.cpp	/^PFNGLTEXTUREPARAMETERFPROC glad_glTextureParameterf = NULL;$/;"	v	typeref:typename:PFNGLTEXTUREPARAMETERFPROC
glad_glTextureParameterfv	src/glad.cpp	/^PFNGLTEXTUREPARAMETERFVPROC glad_glTextureParameterfv = NULL;$/;"	v	typeref:typename:PFNGLTEXTUREPARAMETERFVPROC
glad_glTextureParameteri	src/glad.cpp	/^PFNGLTEXTUREPARAMETERIPROC glad_glTextureParameteri = NULL;$/;"	v	typeref:typename:PFNGLTEXTUREPARAMETERIPROC
glad_glTextureParameteriv	src/glad.cpp	/^PFNGLTEXTUREPARAMETERIVPROC glad_glTextureParameteriv = NULL;$/;"	v	typeref:typename:PFNGLTEXTUREPARAMETERIVPROC
glad_glTextureStorage1D	src/glad.cpp	/^PFNGLTEXTURESTORAGE1DPROC glad_glTextureStorage1D = NULL;$/;"	v	typeref:typename:PFNGLTEXTURESTORAGE1DPROC
glad_glTextureStorage2D	src/glad.cpp	/^PFNGLTEXTURESTORAGE2DPROC glad_glTextureStorage2D = NULL;$/;"	v	typeref:typename:PFNGLTEXTURESTORAGE2DPROC
glad_glTextureStorage2DMultisample	src/glad.cpp	/^PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_glTextureStorage2DMultisample = NULL;$/;"	v	typeref:typename:PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC
glad_glTextureStorage3D	src/glad.cpp	/^PFNGLTEXTURESTORAGE3DPROC glad_glTextureStorage3D = NULL;$/;"	v	typeref:typename:PFNGLTEXTURESTORAGE3DPROC
glad_glTextureStorage3DMultisample	src/glad.cpp	/^PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_glTextureStorage3DMultisample = NULL;$/;"	v	typeref:typename:PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC
glad_glTextureSubImage1D	src/glad.cpp	/^PFNGLTEXTURESUBIMAGE1DPROC glad_glTextureSubImage1D = NULL;$/;"	v	typeref:typename:PFNGLTEXTURESUBIMAGE1DPROC
glad_glTextureSubImage2D	src/glad.cpp	/^PFNGLTEXTURESUBIMAGE2DPROC glad_glTextureSubImage2D = NULL;$/;"	v	typeref:typename:PFNGLTEXTURESUBIMAGE2DPROC
glad_glTextureSubImage3D	src/glad.cpp	/^PFNGLTEXTURESUBIMAGE3DPROC glad_glTextureSubImage3D = NULL;$/;"	v	typeref:typename:PFNGLTEXTURESUBIMAGE3DPROC
glad_glTextureView	src/glad.cpp	/^PFNGLTEXTUREVIEWPROC glad_glTextureView = NULL;$/;"	v	typeref:typename:PFNGLTEXTUREVIEWPROC
glad_glTransformFeedbackBufferBase	src/glad.cpp	/^PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_glTransformFeedbackBufferBase = NULL;$/;"	v	typeref:typename:PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC
glad_glTransformFeedbackBufferRange	src/glad.cpp	/^PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_glTransformFeedbackBufferRange = NULL;$/;"	v	typeref:typename:PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC
glad_glTransformFeedbackVaryings	src/glad.cpp	/^PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings = NULL;$/;"	v	typeref:typename:PFNGLTRANSFORMFEEDBACKVARYINGSPROC
glad_glUniform1d	src/glad.cpp	/^PFNGLUNIFORM1DPROC glad_glUniform1d = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM1DPROC
glad_glUniform1dv	src/glad.cpp	/^PFNGLUNIFORM1DVPROC glad_glUniform1dv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM1DVPROC
glad_glUniform1f	src/glad.cpp	/^PFNGLUNIFORM1FPROC glad_glUniform1f = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM1FPROC
glad_glUniform1fv	src/glad.cpp	/^PFNGLUNIFORM1FVPROC glad_glUniform1fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM1FVPROC
glad_glUniform1i	src/glad.cpp	/^PFNGLUNIFORM1IPROC glad_glUniform1i = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM1IPROC
glad_glUniform1iv	src/glad.cpp	/^PFNGLUNIFORM1IVPROC glad_glUniform1iv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM1IVPROC
glad_glUniform1ui	src/glad.cpp	/^PFNGLUNIFORM1UIPROC glad_glUniform1ui = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM1UIPROC
glad_glUniform1uiv	src/glad.cpp	/^PFNGLUNIFORM1UIVPROC glad_glUniform1uiv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM1UIVPROC
glad_glUniform2d	src/glad.cpp	/^PFNGLUNIFORM2DPROC glad_glUniform2d = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM2DPROC
glad_glUniform2dv	src/glad.cpp	/^PFNGLUNIFORM2DVPROC glad_glUniform2dv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM2DVPROC
glad_glUniform2f	src/glad.cpp	/^PFNGLUNIFORM2FPROC glad_glUniform2f = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM2FPROC
glad_glUniform2fv	src/glad.cpp	/^PFNGLUNIFORM2FVPROC glad_glUniform2fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM2FVPROC
glad_glUniform2i	src/glad.cpp	/^PFNGLUNIFORM2IPROC glad_glUniform2i = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM2IPROC
glad_glUniform2iv	src/glad.cpp	/^PFNGLUNIFORM2IVPROC glad_glUniform2iv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM2IVPROC
glad_glUniform2ui	src/glad.cpp	/^PFNGLUNIFORM2UIPROC glad_glUniform2ui = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM2UIPROC
glad_glUniform2uiv	src/glad.cpp	/^PFNGLUNIFORM2UIVPROC glad_glUniform2uiv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM2UIVPROC
glad_glUniform3d	src/glad.cpp	/^PFNGLUNIFORM3DPROC glad_glUniform3d = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM3DPROC
glad_glUniform3dv	src/glad.cpp	/^PFNGLUNIFORM3DVPROC glad_glUniform3dv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM3DVPROC
glad_glUniform3f	src/glad.cpp	/^PFNGLUNIFORM3FPROC glad_glUniform3f = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM3FPROC
glad_glUniform3fv	src/glad.cpp	/^PFNGLUNIFORM3FVPROC glad_glUniform3fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM3FVPROC
glad_glUniform3i	src/glad.cpp	/^PFNGLUNIFORM3IPROC glad_glUniform3i = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM3IPROC
glad_glUniform3iv	src/glad.cpp	/^PFNGLUNIFORM3IVPROC glad_glUniform3iv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM3IVPROC
glad_glUniform3ui	src/glad.cpp	/^PFNGLUNIFORM3UIPROC glad_glUniform3ui = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM3UIPROC
glad_glUniform3uiv	src/glad.cpp	/^PFNGLUNIFORM3UIVPROC glad_glUniform3uiv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM3UIVPROC
glad_glUniform4d	src/glad.cpp	/^PFNGLUNIFORM4DPROC glad_glUniform4d = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM4DPROC
glad_glUniform4dv	src/glad.cpp	/^PFNGLUNIFORM4DVPROC glad_glUniform4dv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM4DVPROC
glad_glUniform4f	src/glad.cpp	/^PFNGLUNIFORM4FPROC glad_glUniform4f = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM4FPROC
glad_glUniform4fv	src/glad.cpp	/^PFNGLUNIFORM4FVPROC glad_glUniform4fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM4FVPROC
glad_glUniform4i	src/glad.cpp	/^PFNGLUNIFORM4IPROC glad_glUniform4i = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM4IPROC
glad_glUniform4iv	src/glad.cpp	/^PFNGLUNIFORM4IVPROC glad_glUniform4iv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM4IVPROC
glad_glUniform4ui	src/glad.cpp	/^PFNGLUNIFORM4UIPROC glad_glUniform4ui = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM4UIPROC
glad_glUniform4uiv	src/glad.cpp	/^PFNGLUNIFORM4UIVPROC glad_glUniform4uiv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORM4UIVPROC
glad_glUniformBlockBinding	src/glad.cpp	/^PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMBLOCKBINDINGPROC
glad_glUniformMatrix2dv	src/glad.cpp	/^PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2DVPROC
glad_glUniformMatrix2fv	src/glad.cpp	/^PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2FVPROC
glad_glUniformMatrix2x3dv	src/glad.cpp	/^PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2X3DVPROC
glad_glUniformMatrix2x3fv	src/glad.cpp	/^PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2X3FVPROC
glad_glUniformMatrix2x4dv	src/glad.cpp	/^PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2X4DVPROC
glad_glUniformMatrix2x4fv	src/glad.cpp	/^PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2X4FVPROC
glad_glUniformMatrix3dv	src/glad.cpp	/^PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3DVPROC
glad_glUniformMatrix3fv	src/glad.cpp	/^PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3FVPROC
glad_glUniformMatrix3x2dv	src/glad.cpp	/^PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3X2DVPROC
glad_glUniformMatrix3x2fv	src/glad.cpp	/^PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3X2FVPROC
glad_glUniformMatrix3x4dv	src/glad.cpp	/^PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3X4DVPROC
glad_glUniformMatrix3x4fv	src/glad.cpp	/^PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3X4FVPROC
glad_glUniformMatrix4dv	src/glad.cpp	/^PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4DVPROC
glad_glUniformMatrix4fv	src/glad.cpp	/^PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4FVPROC
glad_glUniformMatrix4x2dv	src/glad.cpp	/^PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4X2DVPROC
glad_glUniformMatrix4x2fv	src/glad.cpp	/^PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4X2FVPROC
glad_glUniformMatrix4x3dv	src/glad.cpp	/^PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4X3DVPROC
glad_glUniformMatrix4x3fv	src/glad.cpp	/^PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4X3FVPROC
glad_glUniformSubroutinesuiv	src/glad.cpp	/^PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv = NULL;$/;"	v	typeref:typename:PFNGLUNIFORMSUBROUTINESUIVPROC
glad_glUnmapBuffer	src/glad.cpp	/^PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer = NULL;$/;"	v	typeref:typename:PFNGLUNMAPBUFFERPROC
glad_glUnmapNamedBuffer	src/glad.cpp	/^PFNGLUNMAPNAMEDBUFFERPROC glad_glUnmapNamedBuffer = NULL;$/;"	v	typeref:typename:PFNGLUNMAPNAMEDBUFFERPROC
glad_glUseProgram	src/glad.cpp	/^PFNGLUSEPROGRAMPROC glad_glUseProgram = NULL;$/;"	v	typeref:typename:PFNGLUSEPROGRAMPROC
glad_glUseProgramStages	src/glad.cpp	/^PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages = NULL;$/;"	v	typeref:typename:PFNGLUSEPROGRAMSTAGESPROC
glad_glValidateProgram	src/glad.cpp	/^PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram = NULL;$/;"	v	typeref:typename:PFNGLVALIDATEPROGRAMPROC
glad_glValidateProgramPipeline	src/glad.cpp	/^PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline = NULL;$/;"	v	typeref:typename:PFNGLVALIDATEPROGRAMPIPELINEPROC
glad_glVertexArrayAttribBinding	src/glad.cpp	/^PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_glVertexArrayAttribBinding = NULL;$/;"	v	typeref:typename:PFNGLVERTEXARRAYATTRIBBINDINGPROC
glad_glVertexArrayAttribFormat	src/glad.cpp	/^PFNGLVERTEXARRAYATTRIBFORMATPROC glad_glVertexArrayAttribFormat = NULL;$/;"	v	typeref:typename:PFNGLVERTEXARRAYATTRIBFORMATPROC
glad_glVertexArrayAttribIFormat	src/glad.cpp	/^PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_glVertexArrayAttribIFormat = NULL;$/;"	v	typeref:typename:PFNGLVERTEXARRAYATTRIBIFORMATPROC
glad_glVertexArrayAttribLFormat	src/glad.cpp	/^PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_glVertexArrayAttribLFormat = NULL;$/;"	v	typeref:typename:PFNGLVERTEXARRAYATTRIBLFORMATPROC
glad_glVertexArrayBindingDivisor	src/glad.cpp	/^PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_glVertexArrayBindingDivisor = NULL;$/;"	v	typeref:typename:PFNGLVERTEXARRAYBINDINGDIVISORPROC
glad_glVertexArrayElementBuffer	src/glad.cpp	/^PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_glVertexArrayElementBuffer = NULL;$/;"	v	typeref:typename:PFNGLVERTEXARRAYELEMENTBUFFERPROC
glad_glVertexArrayVertexBuffer	src/glad.cpp	/^PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_glVertexArrayVertexBuffer = NULL;$/;"	v	typeref:typename:PFNGLVERTEXARRAYVERTEXBUFFERPROC
glad_glVertexArrayVertexBuffers	src/glad.cpp	/^PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_glVertexArrayVertexBuffers = NULL;$/;"	v	typeref:typename:PFNGLVERTEXARRAYVERTEXBUFFERSPROC
glad_glVertexAttrib1d	src/glad.cpp	/^PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1DPROC
glad_glVertexAttrib1dv	src/glad.cpp	/^PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1DVPROC
glad_glVertexAttrib1f	src/glad.cpp	/^PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1FPROC
glad_glVertexAttrib1fv	src/glad.cpp	/^PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1FVPROC
glad_glVertexAttrib1s	src/glad.cpp	/^PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1SPROC
glad_glVertexAttrib1sv	src/glad.cpp	/^PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1SVPROC
glad_glVertexAttrib2d	src/glad.cpp	/^PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2DPROC
glad_glVertexAttrib2dv	src/glad.cpp	/^PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2DVPROC
glad_glVertexAttrib2f	src/glad.cpp	/^PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2FPROC
glad_glVertexAttrib2fv	src/glad.cpp	/^PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2FVPROC
glad_glVertexAttrib2s	src/glad.cpp	/^PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2SPROC
glad_glVertexAttrib2sv	src/glad.cpp	/^PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2SVPROC
glad_glVertexAttrib3d	src/glad.cpp	/^PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3DPROC
glad_glVertexAttrib3dv	src/glad.cpp	/^PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3DVPROC
glad_glVertexAttrib3f	src/glad.cpp	/^PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3FPROC
glad_glVertexAttrib3fv	src/glad.cpp	/^PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3FVPROC
glad_glVertexAttrib3s	src/glad.cpp	/^PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3SPROC
glad_glVertexAttrib3sv	src/glad.cpp	/^PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3SVPROC
glad_glVertexAttrib4Nbv	src/glad.cpp	/^PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NBVPROC
glad_glVertexAttrib4Niv	src/glad.cpp	/^PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NIVPROC
glad_glVertexAttrib4Nsv	src/glad.cpp	/^PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NSVPROC
glad_glVertexAttrib4Nub	src/glad.cpp	/^PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NUBPROC
glad_glVertexAttrib4Nubv	src/glad.cpp	/^PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NUBVPROC
glad_glVertexAttrib4Nuiv	src/glad.cpp	/^PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NUIVPROC
glad_glVertexAttrib4Nusv	src/glad.cpp	/^PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NUSVPROC
glad_glVertexAttrib4bv	src/glad.cpp	/^PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4BVPROC
glad_glVertexAttrib4d	src/glad.cpp	/^PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4DPROC
glad_glVertexAttrib4dv	src/glad.cpp	/^PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4DVPROC
glad_glVertexAttrib4f	src/glad.cpp	/^PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4FPROC
glad_glVertexAttrib4fv	src/glad.cpp	/^PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4FVPROC
glad_glVertexAttrib4iv	src/glad.cpp	/^PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4IVPROC
glad_glVertexAttrib4s	src/glad.cpp	/^PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4SPROC
glad_glVertexAttrib4sv	src/glad.cpp	/^PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4SVPROC
glad_glVertexAttrib4ubv	src/glad.cpp	/^PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4UBVPROC
glad_glVertexAttrib4uiv	src/glad.cpp	/^PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4UIVPROC
glad_glVertexAttrib4usv	src/glad.cpp	/^PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4USVPROC
glad_glVertexAttribBinding	src/glad.cpp	/^PFNGLVERTEXATTRIBBINDINGPROC glad_glVertexAttribBinding = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBBINDINGPROC
glad_glVertexAttribDivisor	src/glad.cpp	/^PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBDIVISORPROC
glad_glVertexAttribFormat	src/glad.cpp	/^PFNGLVERTEXATTRIBFORMATPROC glad_glVertexAttribFormat = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBFORMATPROC
glad_glVertexAttribI1i	src/glad.cpp	/^PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI1IPROC
glad_glVertexAttribI1iv	src/glad.cpp	/^PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI1IVPROC
glad_glVertexAttribI1ui	src/glad.cpp	/^PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI1UIPROC
glad_glVertexAttribI1uiv	src/glad.cpp	/^PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI1UIVPROC
glad_glVertexAttribI2i	src/glad.cpp	/^PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI2IPROC
glad_glVertexAttribI2iv	src/glad.cpp	/^PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI2IVPROC
glad_glVertexAttribI2ui	src/glad.cpp	/^PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI2UIPROC
glad_glVertexAttribI2uiv	src/glad.cpp	/^PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI2UIVPROC
glad_glVertexAttribI3i	src/glad.cpp	/^PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI3IPROC
glad_glVertexAttribI3iv	src/glad.cpp	/^PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI3IVPROC
glad_glVertexAttribI3ui	src/glad.cpp	/^PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI3UIPROC
glad_glVertexAttribI3uiv	src/glad.cpp	/^PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI3UIVPROC
glad_glVertexAttribI4bv	src/glad.cpp	/^PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4BVPROC
glad_glVertexAttribI4i	src/glad.cpp	/^PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4IPROC
glad_glVertexAttribI4iv	src/glad.cpp	/^PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4IVPROC
glad_glVertexAttribI4sv	src/glad.cpp	/^PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4SVPROC
glad_glVertexAttribI4ubv	src/glad.cpp	/^PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4UBVPROC
glad_glVertexAttribI4ui	src/glad.cpp	/^PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4UIPROC
glad_glVertexAttribI4uiv	src/glad.cpp	/^PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4UIVPROC
glad_glVertexAttribI4usv	src/glad.cpp	/^PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4USVPROC
glad_glVertexAttribIFormat	src/glad.cpp	/^PFNGLVERTEXATTRIBIFORMATPROC glad_glVertexAttribIFormat = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBIFORMATPROC
glad_glVertexAttribIPointer	src/glad.cpp	/^PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBIPOINTERPROC
glad_glVertexAttribL1d	src/glad.cpp	/^PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL1DPROC
glad_glVertexAttribL1dv	src/glad.cpp	/^PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL1DVPROC
glad_glVertexAttribL2d	src/glad.cpp	/^PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL2DPROC
glad_glVertexAttribL2dv	src/glad.cpp	/^PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL2DVPROC
glad_glVertexAttribL3d	src/glad.cpp	/^PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL3DPROC
glad_glVertexAttribL3dv	src/glad.cpp	/^PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL3DVPROC
glad_glVertexAttribL4d	src/glad.cpp	/^PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL4DPROC
glad_glVertexAttribL4dv	src/glad.cpp	/^PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL4DVPROC
glad_glVertexAttribLFormat	src/glad.cpp	/^PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBLFORMATPROC
glad_glVertexAttribLPointer	src/glad.cpp	/^PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBLPOINTERPROC
glad_glVertexAttribP1ui	src/glad.cpp	/^PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP1UIPROC
glad_glVertexAttribP1uiv	src/glad.cpp	/^PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP1UIVPROC
glad_glVertexAttribP2ui	src/glad.cpp	/^PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP2UIPROC
glad_glVertexAttribP2uiv	src/glad.cpp	/^PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP2UIVPROC
glad_glVertexAttribP3ui	src/glad.cpp	/^PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP3UIPROC
glad_glVertexAttribP3uiv	src/glad.cpp	/^PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP3UIVPROC
glad_glVertexAttribP4ui	src/glad.cpp	/^PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP4UIPROC
glad_glVertexAttribP4uiv	src/glad.cpp	/^PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP4UIVPROC
glad_glVertexAttribPointer	src/glad.cpp	/^PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBPOINTERPROC
glad_glVertexBindingDivisor	src/glad.cpp	/^PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor = NULL;$/;"	v	typeref:typename:PFNGLVERTEXBINDINGDIVISORPROC
glad_glVertexP2ui	src/glad.cpp	/^PFNGLVERTEXP2UIPROC glad_glVertexP2ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXP2UIPROC
glad_glVertexP2uiv	src/glad.cpp	/^PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXP2UIVPROC
glad_glVertexP3ui	src/glad.cpp	/^PFNGLVERTEXP3UIPROC glad_glVertexP3ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXP3UIPROC
glad_glVertexP3uiv	src/glad.cpp	/^PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXP3UIVPROC
glad_glVertexP4ui	src/glad.cpp	/^PFNGLVERTEXP4UIPROC glad_glVertexP4ui = NULL;$/;"	v	typeref:typename:PFNGLVERTEXP4UIPROC
glad_glVertexP4uiv	src/glad.cpp	/^PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv = NULL;$/;"	v	typeref:typename:PFNGLVERTEXP4UIVPROC
glad_glViewport	src/glad.cpp	/^PFNGLVIEWPORTPROC glad_glViewport = NULL;$/;"	v	typeref:typename:PFNGLVIEWPORTPROC
glad_glViewportArrayv	src/glad.cpp	/^PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv = NULL;$/;"	v	typeref:typename:PFNGLVIEWPORTARRAYVPROC
glad_glViewportIndexedf	src/glad.cpp	/^PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf = NULL;$/;"	v	typeref:typename:PFNGLVIEWPORTINDEXEDFPROC
glad_glViewportIndexedfv	src/glad.cpp	/^PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv = NULL;$/;"	v	typeref:typename:PFNGLVIEWPORTINDEXEDFVPROC
glad_glWaitSync	src/glad.cpp	/^PFNGLWAITSYNCPROC glad_glWaitSync = NULL;$/;"	v	typeref:typename:PFNGLWAITSYNCPROC
glyf	src/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
glyph1	src/imgui/imstb_truetype.h	/^   int glyph1; \/\/ use stbtt_FindGlyphIndex$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
glyph2	src/imgui/imstb_truetype.h	/^   int glyph2;$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
gpos	src/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
gsubrs	src/imgui/imstb_truetype.h	/^   stbtt__buf gsubrs;                 \/\/ global charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
h	src/imgui/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
h	src/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
h	src/imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon80c56a9c0808	typeref:typename:int
h_oversample	src/imgui/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon80c56a9c0508	typeref:typename:unsigned char
h_oversample	src/imgui/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
has_ext	src/glad.cpp	/^static int has_ext(const char *ext) {$/;"	f	typeref:typename:int	file:
has_preferred_x	src/imgui/imstb_textedit.h	/^   unsigned char has_preferred_x;$/;"	m	struct:__anonb965c0a50308	typeref:typename:unsigned char
head	src/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
head	src/imgui/imstb_truetype.h	/^   struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap_chunk *
height	src/imgui/imstb_rectpack.h	/^   int height;$/;"	m	struct:stbrp_context	typeref:typename:int
height	src/imgui/imstb_textedit.h	/^   float height; \/\/ height of line$/;"	m	struct:__anonb965c0a50508	typeref:typename:float
height	src/imgui/imstb_truetype.h	/^   int   height;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
height	src/imgui/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anon80c56a9c1108	typeref:typename:int
heuristic	src/imgui/imstb_rectpack.h	/^   int heuristic;$/;"	m	struct:stbrp_context	typeref:typename:int
hhea	src/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
hmtx	src/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
i16	src/typedefs.h	/^typedef int16_t  i16; $/;"	t	typeref:typename:int16_t
i32	src/typedefs.h	/^typedef int32_t  i32; $/;"	t	typeref:typename:int32_t
i64	src/typedefs.h	/^typedef int64_t  i64; $/;"	t	typeref:typename:int64_t
i8	src/typedefs.h	/^typedef int8_t    i8; $/;"	t	typeref:typename:int8_t
id	src/imgui/imstb_rectpack.h	/^   int            id;$/;"	m	struct:stbrp_rect	typeref:typename:int
id	src/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
imgui_layer	src/display.h	/^    ImguiLayer *imgui_layer = nullptr;$/;"	m	class:Display	typeref:typename:ImguiLayer *
indexToLocFormat	src/imgui/imstb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
index_from_ptr	src/imgui/imgui_internal.h	/^    inline int  index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it < DataEnd); con/;"	f	struct:ImSpan	typeref:typename:int
index_map	src/imgui/imstb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
init_mode	src/imgui/imstb_rectpack.h	/^   int init_mode;$/;"	m	struct:stbrp_context	typeref:typename:int
initialized	src/imgui/imstb_textedit.h	/^   unsigned char initialized;$/;"	m	struct:__anonb965c0a50308	typeref:typename:unsigned char
insert_length	src/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  insert_length;$/;"	m	struct:__anonb965c0a50108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
insert_mode	src/imgui/imstb_textedit.h	/^   unsigned char insert_mode;$/;"	m	struct:__anonb965c0a50308	typeref:typename:unsigned char
instruction_table	src/m6502_instructions.cpp	/^Instruction instruction_table[256];$/;"	v	typeref:typename:Instruction[256]
invert	src/imgui/imstb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge	typeref:typename:int
irq	src/m6502.cpp	/^void Cpu::irq() $/;"	f	class:Cpu	typeref:typename:void
is_separator	src/imgui/imgui_widgets.cpp	/^static bool is_separator(unsigned int c)                                        { return ImCharI/;"	f	namespace:ImStb	typeref:typename:bool	file:
is_word_boundary	src/imgui/imstb_textedit.h	/^static int is_word_boundary( STB_TEXTEDIT_STRING *str, int idx )$/;"	f	typeref:typename:int
is_word_boundary_from_left	src/imgui/imgui_widgets.cpp	/^static int  is_word_boundary_from_left(ImGuiInputTextState* obj, int idx)       { if (obj->Flags/;"	f	namespace:ImStb	typeref:typename:int	file:
is_word_boundary_from_right	src/imgui/imgui_widgets.cpp	/^static int  is_word_boundary_from_right(ImGuiInputTextState* obj, int idx)      { if (obj->Flags/;"	f	namespace:ImStb	typeref:typename:int	file:
kern	src/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
length	src/imgui/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anonb965c0a50508	typeref:typename:int
libGL	src/glad.cpp	/^static HMODULE libGL;$/;"	v	typeref:typename:HMODULE	file:
libGL	src/glad.cpp	/^static void* libGL;$/;"	v	typeref:typename:void *	file:
load_GL_VERSION_1_0	src/glad.cpp	/^static void load_GL_VERSION_1_0(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_1_1	src/glad.cpp	/^static void load_GL_VERSION_1_1(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_1_2	src/glad.cpp	/^static void load_GL_VERSION_1_2(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_1_3	src/glad.cpp	/^static void load_GL_VERSION_1_3(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_1_4	src/glad.cpp	/^static void load_GL_VERSION_1_4(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_1_5	src/glad.cpp	/^static void load_GL_VERSION_1_5(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_2_0	src/glad.cpp	/^static void load_GL_VERSION_2_0(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_2_1	src/glad.cpp	/^static void load_GL_VERSION_2_1(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_3_0	src/glad.cpp	/^static void load_GL_VERSION_3_0(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_3_1	src/glad.cpp	/^static void load_GL_VERSION_3_1(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_3_2	src/glad.cpp	/^static void load_GL_VERSION_3_2(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_3_3	src/glad.cpp	/^static void load_GL_VERSION_3_3(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_4_0	src/glad.cpp	/^static void load_GL_VERSION_4_0(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_4_1	src/glad.cpp	/^static void load_GL_VERSION_4_1(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_4_2	src/glad.cpp	/^static void load_GL_VERSION_4_2(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_4_3	src/glad.cpp	/^static void load_GL_VERSION_4_3(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_4_4	src/glad.cpp	/^static void load_GL_VERSION_4_4(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_GL_VERSION_4_5	src/glad.cpp	/^static void load_GL_VERSION_4_5(GLADloadproc load) {$/;"	f	typeref:typename:void	file:
load_from_file	src/memory.cpp	/^int Memory::load_from_file(u16 dest, const std::string &path)$/;"	f	class:Memory	typeref:typename:int
loca	src/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
loop	src/display.cpp	/^int Display::loop()$/;"	f	class:Display	typeref:typename:int
main	src/main.cpp	/^int main(int argc, char *argv[]) $/;"	f	typeref:typename:int
main_clipboard	src/imgui/imgui.cpp	/^static PasteboardRef main_clipboard = 0;$/;"	v	typeref:typename:PasteboardRef	file:
make_shader_program	src/display.cpp	/^unsigned int make_shader_program(const char *vert_shader_src, const char *frag_shader_src)$/;"	f	typeref:typename:unsigned int
max_loaded_major	src/glad.cpp	/^static int max_loaded_major;$/;"	v	typeref:typename:int	file:
max_loaded_minor	src/glad.cpp	/^static int max_loaded_minor;$/;"	v	typeref:typename:int	file:
max_x	src/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon80c56a9c0f08	typeref:typename:stbtt_int32
max_y	src/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon80c56a9c0f08	typeref:typename:stbtt_int32
mem	src/display.h	/^    const Memory &mem;$/;"	m	class:Display	typeref:typename:const Memory &
mem	src/imgui_layer.h	/^    const Memory &mem;$/;"	m	class:ImguiLayer	typeref:typename:const Memory &
mem	src/m6502.h	/^    Memory &mem;$/;"	m	struct:Cpu	typeref:typename:Memory &
mem	src/timer.h	/^    const Memory &mem;$/;"	m	struct:Timer	typeref:typename:const Memory &
min_x	src/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon80c56a9c0f08	typeref:typename:stbtt_int32
min_y	src/imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon80c56a9c0f08	typeref:typename:stbtt_int32
mnemonic	src/m6502.h	/^    std::string mnemonic;$/;"	m	struct:Instruction	typeref:typename:std::string
n_cycles	src/m6502.h	/^    u8 n_cycles;$/;"	m	struct:Instruction	typeref:typename:u8
next	src/imgui/imstb_rectpack.h	/^   stbrp_node  *next;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_node *
next	src/imgui/imstb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge *
next	src/imgui/imstb_truetype.h	/^   struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk *
next_chunk	src/imgui/imgui_internal.h	/^    T*      next_chunk(T* p)            { size_t HDR_SZ = 4; IM_ASSERT(p >= begin() && p < end()/;"	f	struct:ImChunkStream	typeref:typename:T *
nmi	src/m6502.cpp	/^void Cpu::nmi()$/;"	f	class:Cpu	typeref:typename:void
nodes	src/imgui/imstb_truetype.h	/^   void  *nodes;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
ntsc_decode_pass_a_frag_shader_source	src/display.h	/^    const char *ntsc_decode_pass_a_frag_shader_source =$/;"	m	class:Display	typeref:typename:const char *
ntsc_decode_pass_a_program	src/display.h	/^    unsigned int ntsc_decode_pass_a_program;$/;"	m	class:Display	typeref:typename:unsigned int
ntsc_decode_pass_b_frag_shader_source	src/display.h	/^    const char *ntsc_decode_pass_b_frag_shader_source =$/;"	m	class:Display	typeref:typename:const char *
ntsc_decode_pass_b_program	src/display.h	/^    unsigned int ntsc_decode_pass_b_program;$/;"	m	class:Display	typeref:typename:unsigned int
ntsc_encode_frag_shader_source	src/display.h	/^    const char *ntsc_encode_frag_shader_source =$/;"	m	class:Display	typeref:typename:const char *
ntsc_encode_program	src/display.h	/^    unsigned int ntsc_encode_program;$/;"	m	class:Display	typeref:typename:unsigned int
numGlyphs	src/imgui/imstb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
num_chars	src/imgui/imstb_textedit.h	/^   int num_chars;$/;"	m	struct:__anonb965c0a50408	typeref:typename:int
num_chars	src/imgui/imstb_truetype.h	/^   int num_chars;$/;"	m	struct:__anon80c56a9c0508	typeref:typename:int
num_exts_i	src/glad.cpp	/^static int num_exts_i = 0;$/;"	v	typeref:typename:int	file:
num_nodes	src/imgui/imstb_rectpack.h	/^   int num_nodes;$/;"	m	struct:stbrp_context	typeref:typename:int
num_remaining_in_head_chunk	src/imgui/imstb_truetype.h	/^   int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap	typeref:typename:int
num_vertices	src/imgui/imstb_truetype.h	/^   int num_vertices;$/;"	m	struct:__anon80c56a9c0f08	typeref:typename:int
offscreen_fbo	src/display.h	/^    unsigned int offscreen_fbo;$/;"	m	class:Display	typeref:typename:unsigned int
offset_from_ptr	src/imgui/imgui_internal.h	/^    int     offset_from_ptr(const T* p) { IM_ASSERT(p >= begin() && p < end()); const ptrdiff_t /;"	f	struct:ImChunkStream	typeref:typename:int
op	src/m6502.h	/^    u8 (*op)(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu * cpu)); \/\/ instr.$/;"	m	struct:Instruction	typeref:typename:u8 (*)(Cpu * cpu,AddrModeRet (* addr_mode)(Cpu * cpu))
op_adc	src/m6502_instructions.cpp	/^u8 op_adc(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_and	src/m6502_instructions.cpp	/^u8 op_and(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_asl	src/m6502_instructions.cpp	/^u8 op_asl(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bcc	src/m6502_instructions.cpp	/^u8 op_bcc(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bcs	src/m6502_instructions.cpp	/^u8 op_bcs(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_beq	src/m6502_instructions.cpp	/^u8 op_beq(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bit	src/m6502_instructions.cpp	/^u8 op_bit(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bmi	src/m6502_instructions.cpp	/^u8 op_bmi(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bne	src/m6502_instructions.cpp	/^u8 op_bne(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bpl	src/m6502_instructions.cpp	/^u8 op_bpl(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_brk	src/m6502_instructions.cpp	/^u8 op_brk(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bvc	src/m6502_instructions.cpp	/^u8 op_bvc(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_bvs	src/m6502_instructions.cpp	/^u8 op_bvs(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_clc	src/m6502_instructions.cpp	/^u8 op_clc(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_cld	src/m6502_instructions.cpp	/^u8 op_cld(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_cli	src/m6502_instructions.cpp	/^u8 op_cli(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_clv	src/m6502_instructions.cpp	/^u8 op_clv(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_cmp	src/m6502_instructions.cpp	/^u8 op_cmp(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_cpx	src/m6502_instructions.cpp	/^u8 op_cpx(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_cpy	src/m6502_instructions.cpp	/^u8 op_cpy(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_dec	src/m6502_instructions.cpp	/^u8 op_dec(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_dex	src/m6502_instructions.cpp	/^u8 op_dex(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_dey	src/m6502_instructions.cpp	/^u8 op_dey(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_eor	src/m6502_instructions.cpp	/^u8 op_eor(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_inc	src/m6502_instructions.cpp	/^u8 op_inc(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_inx	src/m6502_instructions.cpp	/^u8 op_inx(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_iny	src/m6502_instructions.cpp	/^u8 op_iny(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_jmp	src/m6502_instructions.cpp	/^u8 op_jmp(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_jsr	src/m6502_instructions.cpp	/^u8 op_jsr(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_lda	src/m6502_instructions.cpp	/^u8 op_lda(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_ldx	src/m6502_instructions.cpp	/^u8 op_ldx(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_ldy	src/m6502_instructions.cpp	/^u8 op_ldy(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_lsr	src/m6502_instructions.cpp	/^u8 op_lsr(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_nop	src/m6502_instructions.cpp	/^u8 op_nop(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_ora	src/m6502_instructions.cpp	/^u8 op_ora(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_pha	src/m6502_instructions.cpp	/^u8 op_pha(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_php	src/m6502_instructions.cpp	/^u8 op_php(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_pla	src/m6502_instructions.cpp	/^u8 op_pla(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_plp	src/m6502_instructions.cpp	/^u8 op_plp(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_rol	src/m6502_instructions.cpp	/^u8 op_rol(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_ror	src/m6502_instructions.cpp	/^u8 op_ror(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_rti	src/m6502_instructions.cpp	/^u8 op_rti(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_rts	src/m6502_instructions.cpp	/^u8 op_rts(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_sbc	src/m6502_instructions.cpp	/^u8 op_sbc(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_sec	src/m6502_instructions.cpp	/^u8 op_sec(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_sed	src/m6502_instructions.cpp	/^u8 op_sed(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_sei	src/m6502_instructions.cpp	/^u8 op_sei(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_sta	src/m6502_instructions.cpp	/^u8 op_sta(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_stx	src/m6502_instructions.cpp	/^u8 op_stx(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_sty	src/m6502_instructions.cpp	/^u8 op_sty(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_tax	src/m6502_instructions.cpp	/^u8 op_tax(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_tay	src/m6502_instructions.cpp	/^u8 op_tay(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_tsx	src/m6502_instructions.cpp	/^u8 op_tsx(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_txa	src/m6502_instructions.cpp	/^u8 op_txa(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_txs	src/m6502_instructions.cpp	/^u8 op_txs(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
op_tya	src/m6502_instructions.cpp	/^u8 op_tya(Cpu *cpu, AddrModeRet (*addr_mode)(Cpu *cpu)) $/;"	f	typeref:typename:u8
open_gl	src/glad.cpp	/^int open_gl(void) {$/;"	f	typeref:typename:int	file:
operator *	src/imgui/imgui_internal.h	/^static inline ImVec2 operator*(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(/;"	f	typeref:typename:ImVec2
operator *	src/imgui/imgui_internal.h	/^static inline ImVec2 operator*(const ImVec2& lhs, const float rhs)              { return ImVec2(/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF ImVec2
operator *	src/imgui/imgui_internal.h	/^static inline ImVec4 operator*(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(/;"	f	typeref:typename:ImVec4
operator *=	src/imgui/imgui_internal.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x *= rhs.x/;"	f	typeref:typename:ImVec2 &
operator *=	src/imgui/imgui_internal.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const float rhs)                  { lhs.x *= rhs; /;"	f	typeref:typename:ImVec2 &
operator +	src/imgui/imgui_internal.h	/^static inline ImVec2 operator+(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(/;"	f	typeref:typename:ImVec2
operator +	src/imgui/imgui_internal.h	/^static inline ImVec4 operator+(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(/;"	f	typeref:typename:ImVec4
operator +=	src/imgui/imgui_internal.h	/^static inline ImVec2& operator+=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x += rhs.x/;"	f	typeref:typename:ImVec2 &
operator -	src/imgui/imgui_internal.h	/^static inline ImVec2 operator-(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(/;"	f	typeref:typename:ImVec2
operator -	src/imgui/imgui_internal.h	/^static inline ImVec4 operator-(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(/;"	f	typeref:typename:ImVec4
operator -=	src/imgui/imgui_internal.h	/^static inline ImVec2& operator-=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x -= rhs.x/;"	f	typeref:typename:ImVec2 &
operator /	src/imgui/imgui_internal.h	/^static inline ImVec2 operator\/(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2/;"	f	typeref:typename:ImVec2
operator /	src/imgui/imgui_internal.h	/^static inline ImVec2 operator\/(const ImVec2& lhs, const float rhs)              { return ImVec2/;"	f	typeref:typename:ImVec2
operator /=	src/imgui/imgui_internal.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x \/= rhs/;"	f	typeref:typename:ImVec2 &
operator /=	src/imgui/imgui_internal.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const float rhs)                  { lhs.x \/= rhs/;"	f	typeref:typename:ImVec2 &
operator []	src/imgui/imgui_internal.h	/^    bool            operator[](int n) const     { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:bool
operator []	src/imgui/imgui_internal.h	/^    inline T&           operator[](int i)           { T* p = Data + i; IM_ASSERT(p >= Data && p /;"	f	struct:ImSpan	typeref:typename:T &
operator []	src/imgui/imgui_internal.h	/^    inline const T&     operator[](int i) const     { const T* p = Data + i; IM_ASSERT(p >= Data/;"	f	struct:ImSpan	typeref:typename:const T &
operator []	src/memory.cpp	/^u8 &Memory::operator[](u16 address) $/;"	f	class:Memory	typeref:typename:u8 &
operator []	src/memory.cpp	/^u8 Memory::operator[](u16 address) const $/;"	f	class:Memory	typeref:typename:u8
pack_info	src/imgui/imstb_truetype.h	/^   void *pack_info;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
padding	src/imgui/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon80c56a9c0708	typeref:typename:unsigned char
padding	src/imgui/imstb_truetype.h	/^   int   padding;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
padding1	src/imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anonb965c0a50308	typeref:typename:unsigned char
padding2	src/imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anonb965c0a50308	typeref:typename:unsigned char
padding3	src/imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anonb965c0a50308	typeref:typename:unsigned char
pass_through_vert_shader_source	src/display.h	/^    const char *pass_through_vert_shader_source =$/;"	m	class:Display	typeref:typename:const char *
pixels	src/imgui/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anon80c56a9c0808	typeref:typename:unsigned char *
pixels	src/imgui/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned char *
populate_instruction_table	src/m6502_instructions.cpp	/^void populate_instruction_table() $/;"	f	typeref:typename:void
pos	src/display.h	/^    glm::vec3 pos;$/;"	m	struct:Vertex	typeref:typename:glm::vec3
post_process_frag_shader_source	src/display.h	/^    const char *post_process_frag_shader_source =$/;"	m	class:Display	typeref:typename:const char *
post_process_program	src/display.h	/^    unsigned int post_process_program;$/;"	m	class:Display	typeref:typename:unsigned int
preferred_x	src/imgui/imstb_textedit.h	/^   float preferred_x; \/\/ this determines where the cursor up\/down tries to seek to along x$/;"	m	struct:__anonb965c0a50308	typeref:typename:float
prescaler_clock_sum	src/timer.h	/^    u16 prescaler_clock_sum; \/\/ keep track of the number of clock cycles$/;"	m	struct:Timer	typeref:typename:u16
prescaler_map	src/timer.cpp	/^const u16 prescaler_map[8] = {$/;"	v	typeref:typename:const u16[8]
prev_first	src/imgui/imstb_textedit.h	/^   int prev_first;  \/\/ first char of previous row$/;"	m	struct:__anonb965c0a50508	typeref:typename:int
prev_link	src/imgui/imstb_rectpack.h	/^   stbrp_node **prev_link;$/;"	m	struct:__anon69592cc70308	typeref:typename:stbrp_node **
print_status	src/m6502.cpp	/^void Cpu::print_status() $/;"	f	class:Cpu	typeref:typename:void
proggy_clean_ttf_compressed_data_base85	src/imgui/imgui_draw.cpp	/^static const char proggy_clean_ttf_compressed_data_base85[11980 + 1] =$/;"	v	typeref:typename:const char[]	file:
ptr_from_offset	src/imgui/imgui_internal.h	/^    T*      ptr_from_offset(int off)    { IM_ASSERT(off >= 4 && off < Buf.Size); return (T*)(voi/;"	f	struct:ImChunkStream	typeref:typename:T *
pvertices	src/imgui/imstb_truetype.h	/^   stbtt_vertex *pvertices;$/;"	m	struct:__anon80c56a9c0f08	typeref:typename:stbtt_vertex *
rect_height_compare	src/imgui/imstb_rectpack.h	/^static int STBRP__CDECL rect_height_compare(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
rect_original_order	src/imgui/imstb_rectpack.h	/^static int STBRP__CDECL rect_original_order(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
redo_char_point	src/imgui/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anonb965c0a50208	typeref:typename:int
redo_point	src/imgui/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anonb965c0a50208	typeref:typename:short
reset	src/m6502.cpp	/^void Cpu::reset() $/;"	f	class:Cpu	typeref:typename:void
resize_border_def	src/imgui/imgui.cpp	/^static const ImGuiResizeBorderDef resize_border_def[4] =$/;"	v	typeref:typename:const ImGuiResizeBorderDef[4]	file:
resize_grip_def	src/imgui/imgui.cpp	/^static const ImGuiResizeGripDef resize_grip_def[4] =$/;"	v	typeref:typename:const ImGuiResizeGripDef[4]	file:
row_count_per_page	src/imgui/imstb_textedit.h	/^   int row_count_per_page;$/;"	m	struct:__anonb965c0a50308	typeref:typename:int
s0	src/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon80c56a9c0308	typeref:typename:float
s1	src/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon80c56a9c0308	typeref:typename:float
s_current_sort_specs	src/imgui/imgui_demo.cpp	/^    static const ImGuiTableSortSpecs* s_current_sort_specs;$/;"	m	struct:__anonecc473760111::MyItem	typeref:typename:const ImGuiTableSortSpecs *	file:
s_current_sort_specs	src/imgui/imgui_demo.cpp	/^const ImGuiTableSortSpecs* MyItem::s_current_sort_specs = NULL;$/;"	m	class:__anonecc473760111::MyItem	typeref:typename:const ImGuiTableSortSpecs *
select_end	src/imgui/imstb_textedit.h	/^   int select_end;$/;"	m	struct:__anonb965c0a50308	typeref:typename:int
select_start	src/imgui/imstb_textedit.h	/^   int select_start;          \/\/ selection start point$/;"	m	struct:__anonb965c0a50308	typeref:typename:int
set	src/imgui/imgui_internal.h	/^    inline void         set(T* data, T* data_end)   { Data = data; DataEnd = data_end; }$/;"	f	struct:ImSpan	typeref:typename:void
set	src/imgui/imgui_internal.h	/^    inline void         set(T* data, int size)      { Data = data; DataEnd = data + size; }$/;"	f	struct:ImSpan	typeref:typename:void
set_status_bit	src/m6502_instructions.cpp	/^void set_status_bit(Cpu *cpu, u8 bit_pos, bool value) $/;"	f	typeref:typename:void
setup	src/display.cpp	/^int Display::setup() $/;"	f	class:Display	typeref:typename:int
setup	src/imgui_layer.cpp	/^void ImguiLayer::setup(GLFWwindow *window, const char *glsl_version) const$/;"	f	class:ImguiLayer	typeref:typename:void
setup_frambuffer_gen_program	src/display.cpp	/^void Display::setup_frambuffer_gen_program()$/;"	f	class:Display	typeref:typename:void
setup_ntsc_decode_pass_a_program	src/display.cpp	/^void Display::setup_ntsc_decode_pass_a_program()$/;"	f	class:Display	typeref:typename:void
setup_ntsc_decode_pass_b_program	src/display.cpp	/^void Display::setup_ntsc_decode_pass_b_program()$/;"	f	class:Display	typeref:typename:void
setup_ntsc_encode_program	src/display.cpp	/^void Display::setup_ntsc_encode_program()$/;"	f	class:Display	typeref:typename:void
setup_post_process_program	src/display.cpp	/^void Display::setup_post_process_program()$/;"	f	class:Display	typeref:typename:void
shutdown	src/imgui_layer.cpp	/^void ImguiLayer::shutdown() const$/;"	f	class:ImguiLayer	typeref:typename:void
single_line	src/imgui/imstb_textedit.h	/^   unsigned char single_line;$/;"	m	struct:__anonb965c0a50308	typeref:typename:unsigned char
size	src/imgui/imgui_internal.h	/^    inline int          size() const                { return (int)(ptrdiff_t)(DataEnd - Data); }$/;"	f	struct:ImSpan	typeref:typename:int
size	src/imgui/imgui_internal.h	/^    int     size() const                { return Buf.Size; }$/;"	f	struct:ImChunkStream	typeref:typename:int
size	src/imgui/imstb_truetype.h	/^   int size;$/;"	m	struct:__anon80c56a9c0108	typeref:typename:int
size_in_bytes	src/imgui/imgui_internal.h	/^    inline int          size_in_bytes() const       { return (int)(ptrdiff_t)(DataEnd - Data) * /;"	f	struct:ImSpan	typeref:typename:int
skip_missing	src/imgui/imstb_truetype.h	/^   int   skip_missing;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
snprintf	src/imgui/imgui_demo.cpp	/^#define snprintf /;"	d	file:
split	src/imgui/imgui.cpp	/^void ImGuiTextFilter::ImGuiTextRange::split(char separator, ImVector<ImGuiTextRange>* out) const$/;"	f	class:ImGuiTextFilter::ImGuiTextRange	typeref:typename:void
stack_pop	src/m6502_instructions.cpp	/^u8 stack_pop(Cpu *cpu)$/;"	f	typeref:typename:u8
stack_push	src/m6502_instructions.cpp	/^void stack_push(Cpu *cpu, u8 byte)$/;"	f	typeref:typename:void
start	src/display.cpp	/^std::thread Display::start() $/;"	f	class:Display	typeref:typename:std::thread
started	src/imgui/imstb_truetype.h	/^   int started;$/;"	m	struct:__anon80c56a9c0f08	typeref:typename:int
stb__barrier_in_b	src/imgui/imgui_draw.cpp	/^static const unsigned char *stb__barrier_in_b;$/;"	v	typeref:typename:const unsigned char *	file:
stb__barrier_out_b	src/imgui/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__barrier_out_e	src/imgui/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__dout	src/imgui/imgui_draw.cpp	/^static unsigned char *stb__dout;$/;"	v	typeref:typename:unsigned char *	file:
stb__in2	src/imgui/imgui_draw.cpp	/^#define stb__in2(/;"	d	file:
stb__in3	src/imgui/imgui_draw.cpp	/^#define stb__in3(/;"	d	file:
stb__in4	src/imgui/imgui_draw.cpp	/^#define stb__in4(/;"	d	file:
stb__lit	src/imgui/imgui_draw.cpp	/^static void stb__lit(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb__match	src/imgui/imgui_draw.cpp	/^static void stb__match(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb_adler32	src/imgui/imgui_draw.cpp	/^static unsigned int stb_adler32(unsigned int adler32, unsigned char *buffer, unsigned int buflen/;"	f	typeref:typename:unsigned int	file:
stb_decompress	src/imgui/imgui_draw.cpp	/^static unsigned int stb_decompress(unsigned char *output, const unsigned char *i, unsigned int \//;"	f	typeref:typename:unsigned int	file:
stb_decompress_length	src/imgui/imgui_draw.cpp	/^static unsigned int stb_decompress_length(const unsigned char *input)$/;"	f	typeref:typename:unsigned int	file:
stb_decompress_token	src/imgui/imgui_draw.cpp	/^static const unsigned char *stb_decompress_token(const unsigned char *i)$/;"	f	typeref:typename:const unsigned char *	file:
stb_text_create_undo_record	src/imgui/imstb_textedit.h	/^static StbUndoRecord *stb_text_create_undo_record(StbUndoState *state, int numchars)$/;"	f	typeref:typename:StbUndoRecord *
stb_text_createundo	src/imgui/imstb_textedit.h	/^static STB_TEXTEDIT_CHARTYPE *stb_text_createundo(StbUndoState *state, int pos, int insert_len, /;"	f	typeref:typename:STB_TEXTEDIT_CHARTYPE *
stb_text_locate_coord	src/imgui/imstb_textedit.h	/^static int stb_text_locate_coord(STB_TEXTEDIT_STRING *str, float x, float y)$/;"	f	typeref:typename:int
stb_text_makeundo_delete	src/imgui/imstb_textedit.h	/^static void stb_text_makeundo_delete(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int whe/;"	f	typeref:typename:void
stb_text_makeundo_insert	src/imgui/imstb_textedit.h	/^static void stb_text_makeundo_insert(STB_TexteditState *state, int where, int length)$/;"	f	typeref:typename:void
stb_text_makeundo_replace	src/imgui/imstb_textedit.h	/^static void stb_text_makeundo_replace(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int wh/;"	f	typeref:typename:void
stb_text_redo	src/imgui/imstb_textedit.h	/^static void stb_text_redo(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_text_undo	src/imgui/imstb_textedit.h	/^static void stb_text_undo(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clamp	src/imgui/imstb_textedit.h	/^static void stb_textedit_clamp(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clear_state	src/imgui/imstb_textedit.h	/^static void stb_textedit_clear_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_click	src/imgui/imstb_textedit.h	/^static void stb_textedit_click(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, floa/;"	f	typeref:typename:void
stb_textedit_cut	src/imgui/imstb_textedit.h	/^static int stb_textedit_cut(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:int
stb_textedit_delete	src/imgui/imstb_textedit.h	/^static void stb_textedit_delete(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where, i/;"	f	typeref:typename:void
stb_textedit_delete_selection	src/imgui/imstb_textedit.h	/^static void stb_textedit_delete_selection(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_redo	src/imgui/imstb_textedit.h	/^static void stb_textedit_discard_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_undo	src/imgui/imstb_textedit.h	/^static void stb_textedit_discard_undo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_drag	src/imgui/imstb_textedit.h	/^static void stb_textedit_drag(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, float/;"	f	typeref:typename:void
stb_textedit_find_charpos	src/imgui/imstb_textedit.h	/^static void stb_textedit_find_charpos(StbFindState *find, STB_TEXTEDIT_STRING *str, int n, int s/;"	f	typeref:typename:void
stb_textedit_flush_redo	src/imgui/imstb_textedit.h	/^static void stb_textedit_flush_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_initialize_state	src/imgui/imstb_textedit.h	/^static void stb_textedit_initialize_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_key	src/imgui/imstb_textedit.h	/^static void stb_textedit_key(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_KE/;"	f	typeref:typename:void
stb_textedit_move_to_first	src/imgui/imstb_textedit.h	/^static void stb_textedit_move_to_first(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_last	src/imgui/imstb_textedit.h	/^static void stb_textedit_move_to_last(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_word_next	src/imgui/imstb_textedit.h	/^static int stb_textedit_move_to_word_next( STB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_move_to_word_previous	src/imgui/imstb_textedit.h	/^static int stb_textedit_move_to_word_previous( STB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_paste	src/imgui/imstb_textedit.h	/^static int stb_textedit_paste(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_C/;"	f	typeref:typename:int
stb_textedit_paste_internal	src/imgui/imstb_textedit.h	/^static int stb_textedit_paste_internal(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_T/;"	f	typeref:typename:int
stb_textedit_prep_selection_at_cursor	src/imgui/imstb_textedit.h	/^static void stb_textedit_prep_selection_at_cursor(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_replace	src/imgui/imgui_widgets.cpp	/^static void stb_textedit_replace(ImGuiInputTextState* str, STB_TexteditState* state, const STB_T/;"	f	namespace:ImStb	typeref:typename:void	file:
stb_textedit_sortselection	src/imgui/imstb_textedit.h	/^static void stb_textedit_sortselection(STB_TexteditState *state)$/;"	f	typeref:typename:void
stbrp__findresult	src/imgui/imstb_rectpack.h	/^} stbrp__findresult;$/;"	t	typeref:struct:__anon69592cc70308
stbrp__skyline_find_best_pos	src/imgui/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_find_best_pos(stbrp_context *c, int width, int height)$/;"	f	typeref:typename:stbrp__findresult
stbrp__skyline_find_min_y	src/imgui/imstb_rectpack.h	/^static int stbrp__skyline_find_min_y(stbrp_context *c, stbrp_node *first, int x0, int width, int/;"	f	typeref:typename:int
stbrp__skyline_pack_rectangle	src/imgui/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_pack_rectangle(stbrp_context *context, int width, int he/;"	f	typeref:typename:stbrp__findresult
stbrp_context	src/imgui/imstb_rectpack.h	/^struct stbrp_context$/;"	s
stbrp_context	src/imgui/imstb_rectpack.h	/^typedef struct stbrp_context stbrp_context;$/;"	t	typeref:struct:stbrp_context
stbrp_context	src/imgui/imstb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anon80c56a9c1108
stbrp_coord	src/imgui/imstb_rectpack.h	/^typedef int            stbrp_coord;$/;"	t	typeref:typename:int
stbrp_coord	src/imgui/imstb_truetype.h	/^typedef int stbrp_coord;$/;"	t	typeref:typename:int
stbrp_init_target	src/imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_init_target(stbrp_context *context, int width, int height, stbrp_node *node/;"	f	typeref:typename:STBRP_DEF void
stbrp_init_target	src/imgui/imstb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nod/;"	f	typeref:typename:void
stbrp_node	src/imgui/imstb_rectpack.h	/^struct stbrp_node$/;"	s
stbrp_node	src/imgui/imstb_rectpack.h	/^typedef struct stbrp_node    stbrp_node;$/;"	t	typeref:struct:stbrp_node
stbrp_node	src/imgui/imstb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anon80c56a9c1208
stbrp_pack_rects	src/imgui/imstb_rectpack.h	/^STBRP_DEF int stbrp_pack_rects(stbrp_context *context, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:STBRP_DEF int
stbrp_pack_rects	src/imgui/imstb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:void
stbrp_rect	src/imgui/imstb_rectpack.h	/^struct stbrp_rect$/;"	s
stbrp_rect	src/imgui/imstb_rectpack.h	/^typedef struct stbrp_rect    stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_rect	src/imgui/imstb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	src/imgui/imstb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_setup_allow_out_of_mem	src/imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_allow_out_of_mem(stbrp_context *context, int allow_out_of_mem)$/;"	f	typeref:typename:STBRP_DEF void
stbrp_setup_heuristic	src/imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_heuristic(stbrp_context *context, int heuristic)$/;"	f	typeref:typename:STBRP_DEF void
stbtt_BakeFontBitmap	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,$/;"	f	typeref:typename:STBTT_DEF int
stbtt_BakeFontBitmap_internal	src/imgui/imstb_truetype.h	/^static int stbtt_BakeFontBitmap_internal(unsigned char *data, int offset,  \/\/ font location (u/;"	f	typeref:typename:int
stbtt_CompareUTF8toUTF16_bigendian	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int l/;"	f	typeref:typename:STBTT_DEF int
stbtt_CompareUTF8toUTF16_bigendian_internal	src/imgui/imstb_truetype.h	/^static int stbtt_CompareUTF8toUTF16_bigendian_internal(char *s1, int len1, char *s2, int len2)$/;"	f	typeref:typename:int
stbtt_FindGlyphIndex	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont_internal	src/imgui/imstb_truetype.h	/^static int stbtt_FindMatchingFont_internal(unsigned char *font_collection, char *name_utf8, stbt/;"	f	typeref:typename:int
stbtt_FindSVGDoc	src/imgui/imstb_truetype.h	/^STBTT_DEF stbtt_uint8 *stbtt_FindSVGDoc(const stbtt_fontinfo *info, int gl)$/;"	f	typeref:typename:STBTT_DEF stbtt_uint8 *
stbtt_FlattenCurves	src/imgui/imstb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_f/;"	f	typeref:typename:stbtt__point *
stbtt_FreeBitmap	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeSDF	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeSDF(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeShape	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetBakedQuad	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph, int char_inde/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmap	src/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBitmapBox	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapBoxSubpixel	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, fl/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapSubpixel	src/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scal/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBox	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0,/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointHMetrics	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanc/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointKernAdvance	src/imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointSDF	src/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int cod/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointSVG	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointSVG(const stbtt_fontinfo *info, int unicode_codepoint, const cha/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointShape	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_v/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontBoundingBox	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, i/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontNameString	src/imgui/imstb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platf/;"	f	typeref:typename:STBTT_DEF const char *
stbtt_GetFontOffsetForIndex	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontOffsetForIndex_internal	src/imgui/imstb_truetype.h	/^static int stbtt_GetFontOffsetForIndex_internal(unsigned char *font_collection, int index)$/;"	f	typeref:typename:int
stbtt_GetFontVMetrics	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontVMetricsOS2	src/imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDe/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphBitmap	src/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float s/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBitmapBox	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapBoxSubpixel	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapSubpixel	src/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x,/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBox	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, i/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphHMetrics	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceW/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphKernAdvance	src/imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphSDF	src/imgui/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, /;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphSVG	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphSVG(const stbtt_fontinfo *info, int gl, const char **svg)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphShape	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetKerningTable	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetKerningTable(const stbtt_fontinfo *info, stbtt_kerningentry* table, int t/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetKerningTableLength	src/imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetKerningTableLength(const stbtt_fontinfo *info)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetNumberOfFonts(const unsigned char *data)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts_internal	src/imgui/imstb_truetype.h	/^static int stbtt_GetNumberOfFonts_internal(unsigned char *font_collection)$/;"	f	typeref:typename:int
stbtt_GetPackedQuad	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph, int char_in/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetScaledFontVMetrics	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetScaledFontVMetrics(const unsigned char *fontdata, int index, float size,/;"	f	typeref:typename:STBTT_DEF void
stbtt_InitFont	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_InitFont_internal	src/imgui/imstb_truetype.h	/^static int stbtt_InitFont_internal(stbtt_fontinfo *info, unsigned char *data, int fontstart)$/;"	f	typeref:typename:int
stbtt_IsGlyphEmpty	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_MakeCodepointBitmap	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixel	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *outp/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixelPrefilter	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned c/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmap	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixel	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixelPrefilter	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char /;"	f	typeref:typename:STBTT_DEF void
stbtt_PackBegin	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, in/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackEnd	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRange	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int fo/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRanges	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int f/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesGatherRects	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *inf/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesPackRects	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRangesRenderIntoRects	src/imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo /;"	f	typeref:typename:STBTT_DEF int
stbtt_PackSetOversampling	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, uns/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackSetSkipMissingCodepoints	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetSkipMissingCodepoints(stbtt_pack_context *spc, int skip)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_Rasterize	src/imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *ve/;"	f	typeref:typename:STBTT_DEF void
stbtt_ScaleForMappingEmToPixels	src/imgui/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f	typeref:typename:STBTT_DEF float
stbtt_ScaleForPixelHeight	src/imgui/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f	typeref:typename:STBTT_DEF float
stbtt__CompareUTF8toUTF16_bigendian_prefix	src/imgui/imstb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(stbtt_uint8 *s1, stbtt_int32 len1,/;"	f	typeref:typename:stbtt_int32
stbtt__GetCoverageIndex	src/imgui/imstb_truetype.h	/^static stbtt_int32 stbtt__GetCoverageIndex(stbtt_uint8 *coverageTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyfOffset	src/imgui/imstb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:int
stbtt__GetGlyphClass	src/imgui/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphClass(stbtt_uint8 *classDefTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphGPOSInfoAdvance	src/imgui/imstb_truetype.h	/^static stbtt_int32 stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *info, int glyph1, int gl/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphInfoT2	src/imgui/imstb_truetype.h	/^static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, /;"	f	typeref:typename:int
stbtt__GetGlyphKernInfoAdvance	src/imgui/imstb_truetype.h	/^static int stbtt__GetGlyphKernInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f	typeref:typename:int
stbtt__GetGlyphShapeT2	src/imgui/imstb_truetype.h	/^static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__GetGlyphShapeTT	src/imgui/imstb_truetype.h	/^static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__active_edge	src/imgui/imstb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	src/imgui/imstb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	src/imgui/imstb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f	typeref:typename:void
stbtt__bitmap	src/imgui/imstb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anon80c56a9c0808
stbtt__buf	src/imgui/imstb_truetype.h	/^} stbtt__buf;$/;"	t	typeref:struct:__anon80c56a9c0108
stbtt__buf_get	src/imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__buf_get(stbtt__buf *b, int n)$/;"	f	typeref:typename:stbtt_uint32
stbtt__buf_get16	src/imgui/imstb_truetype.h	/^#define stbtt__buf_get16(/;"	d
stbtt__buf_get32	src/imgui/imstb_truetype.h	/^#define stbtt__buf_get32(/;"	d
stbtt__buf_get8	src/imgui/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_get8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_peek8	src/imgui/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_peek8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_range	src/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__buf_range(const stbtt__buf *b, int o, int s)$/;"	f	typeref:typename:stbtt__buf
stbtt__buf_seek	src/imgui/imstb_truetype.h	/^static void stbtt__buf_seek(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__buf_skip	src/imgui/imstb_truetype.h	/^static void stbtt__buf_skip(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__cff_get_index	src/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cff_get_index(stbtt__buf *b)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_index_count	src/imgui/imstb_truetype.h	/^static int stbtt__cff_index_count(stbtt__buf *b)$/;"	f	typeref:typename:int
stbtt__cff_index_get	src/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_int	src/imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__cff_int(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint32
stbtt__cff_skip_operand	src/imgui/imstb_truetype.h	/^static void stbtt__cff_skip_operand(stbtt__buf *b) {$/;"	f	typeref:typename:void
stbtt__check_size16	src/imgui/imstb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int16)==2?1:-1]
stbtt__check_size32	src/imgui/imstb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int32)==4?1:-1]
stbtt__cid_get_glyph_subrs	src/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:stbtt__buf
stbtt__close_shape	src/imgui/imstb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_o/;"	f	typeref:typename:int
stbtt__compute_crossings_x	src/imgui/imstb_truetype.h	/^static int stbtt__compute_crossings_x(float x, float y, int nverts, stbtt_vertex *verts)$/;"	f	typeref:typename:int
stbtt__csctx	src/imgui/imstb_truetype.h	/^} stbtt__csctx;$/;"	t	typeref:struct:__anon80c56a9c0f08
stbtt__csctx_close_shape	src/imgui/imstb_truetype.h	/^static void stbtt__csctx_close_shape(stbtt__csctx *ctx)$/;"	f	typeref:typename:void
stbtt__csctx_rccurve_to	src/imgui/imstb_truetype.h	/^static void stbtt__csctx_rccurve_to(stbtt__csctx *ctx, float dx1, float dy1, float dx2, float dy/;"	f	typeref:typename:void
stbtt__csctx_rline_to	src/imgui/imstb_truetype.h	/^static void stbtt__csctx_rline_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_rmove_to	src/imgui/imstb_truetype.h	/^static void stbtt__csctx_rmove_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_v	src/imgui/imstb_truetype.h	/^static void stbtt__csctx_v(stbtt__csctx *c, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbt/;"	f	typeref:typename:void
stbtt__cuberoot	src/imgui/imstb_truetype.h	/^static float stbtt__cuberoot( float x )$/;"	f	typeref:typename:float
stbtt__dict_get	src/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__dict_get(stbtt__buf *b, int key)$/;"	f	typeref:typename:stbtt__buf
stbtt__dict_get_ints	src/imgui/imstb_truetype.h	/^static void stbtt__dict_get_ints(stbtt__buf *b, int key, int outcount, stbtt_uint32 *out)$/;"	f	typeref:typename:void
stbtt__edge	src/imgui/imstb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	src/imgui/imstb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	src/imgui/imstb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, in/;"	f	typeref:typename:void
stbtt__fill_active_edges_new	src/imgui/imstb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__/;"	f	typeref:typename:void
stbtt__find_table	src/imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag/;"	f	typeref:typename:stbtt_uint32
stbtt__get_subr	src/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_subrs	src/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_svg	src/imgui/imstb_truetype.h	/^static int stbtt__get_svg(stbtt_fontinfo *info)$/;"	f	typeref:typename:int
stbtt__h_prefilter	src/imgui/imstb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt__handle_clipped_edge	src/imgui/imstb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, /;"	f	typeref:typename:void
stbtt__hheap	src/imgui/imstb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	src/imgui/imstb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	src/imgui/imstb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f	typeref:typename:void *
stbtt__hheap_chunk	src/imgui/imstb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	src/imgui/imstb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	src/imgui/imstb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f	typeref:typename:void
stbtt__hheap_free	src/imgui/imstb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f	typeref:typename:void
stbtt__isfont	src/imgui/imstb_truetype.h	/^static int stbtt__isfont(stbtt_uint8 *font)$/;"	f	typeref:typename:int
stbtt__matches	src/imgui/imstb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 f/;"	f	typeref:typename:int
stbtt__matchpair	src/imgui/imstb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nle/;"	f	typeref:typename:int
stbtt__new_active	src/imgui/imstb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float /;"	f	typeref:typename:stbtt__active_edge *
stbtt__new_buf	src/imgui/imstb_truetype.h	/^static stbtt__buf stbtt__new_buf(const void *p, size_t size)$/;"	f	typeref:typename:stbtt__buf
stbtt__oversample_shift	src/imgui/imstb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f	typeref:typename:float
stbtt__point	src/imgui/imstb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anon80c56a9c1008
stbtt__position_trapezoid_area	src/imgui/imstb_truetype.h	/^static float stbtt__position_trapezoid_area(float height, float tx0, float tx1, float bx0, float/;"	f	typeref:typename:float
stbtt__rasterize	src/imgui/imstb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings/;"	f	typeref:typename:void
stbtt__rasterize_sorted_edges	src/imgui/imstb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsub/;"	f	typeref:typename:void
stbtt__ray_intersect_bezier	src/imgui/imstb_truetype.h	/^static int stbtt__ray_intersect_bezier(float orig[2], float ray[2], float q0[2], float q1[2], fl/;"	f	typeref:typename:int
stbtt__run_charstring	src/imgui/imstb_truetype.h	/^static int stbtt__run_charstring(const stbtt_fontinfo *info, int glyph_index, stbtt__csctx *c)$/;"	f	typeref:typename:int
stbtt__sized_trapezoid_area	src/imgui/imstb_truetype.h	/^static float stbtt__sized_trapezoid_area(float height, float top_width, float bottom_width)$/;"	f	typeref:typename:float
stbtt__sized_triangle_area	src/imgui/imstb_truetype.h	/^static float stbtt__sized_triangle_area(float height, float width)$/;"	f	typeref:typename:float
stbtt__solve_cubic	src/imgui/imstb_truetype.h	/^static int stbtt__solve_cubic(float a, float b, float c, float* r)$/;"	f	typeref:typename:int
stbtt__sort_edges	src/imgui/imstb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_ins_sort	src/imgui/imstb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_quicksort	src/imgui/imstb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__tesselate_cubic	src/imgui/imstb_truetype.h	/^static void stbtt__tesselate_cubic(stbtt__point *points, int *num_points, float x0, float y0, fl/;"	f	typeref:typename:void
stbtt__tesselate_curve	src/imgui/imstb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, flo/;"	f	typeref:typename:int
stbtt__test_oversample_pow2	src/imgui/imstb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ?/;"	t	typeref:typename:int[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1))==0?1:-1]
stbtt__track_vertex	src/imgui/imstb_truetype.h	/^static void stbtt__track_vertex(stbtt__csctx *c, stbtt_int32 x, stbtt_int32 y)$/;"	f	typeref:typename:void
stbtt__v_prefilter	src/imgui/imstb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt_aligned_quad	src/imgui/imstb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anon80c56a9c0308
stbtt_bakedchar	src/imgui/imstb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anon80c56a9c0208
stbtt_fontinfo	src/imgui/imstb_truetype.h	/^struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	src/imgui/imstb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	src/imgui/imstb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t	typeref:typename:signed short
stbtt_int32	src/imgui/imstb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t	typeref:typename:signed int
stbtt_int8	src/imgui/imstb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t	typeref:typename:signed char
stbtt_kerningentry	src/imgui/imstb_truetype.h	/^typedef struct stbtt_kerningentry$/;"	s
stbtt_kerningentry	src/imgui/imstb_truetype.h	/^} stbtt_kerningentry;$/;"	t	typeref:struct:stbtt_kerningentry
stbtt_pack_context	src/imgui/imstb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	src/imgui/imstb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	src/imgui/imstb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anon80c56a9c0508
stbtt_packedchar	src/imgui/imstb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anon80c56a9c0408
stbtt_setvertex	src/imgui/imstb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stb/;"	f	typeref:typename:void
stbtt_tag	src/imgui/imstb_truetype.h	/^#define stbtt_tag(/;"	d
stbtt_tag4	src/imgui/imstb_truetype.h	/^#define stbtt_tag4(/;"	d
stbtt_uint16	src/imgui/imstb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t	typeref:typename:unsigned short
stbtt_uint32	src/imgui/imstb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t	typeref:typename:unsigned int
stbtt_uint8	src/imgui/imstb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t	typeref:typename:unsigned char
stbtt_vertex	src/imgui/imstb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anon80c56a9c0708
stbtt_vertex_type	src/imgui/imstb_truetype.h	/^   #define stbtt_vertex_type /;"	d
step	src/timer.cpp	/^void Timer::step(u16 n_cycles_elapsed) $/;"	f	class:Timer	typeref:typename:void
stride	src/imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon80c56a9c0808	typeref:typename:int
stride_in_bytes	src/imgui/imstb_truetype.h	/^   int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
subrs	src/imgui/imstb_truetype.h	/^   stbtt__buf subrs;                  \/\/ private charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
svg	src/imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
swap	src/imgui/imgui_internal.h	/^    void    swap(ImChunkStream<T>& rhs) { rhs.Buf.swap(Buf); }$/;"	f	struct:ImChunkStream	typeref:typename:void
sy	src/imgui/imstb_truetype.h	/^   float sy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
t0	src/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon80c56a9c0308	typeref:typename:float
t1	src/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon80c56a9c0308	typeref:typename:float
timer_current	src/display.cpp	/^float timer_current;$/;"	v	typeref:typename:float
timer_start	src/display.cpp	/^std::chrono::time_point<std::chrono::high_resolution_clock> timer_start;$/;"	v	typeref:typename:std::chrono::time_point<std::chrono::high_resolution_clock>
ttBYTE	src/imgui/imstb_truetype.h	/^#define ttBYTE(/;"	d
ttCHAR	src/imgui/imstb_truetype.h	/^#define ttCHAR(/;"	d
ttFixed	src/imgui/imstb_truetype.h	/^#define ttFixed(/;"	d
ttLONG	src/imgui/imstb_truetype.h	/^static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_int32
ttSHORT	src/imgui/imstb_truetype.h	/^static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_int16
ttULONG	src/imgui/imstb_truetype.h	/^static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_uint32
ttUSHORT	src/imgui/imstb_truetype.h	/^static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_uint16
type	src/imgui/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon80c56a9c0708	typeref:typename:unsigned char
u16	src/typedefs.h	/^typedef uint16_t u16; $/;"	t	typeref:typename:uint16_t
u32	src/typedefs.h	/^typedef uint32_t u32; $/;"	t	typeref:typename:uint32_t
u64	src/typedefs.h	/^typedef uint64_t u64; $/;"	t	typeref:typename:uint64_t
u8	src/typedefs.h	/^typedef uint8_t   u8; $/;"	t	typeref:typename:uint8_t
undo_char	src/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_CHARTYPE  undo_char[STB_TEXTEDIT_UNDOCHARCOUNT];$/;"	m	struct:__anonb965c0a50208	typeref:typename:STB_TEXTEDIT_CHARTYPE[]
undo_char_point	src/imgui/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anonb965c0a50208	typeref:typename:int
undo_point	src/imgui/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anonb965c0a50208	typeref:typename:short
undo_rec	src/imgui/imstb_textedit.h	/^   StbUndoRecord          undo_rec [STB_TEXTEDIT_UNDOSTATECOUNT];$/;"	m	struct:__anonb965c0a50208	typeref:typename:StbUndoRecord[]
undostate	src/imgui/imstb_textedit.h	/^   StbUndoState undostate;$/;"	m	struct:__anonb965c0a50308	typeref:typename:StbUndoState
usage	src/main.cpp	/^const char *usage = "Usage: 6502-burken <program>\\n";$/;"	v	typeref:typename:const char *
use_frambuffer_gen_program	src/display.cpp	/^void Display::use_frambuffer_gen_program()$/;"	f	class:Display	typeref:typename:void
use_ntsc_decode_pass_a_program	src/display.cpp	/^void Display::use_ntsc_decode_pass_a_program() $/;"	f	class:Display	typeref:typename:void
use_ntsc_decode_pass_b_program	src/display.cpp	/^void Display::use_ntsc_decode_pass_b_program() $/;"	f	class:Display	typeref:typename:void
use_ntsc_encode_program	src/display.cpp	/^void Display::use_ntsc_encode_program() $/;"	f	class:Display	typeref:typename:void
use_post_process_program	src/display.cpp	/^void Display::use_post_process_program() $/;"	f	class:Display	typeref:typename:void
user_allocator_context	src/imgui/imstb_truetype.h	/^   void *user_allocator_context;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
userdata	src/imgui/imstb_truetype.h	/^   void           * userdata;$/;"	m	struct:stbtt_fontinfo	typeref:typename:void *
uv	src/display.h	/^    glm::vec2 uv;$/;"	m	struct:Vertex	typeref:typename:glm::vec2
v_oversample	src/imgui/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon80c56a9c0508	typeref:typename:unsigned char
v_oversample	src/imgui/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
va_copy	src/imgui/imgui.cpp	/^#define va_copy(/;"	d	file:
vga_char_texture	src/display.h	/^    unsigned int vga_char_texture;$/;"	m	class:Display	typeref:typename:unsigned int
vga_text_texture	src/display.h	/^    unsigned int vga_text_texture;$/;"	m	class:Display	typeref:typename:unsigned int
vsnprintf	src/imgui/imgui.cpp	/^#define vsnprintf /;"	d	file:
vsnprintf	src/imgui/imgui_demo.cpp	/^#define vsnprintf /;"	d	file:
w	src/imgui/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
w	src/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
w	src/imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon80c56a9c0808	typeref:typename:int
was_packed	src/imgui/imstb_rectpack.h	/^   int            was_packed;  \/\/ non-zero if valid packing$/;"	m	struct:stbrp_rect	typeref:typename:int
was_packed	src/imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
where	src/imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  where;$/;"	m	struct:__anonb965c0a50108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
width	src/imgui/imstb_rectpack.h	/^   int width;$/;"	m	struct:stbrp_context	typeref:typename:int
width	src/imgui/imstb_truetype.h	/^   int   width;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
width	src/imgui/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anon80c56a9c1108	typeref:typename:int
window	src/display.h	/^    GLFWwindow *window;$/;"	m	class:Display	typeref:typename:GLFWwindow *
x	src/imgui/imgui_internal.h	/^    float   x;$/;"	m	struct:ImVec1	typeref:typename:float
x	src/imgui/imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
x	src/imgui/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anon69592cc70308	typeref:typename:int
x	src/imgui/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	src/imgui/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
x	src/imgui/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anonb965c0a50508	typeref:typename:float
x	src/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon80c56a9c0708	typeref:typename:stbtt_vertex_type
x	src/imgui/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anon80c56a9c0f08	typeref:typename:float
x	src/imgui/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anon80c56a9c1008	typeref:typename:float
x	src/imgui/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
x	src/imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon80c56a9c1108	typeref:typename:int
x	src/imgui/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	src/imgui/imstb_truetype.h	/^   unsigned char x;$/;"	m	struct:__anon80c56a9c1208	typeref:typename:unsigned char
x0	src/imgui/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anonb965c0a50408	typeref:typename:float
x0	src/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x0	src/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon80c56a9c0308	typeref:typename:float
x0	src/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon80c56a9c0208	typeref:typename:unsigned short
x0	src/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon80c56a9c0408	typeref:typename:unsigned short
x1	src/imgui/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anonb965c0a50408	typeref:typename:float
x1	src/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x1	src/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon80c56a9c0308	typeref:typename:float
x1	src/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon80c56a9c0208	typeref:typename:unsigned short
x1	src/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon80c56a9c0408	typeref:typename:unsigned short
xadvance	src/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon80c56a9c0208	typeref:typename:float
xadvance	src/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon80c56a9c0408	typeref:typename:float
xoff	src/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon80c56a9c0208	typeref:typename:float
xoff	src/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon80c56a9c0408	typeref:typename:float
xoff2	src/imgui/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon80c56a9c0408	typeref:typename:float
y	src/imgui/imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
y	src/imgui/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anon69592cc70308	typeref:typename:int
y	src/imgui/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y	src/imgui/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
y	src/imgui/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anonb965c0a50508	typeref:typename:float
y	src/imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon80c56a9c0708	typeref:typename:stbtt_vertex_type
y	src/imgui/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anon80c56a9c0f08	typeref:typename:float
y	src/imgui/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anon80c56a9c1008	typeref:typename:float
y	src/imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon80c56a9c1108	typeref:typename:int
y	src/imgui/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y0	src/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y0	src/imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon80c56a9c0308	typeref:typename:float
y0	src/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon80c56a9c0208	typeref:typename:unsigned short
y0	src/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon80c56a9c0408	typeref:typename:unsigned short
y1	src/imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y1	src/imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon80c56a9c0308	typeref:typename:float
y1	src/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon80c56a9c0208	typeref:typename:unsigned short
y1	src/imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon80c56a9c0408	typeref:typename:unsigned short
ymax	src/imgui/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anonb965c0a50408	typeref:typename:float
ymin	src/imgui/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anonb965c0a50408	typeref:typename:float
yoff	src/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon80c56a9c0208	typeref:typename:float
yoff	src/imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon80c56a9c0408	typeref:typename:float
yoff2	src/imgui/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon80c56a9c0408	typeref:typename:float
~Display	src/display.cpp	/^Display::~Display() {$/;"	f	class:Display
~ExampleAppConsole	src/imgui/imgui_demo.cpp	/^    ~ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
~ImFont	src/imgui/imgui_draw.cpp	/^ImFont::~ImFont()$/;"	f	class:ImFont
~ImFontAtlas	src/imgui/imgui_draw.cpp	/^ImFontAtlas::~ImFontAtlas()$/;"	f	class:ImFontAtlas
~ImGuiListClipper	src/imgui/imgui.cpp	/^ImGuiListClipper::~ImGuiListClipper()$/;"	f	class:ImGuiListClipper
~ImGuiTable	src/imgui/imgui_internal.h	/^    ~ImGuiTable()               { IM_FREE(RawData); }$/;"	f	struct:ImGuiTable
~ImGuiViewportP	src/imgui/imgui_internal.h	/^    ~ImGuiViewportP()   { if (DrawLists[0]) IM_DELETE(DrawLists[0]); if (DrawLists[1]) IM_DELETE/;"	f	struct:ImGuiViewportP
~ImGuiWindow	src/imgui/imgui.cpp	/^ImGuiWindow::~ImGuiWindow()$/;"	f	class:ImGuiWindow
~ImPool	src/imgui/imgui_internal.h	/^    ~ImPool()   { Clear(); }$/;"	f	struct:ImPool
~Memory	src/memory.cpp	/^Memory::~Memory()$/;"	f	class:Memory
